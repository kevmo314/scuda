#include <cublas_v2.h>
#include <cuda.h>
#include <cuda_runtime_api.h>
#include <cudnn.h>
#include <iostream>
#include <nvml.h>

#include <cstring>
#include <string>
#include <unordered_map>

#include "gen_api.h"

#include "gen_server.h"

#include "manual_server.h"

#include "rpc.h"

int handle_nvmlInit_v2(conn_t *conn) {
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlInit_v2();

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlInitWithFlags(conn_t *conn) {
  unsigned int flags;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlInitWithFlags(flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlShutdown(conn_t *conn) {
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlShutdown();

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlSystemGetDriverVersion(conn_t *conn) {
  unsigned int length;
  char *version;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &length, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  version = (char *)malloc(length * sizeof(char));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = nvmlSystemGetDriverVersion(version, length);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, version, length * sizeof(char)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)version);
ERROR_0:
  return -1;
}

int handle_nvmlSystemGetNVMLVersion(conn_t *conn) {
  unsigned int length;
  char *version;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &length, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  version = (char *)malloc(length * sizeof(char));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = nvmlSystemGetNVMLVersion(version, length);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, version, length * sizeof(char)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)version);
ERROR_0:
  return -1;
}

int handle_nvmlSystemGetCudaDriverVersion(conn_t *conn) {
  int cudaDriverVersion;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlSystemGetCudaDriverVersion(&cudaDriverVersion);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &cudaDriverVersion, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlSystemGetCudaDriverVersion_v2(conn_t *conn) {
  int cudaDriverVersion;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlSystemGetCudaDriverVersion_v2(&cudaDriverVersion);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &cudaDriverVersion, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlSystemGetProcessName(conn_t *conn) {
  unsigned int pid;
  unsigned int length;
  char *name;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &pid, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &length, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  name = (char *)malloc(length * sizeof(char));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = nvmlSystemGetProcessName(pid, name, length);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, name, length * sizeof(char)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)name);
ERROR_0:
  return -1;
}

int handle_nvmlUnitGetCount(conn_t *conn) {
  unsigned int unitCount;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlUnitGetCount(&unitCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &unitCount, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlUnitGetHandleByIndex(conn_t *conn) {
  unsigned int index;
  nvmlUnit_t unit;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &index, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlUnitGetHandleByIndex(index, &unit);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &unit, sizeof(nvmlUnit_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlUnitGetUnitInfo(conn_t *conn) {
  nvmlUnit_t unit;
  nvmlUnitInfo_t info;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &unit, sizeof(nvmlUnit_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlUnitGetUnitInfo(unit, &info);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &info, sizeof(nvmlUnitInfo_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlUnitGetLedState(conn_t *conn) {
  nvmlUnit_t unit;
  nvmlLedState_t state;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &unit, sizeof(nvmlUnit_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlUnitGetLedState(unit, &state);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &state, sizeof(nvmlLedState_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlUnitGetPsuInfo(conn_t *conn) {
  nvmlUnit_t unit;
  nvmlPSUInfo_t psu;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &unit, sizeof(nvmlUnit_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlUnitGetPsuInfo(unit, &psu);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &psu, sizeof(nvmlPSUInfo_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlUnitGetTemperature(conn_t *conn) {
  nvmlUnit_t unit;
  unsigned int type;
  unsigned int temp;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &unit, sizeof(nvmlUnit_t)) < 0 ||
      rpc_read(conn, &type, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlUnitGetTemperature(unit, type, &temp);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &temp, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlUnitGetFanSpeedInfo(conn_t *conn) {
  nvmlUnit_t unit;
  nvmlUnitFanSpeeds_t fanSpeeds;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &unit, sizeof(nvmlUnit_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlUnitGetFanSpeedInfo(unit, &fanSpeeds);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &fanSpeeds, sizeof(nvmlUnitFanSpeeds_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlUnitGetDevices(conn_t *conn) {
  nvmlUnit_t unit;
  unsigned int deviceCount;
  nvmlDevice_t *devices;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &unit, sizeof(nvmlUnit_t)) < 0 ||
      rpc_read(conn, &deviceCount, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  devices = (nvmlDevice_t *)malloc(deviceCount * sizeof(nvmlDevice_t));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = nvmlUnitGetDevices(unit, &deviceCount, devices);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &deviceCount, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, devices, deviceCount * sizeof(nvmlDevice_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)devices);
ERROR_0:
  return -1;
}

int handle_nvmlSystemGetHicVersion(conn_t *conn) {
  unsigned int hwbcCount;
  nvmlHwbcEntry_t *hwbcEntries;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &hwbcCount, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  hwbcEntries = (nvmlHwbcEntry_t *)malloc(hwbcCount * sizeof(nvmlHwbcEntry_t));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = nvmlSystemGetHicVersion(&hwbcCount, hwbcEntries);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &hwbcCount, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, hwbcEntries, hwbcCount * sizeof(nvmlHwbcEntry_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)hwbcEntries);
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetCount_v2(conn_t *conn) {
  unsigned int deviceCount;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetCount_v2(&deviceCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &deviceCount, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetAttributes_v2(conn_t *conn) {
  nvmlDevice_t device;
  nvmlDeviceAttributes_t attributes;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetAttributes_v2(device, &attributes);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &attributes, sizeof(nvmlDeviceAttributes_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetHandleByIndex_v2(conn_t *conn) {
  unsigned int index;
  nvmlDevice_t device;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &index, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetHandleByIndex_v2(index, &device);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetHandleBySerial(conn_t *conn) {
  const char *serial;
  std::size_t serial_len;
  nvmlDevice_t device;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &serial_len, sizeof(std::size_t)) < 0)
    goto ERROR_0;
  serial = (const char *)malloc(serial_len);
  if (rpc_read(conn, (void *)serial, serial_len) < 0 || false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = nvmlDeviceGetHandleBySerial(serial, &device);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)serial);
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetHandleByUUID(conn_t *conn) {
  const char *uuid;
  std::size_t uuid_len;
  nvmlDevice_t device;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &uuid_len, sizeof(std::size_t)) < 0)
    goto ERROR_0;
  uuid = (const char *)malloc(uuid_len);
  if (rpc_read(conn, (void *)uuid, uuid_len) < 0 || false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = nvmlDeviceGetHandleByUUID(uuid, &device);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)uuid);
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetHandleByPciBusId_v2(conn_t *conn) {
  const char *pciBusId;
  std::size_t pciBusId_len;
  nvmlDevice_t device;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &pciBusId_len, sizeof(std::size_t)) < 0)
    goto ERROR_0;
  pciBusId = (const char *)malloc(pciBusId_len);
  if (rpc_read(conn, (void *)pciBusId, pciBusId_len) < 0 || false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = nvmlDeviceGetHandleByPciBusId_v2(pciBusId, &device);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)pciBusId);
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetName(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int length;
  char *name;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &length, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  name = (char *)malloc(length * sizeof(char));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = nvmlDeviceGetName(device, name, length);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, name, length * sizeof(char)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)name);
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetBrand(conn_t *conn) {
  nvmlDevice_t device;
  nvmlBrandType_t type;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetBrand(device, &type);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &type, sizeof(nvmlBrandType_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetIndex(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int index;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetIndex(device, &index);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &index, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetSerial(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int length;
  char *serial;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &length, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  serial = (char *)malloc(length * sizeof(char));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = nvmlDeviceGetSerial(device, serial, length);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, serial, length * sizeof(char)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)serial);
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetMemoryAffinity(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int nodeSetSize;
  unsigned long *nodeSet;
  nvmlAffinityScope_t scope;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &nodeSetSize, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  nodeSet = (unsigned long *)malloc(nodeSetSize * sizeof(unsigned long));
  if (rpc_read(conn, &scope, sizeof(nvmlAffinityScope_t)) < 0 || false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result =
      nvmlDeviceGetMemoryAffinity(device, nodeSetSize, nodeSet, scope);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, nodeSet, nodeSetSize * sizeof(unsigned long)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)nodeSet);
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetCpuAffinityWithinScope(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int cpuSetSize;
  unsigned long *cpuSet;
  nvmlAffinityScope_t scope;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &cpuSetSize, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  cpuSet = (unsigned long *)malloc(cpuSetSize * sizeof(unsigned long));
  if (rpc_read(conn, &scope, sizeof(nvmlAffinityScope_t)) < 0 || false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result =
      nvmlDeviceGetCpuAffinityWithinScope(device, cpuSetSize, cpuSet, scope);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, cpuSet, cpuSetSize * sizeof(unsigned long)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)cpuSet);
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetCpuAffinity(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int cpuSetSize;
  unsigned long *cpuSet;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &cpuSetSize, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  cpuSet = (unsigned long *)malloc(cpuSetSize * sizeof(unsigned long));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = nvmlDeviceGetCpuAffinity(device, cpuSetSize, cpuSet);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, cpuSet, cpuSetSize * sizeof(unsigned long)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)cpuSet);
ERROR_0:
  return -1;
}

int handle_nvmlDeviceSetCpuAffinity(conn_t *conn) {
  nvmlDevice_t device;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceSetCpuAffinity(device);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceClearCpuAffinity(conn_t *conn) {
  nvmlDevice_t device;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceClearCpuAffinity(device);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetTopologyCommonAncestor(conn_t *conn) {
  nvmlDevice_t device1;
  nvmlDevice_t device2;
  nvmlGpuTopologyLevel_t pathInfo;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device1, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &device2, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetTopologyCommonAncestor(device1, device2, &pathInfo);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pathInfo, sizeof(nvmlGpuTopologyLevel_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetTopologyNearestGpus(conn_t *conn) {
  nvmlDevice_t device;
  nvmlGpuTopologyLevel_t level;
  unsigned int count;
  nvmlDevice_t *deviceArray;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &level, sizeof(nvmlGpuTopologyLevel_t)) < 0 ||
      rpc_read(conn, &count, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  deviceArray = (nvmlDevice_t *)malloc(count * sizeof(nvmlDevice_t));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result =
      nvmlDeviceGetTopologyNearestGpus(device, level, &count, deviceArray);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &count, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, deviceArray, count * sizeof(nvmlDevice_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)deviceArray);
ERROR_0:
  return -1;
}

int handle_nvmlSystemGetTopologyGpuSet(conn_t *conn) {
  unsigned int cpuNumber;
  unsigned int count;
  nvmlDevice_t *deviceArray;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &cpuNumber, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &count, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  deviceArray = (nvmlDevice_t *)malloc(count * sizeof(nvmlDevice_t));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result =
      nvmlSystemGetTopologyGpuSet(cpuNumber, &count, deviceArray);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &count, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, deviceArray, count * sizeof(nvmlDevice_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)deviceArray);
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetP2PStatus(conn_t *conn) {
  nvmlDevice_t device1;
  nvmlDevice_t device2;
  nvmlGpuP2PCapsIndex_t p2pIndex;
  nvmlGpuP2PStatus_t p2pStatus;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device1, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &device2, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &p2pIndex, sizeof(nvmlGpuP2PCapsIndex_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetP2PStatus(device1, device2, p2pIndex, &p2pStatus);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &p2pStatus, sizeof(nvmlGpuP2PStatus_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetUUID(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int length;
  char *uuid;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &length, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  uuid = (char *)malloc(length * sizeof(char));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = nvmlDeviceGetUUID(device, uuid, length);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, uuid, length * sizeof(char)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)uuid);
ERROR_0:
  return -1;
}

int handle_nvmlVgpuInstanceGetMdevUUID(conn_t *conn) {
  nvmlVgpuInstance_t vgpuInstance;
  unsigned int size;
  char *mdevUuid;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &vgpuInstance, sizeof(nvmlVgpuInstance_t)) < 0 ||
      rpc_read(conn, &size, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  mdevUuid = (char *)malloc(size * sizeof(char));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result =
      nvmlVgpuInstanceGetMdevUUID(vgpuInstance, mdevUuid, size);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, mdevUuid, size * sizeof(char)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)mdevUuid);
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetMinorNumber(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int minorNumber;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetMinorNumber(device, &minorNumber);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &minorNumber, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetBoardPartNumber(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int length;
  char *partNumber;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &length, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  partNumber = (char *)malloc(length * sizeof(char));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result =
      nvmlDeviceGetBoardPartNumber(device, partNumber, length);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, partNumber, length * sizeof(char)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)partNumber);
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetInforomVersion(conn_t *conn) {
  nvmlDevice_t device;
  nvmlInforomObject_t object;
  unsigned int length;
  char *version;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &object, sizeof(nvmlInforomObject_t)) < 0 ||
      rpc_read(conn, &length, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  version = (char *)malloc(length * sizeof(char));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result =
      nvmlDeviceGetInforomVersion(device, object, version, length);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, version, length * sizeof(char)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)version);
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetInforomImageVersion(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int length;
  char *version;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &length, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  version = (char *)malloc(length * sizeof(char));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result =
      nvmlDeviceGetInforomImageVersion(device, version, length);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, version, length * sizeof(char)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)version);
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetInforomConfigurationChecksum(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int checksum;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetInforomConfigurationChecksum(device, &checksum);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &checksum, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceValidateInforom(conn_t *conn) {
  nvmlDevice_t device;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceValidateInforom(device);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetDisplayMode(conn_t *conn) {
  nvmlDevice_t device;
  nvmlEnableState_t display;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetDisplayMode(device, &display);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &display, sizeof(nvmlEnableState_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetDisplayActive(conn_t *conn) {
  nvmlDevice_t device;
  nvmlEnableState_t isActive;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetDisplayActive(device, &isActive);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &isActive, sizeof(nvmlEnableState_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetPersistenceMode(conn_t *conn) {
  nvmlDevice_t device;
  nvmlEnableState_t mode;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetPersistenceMode(device, &mode);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &mode, sizeof(nvmlEnableState_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetPciInfo_v3(conn_t *conn) {
  nvmlDevice_t device;
  nvmlPciInfo_t pci;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetPciInfo_v3(device, &pci);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pci, sizeof(nvmlPciInfo_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetMaxPcieLinkGeneration(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int maxLinkGen;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetMaxPcieLinkGeneration(device, &maxLinkGen);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &maxLinkGen, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetGpuMaxPcieLinkGeneration(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int maxLinkGenDevice;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetGpuMaxPcieLinkGeneration(device, &maxLinkGenDevice);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &maxLinkGenDevice, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetMaxPcieLinkWidth(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int maxLinkWidth;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetMaxPcieLinkWidth(device, &maxLinkWidth);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &maxLinkWidth, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetCurrPcieLinkGeneration(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int currLinkGen;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetCurrPcieLinkGeneration(device, &currLinkGen);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &currLinkGen, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetCurrPcieLinkWidth(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int currLinkWidth;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetCurrPcieLinkWidth(device, &currLinkWidth);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &currLinkWidth, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetPcieThroughput(conn_t *conn) {
  nvmlDevice_t device;
  nvmlPcieUtilCounter_t counter;
  unsigned int value;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &counter, sizeof(nvmlPcieUtilCounter_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetPcieThroughput(device, counter, &value);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &value, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetPcieReplayCounter(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int value;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetPcieReplayCounter(device, &value);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &value, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetClockInfo(conn_t *conn) {
  nvmlDevice_t device;
  nvmlClockType_t type;
  unsigned int clock;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &type, sizeof(nvmlClockType_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetClockInfo(device, type, &clock);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &clock, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetMaxClockInfo(conn_t *conn) {
  nvmlDevice_t device;
  nvmlClockType_t type;
  unsigned int clock;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &type, sizeof(nvmlClockType_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetMaxClockInfo(device, type, &clock);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &clock, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetApplicationsClock(conn_t *conn) {
  nvmlDevice_t device;
  nvmlClockType_t clockType;
  unsigned int clockMHz;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &clockType, sizeof(nvmlClockType_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetApplicationsClock(device, clockType, &clockMHz);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &clockMHz, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetDefaultApplicationsClock(conn_t *conn) {
  nvmlDevice_t device;
  nvmlClockType_t clockType;
  unsigned int clockMHz;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &clockType, sizeof(nvmlClockType_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetDefaultApplicationsClock(device, clockType, &clockMHz);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &clockMHz, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceResetApplicationsClocks(conn_t *conn) {
  nvmlDevice_t device;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceResetApplicationsClocks(device);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetClock(conn_t *conn) {
  nvmlDevice_t device;
  nvmlClockType_t clockType;
  nvmlClockId_t clockId;
  unsigned int clockMHz;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &clockType, sizeof(nvmlClockType_t)) < 0 ||
      rpc_read(conn, &clockId, sizeof(nvmlClockId_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetClock(device, clockType, clockId, &clockMHz);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &clockMHz, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetMaxCustomerBoostClock(conn_t *conn) {
  nvmlDevice_t device;
  nvmlClockType_t clockType;
  unsigned int clockMHz;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &clockType, sizeof(nvmlClockType_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetMaxCustomerBoostClock(device, clockType, &clockMHz);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &clockMHz, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetSupportedMemoryClocks(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int count;
  unsigned int *clocksMHz;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &count, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  clocksMHz = (unsigned int *)malloc(count * sizeof(unsigned int));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result =
      nvmlDeviceGetSupportedMemoryClocks(device, &count, clocksMHz);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &count, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, clocksMHz, count * sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)clocksMHz);
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetSupportedGraphicsClocks(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int memoryClockMHz;
  unsigned int count;
  unsigned int *clocksMHz;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &memoryClockMHz, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &count, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  clocksMHz = (unsigned int *)malloc(count * sizeof(unsigned int));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = nvmlDeviceGetSupportedGraphicsClocks(
      device, memoryClockMHz, &count, clocksMHz);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &count, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, clocksMHz, count * sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)clocksMHz);
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetAutoBoostedClocksEnabled(conn_t *conn) {
  nvmlDevice_t device;
  nvmlEnableState_t isEnabled;
  nvmlEnableState_t defaultIsEnabled;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetAutoBoostedClocksEnabled(
      device, &isEnabled, &defaultIsEnabled);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &isEnabled, sizeof(nvmlEnableState_t)) < 0 ||
      rpc_write(conn, &defaultIsEnabled, sizeof(nvmlEnableState_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceSetAutoBoostedClocksEnabled(conn_t *conn) {
  nvmlDevice_t device;
  nvmlEnableState_t enabled;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &enabled, sizeof(nvmlEnableState_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceSetAutoBoostedClocksEnabled(device, enabled);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceSetDefaultAutoBoostedClocksEnabled(conn_t *conn) {
  nvmlDevice_t device;
  nvmlEnableState_t enabled;
  unsigned int flags;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &enabled, sizeof(nvmlEnableState_t)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceSetDefaultAutoBoostedClocksEnabled(device, enabled, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetFanSpeed(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int speed;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetFanSpeed(device, &speed);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &speed, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetFanSpeed_v2(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int fan;
  unsigned int speed;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &fan, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetFanSpeed_v2(device, fan, &speed);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &speed, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetTargetFanSpeed(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int fan;
  unsigned int targetSpeed;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &fan, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetTargetFanSpeed(device, fan, &targetSpeed);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &targetSpeed, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceSetDefaultFanSpeed_v2(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int fan;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &fan, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceSetDefaultFanSpeed_v2(device, fan);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetMinMaxFanSpeed(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int minSpeed;
  unsigned int maxSpeed;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetMinMaxFanSpeed(device, &minSpeed, &maxSpeed);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &minSpeed, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &maxSpeed, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetFanControlPolicy_v2(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int fan;
  nvmlFanControlPolicy_t policy;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &fan, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetFanControlPolicy_v2(device, fan, &policy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &policy, sizeof(nvmlFanControlPolicy_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceSetFanControlPolicy(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int fan;
  nvmlFanControlPolicy_t policy;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &fan, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &policy, sizeof(nvmlFanControlPolicy_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceSetFanControlPolicy(device, fan, policy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetNumFans(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int numFans;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetNumFans(device, &numFans);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &numFans, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetTemperature(conn_t *conn) {
  nvmlDevice_t device;
  nvmlTemperatureSensors_t sensorType;
  unsigned int temp;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &sensorType, sizeof(nvmlTemperatureSensors_t)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetTemperature(device, sensorType, &temp);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &temp, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetTemperatureThreshold(conn_t *conn) {
  nvmlDevice_t device;
  nvmlTemperatureThresholds_t thresholdType;
  unsigned int temp;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &thresholdType, sizeof(nvmlTemperatureThresholds_t)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetTemperatureThreshold(device, thresholdType, &temp);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &temp, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceSetTemperatureThreshold(conn_t *conn) {
  nvmlDevice_t device;
  nvmlTemperatureThresholds_t thresholdType;
  int temp;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &thresholdType, sizeof(nvmlTemperatureThresholds_t)) < 0 ||
      rpc_read(conn, &temp, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceSetTemperatureThreshold(device, thresholdType, &temp);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &temp, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetThermalSettings(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int sensorIndex;
  nvmlGpuThermalSettings_t pThermalSettings;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &sensorIndex, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetThermalSettings(device, sensorIndex, &pThermalSettings);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pThermalSettings, sizeof(nvmlGpuThermalSettings_t)) <
          0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetPerformanceState(conn_t *conn) {
  nvmlDevice_t device;
  nvmlPstates_t pState;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetPerformanceState(device, &pState);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pState, sizeof(nvmlPstates_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetCurrentClocksThrottleReasons(conn_t *conn) {
  nvmlDevice_t device;
  unsigned long long clocksThrottleReasons;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetCurrentClocksThrottleReasons(device, &clocksThrottleReasons);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &clocksThrottleReasons, sizeof(unsigned long long)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetSupportedClocksThrottleReasons(conn_t *conn) {
  nvmlDevice_t device;
  unsigned long long supportedClocksThrottleReasons;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetSupportedClocksThrottleReasons(
      device, &supportedClocksThrottleReasons);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &supportedClocksThrottleReasons,
                sizeof(unsigned long long)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetPowerState(conn_t *conn) {
  nvmlDevice_t device;
  nvmlPstates_t pState;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetPowerState(device, &pState);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pState, sizeof(nvmlPstates_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetPowerManagementMode(conn_t *conn) {
  nvmlDevice_t device;
  nvmlEnableState_t mode;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetPowerManagementMode(device, &mode);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &mode, sizeof(nvmlEnableState_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetPowerManagementLimit(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int limit;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetPowerManagementLimit(device, &limit);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &limit, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetPowerManagementLimitConstraints(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int minLimit;
  unsigned int maxLimit;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetPowerManagementLimitConstraints(
      device, &minLimit, &maxLimit);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &minLimit, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &maxLimit, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetPowerManagementDefaultLimit(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int defaultLimit;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetPowerManagementDefaultLimit(device, &defaultLimit);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &defaultLimit, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetPowerUsage(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int power;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetPowerUsage(device, &power);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &power, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetTotalEnergyConsumption(conn_t *conn) {
  nvmlDevice_t device;
  unsigned long long energy;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetTotalEnergyConsumption(device, &energy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &energy, sizeof(unsigned long long)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetEnforcedPowerLimit(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int limit;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetEnforcedPowerLimit(device, &limit);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &limit, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetGpuOperationMode(conn_t *conn) {
  nvmlDevice_t device;
  nvmlGpuOperationMode_t current;
  nvmlGpuOperationMode_t pending;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetGpuOperationMode(device, &current, &pending);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &current, sizeof(nvmlGpuOperationMode_t)) < 0 ||
      rpc_write(conn, &pending, sizeof(nvmlGpuOperationMode_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetMemoryInfo(conn_t *conn) {
  nvmlDevice_t device;
  nvmlMemory_t memory;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetMemoryInfo(device, &memory);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &memory, sizeof(nvmlMemory_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetMemoryInfo_v2(conn_t *conn) {
  nvmlDevice_t device;
  nvmlMemory_v2_t memory;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetMemoryInfo_v2(device, &memory);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &memory, sizeof(nvmlMemory_v2_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetComputeMode(conn_t *conn) {
  nvmlDevice_t device;
  nvmlComputeMode_t mode;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetComputeMode(device, &mode);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &mode, sizeof(nvmlComputeMode_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetCudaComputeCapability(conn_t *conn) {
  nvmlDevice_t device;
  int major;
  int minor;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetCudaComputeCapability(device, &major, &minor);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &major, sizeof(int)) < 0 ||
      rpc_write(conn, &minor, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetEccMode(conn_t *conn) {
  nvmlDevice_t device;
  nvmlEnableState_t current;
  nvmlEnableState_t pending;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetEccMode(device, &current, &pending);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &current, sizeof(nvmlEnableState_t)) < 0 ||
      rpc_write(conn, &pending, sizeof(nvmlEnableState_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetDefaultEccMode(conn_t *conn) {
  nvmlDevice_t device;
  nvmlEnableState_t defaultMode;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetDefaultEccMode(device, &defaultMode);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &defaultMode, sizeof(nvmlEnableState_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetBoardId(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int boardId;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetBoardId(device, &boardId);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &boardId, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetMultiGpuBoard(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int multiGpuBool;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetMultiGpuBoard(device, &multiGpuBool);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &multiGpuBool, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetTotalEccErrors(conn_t *conn) {
  nvmlDevice_t device;
  nvmlMemoryErrorType_t errorType;
  nvmlEccCounterType_t counterType;
  unsigned long long eccCounts;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &errorType, sizeof(nvmlMemoryErrorType_t)) < 0 ||
      rpc_read(conn, &counterType, sizeof(nvmlEccCounterType_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetTotalEccErrors(device, errorType, counterType, &eccCounts);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &eccCounts, sizeof(unsigned long long)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetDetailedEccErrors(conn_t *conn) {
  nvmlDevice_t device;
  nvmlMemoryErrorType_t errorType;
  nvmlEccCounterType_t counterType;
  nvmlEccErrorCounts_t eccCounts;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &errorType, sizeof(nvmlMemoryErrorType_t)) < 0 ||
      rpc_read(conn, &counterType, sizeof(nvmlEccCounterType_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetDetailedEccErrors(
      device, errorType, counterType, &eccCounts);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &eccCounts, sizeof(nvmlEccErrorCounts_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetMemoryErrorCounter(conn_t *conn) {
  nvmlDevice_t device;
  nvmlMemoryErrorType_t errorType;
  nvmlEccCounterType_t counterType;
  nvmlMemoryLocation_t locationType;
  unsigned long long count;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &errorType, sizeof(nvmlMemoryErrorType_t)) < 0 ||
      rpc_read(conn, &counterType, sizeof(nvmlEccCounterType_t)) < 0 ||
      rpc_read(conn, &locationType, sizeof(nvmlMemoryLocation_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetMemoryErrorCounter(
      device, errorType, counterType, locationType, &count);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &count, sizeof(unsigned long long)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetUtilizationRates(conn_t *conn) {
  nvmlDevice_t device;
  nvmlUtilization_t utilization;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetUtilizationRates(device, &utilization);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &utilization, sizeof(nvmlUtilization_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetEncoderUtilization(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int utilization;
  unsigned int samplingPeriodUs;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetEncoderUtilization(device, &utilization, &samplingPeriodUs);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &utilization, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &samplingPeriodUs, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetEncoderCapacity(conn_t *conn) {
  nvmlDevice_t device;
  nvmlEncoderType_t encoderQueryType;
  unsigned int encoderCapacity;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &encoderQueryType, sizeof(nvmlEncoderType_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetEncoderCapacity(device, encoderQueryType, &encoderCapacity);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &encoderCapacity, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetEncoderStats(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int sessionCount;
  unsigned int averageFps;
  unsigned int averageLatency;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetEncoderStats(
      device, &sessionCount, &averageFps, &averageLatency);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &sessionCount, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &averageFps, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &averageLatency, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetEncoderSessions(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int sessionCount;
  nvmlEncoderSessionInfo_t *sessionInfos;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &sessionCount, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  sessionInfos = (nvmlEncoderSessionInfo_t *)malloc(
      sessionCount * sizeof(nvmlEncoderSessionInfo_t));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result =
      nvmlDeviceGetEncoderSessions(device, &sessionCount, sessionInfos);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &sessionCount, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, sessionInfos,
                sessionCount * sizeof(nvmlEncoderSessionInfo_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)sessionInfos);
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetDecoderUtilization(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int utilization;
  unsigned int samplingPeriodUs;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetDecoderUtilization(device, &utilization, &samplingPeriodUs);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &utilization, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &samplingPeriodUs, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetFBCStats(conn_t *conn) {
  nvmlDevice_t device;
  nvmlFBCStats_t fbcStats;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetFBCStats(device, &fbcStats);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &fbcStats, sizeof(nvmlFBCStats_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetFBCSessions(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int sessionCount;
  nvmlFBCSessionInfo_t *sessionInfo;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &sessionCount, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  sessionInfo = (nvmlFBCSessionInfo_t *)malloc(sessionCount *
                                               sizeof(nvmlFBCSessionInfo_t));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result =
      nvmlDeviceGetFBCSessions(device, &sessionCount, sessionInfo);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &sessionCount, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, sessionInfo,
                sessionCount * sizeof(nvmlFBCSessionInfo_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)sessionInfo);
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetVbiosVersion(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int length;
  char *version;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &length, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  version = (char *)malloc(length * sizeof(char));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = nvmlDeviceGetVbiosVersion(device, version, length);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, version, length * sizeof(char)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)version);
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetBridgeChipInfo(conn_t *conn) {
  nvmlDevice_t device;
  nvmlBridgeChipHierarchy_t bridgeHierarchy;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetBridgeChipInfo(device, &bridgeHierarchy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &bridgeHierarchy, sizeof(nvmlBridgeChipHierarchy_t)) <
          0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetComputeRunningProcesses_v3(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int infoCount;
  nvmlProcessInfo_t *infos;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &infoCount, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  infos = (nvmlProcessInfo_t *)malloc(infoCount * sizeof(nvmlProcessInfo_t));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result =
      nvmlDeviceGetComputeRunningProcesses_v3(device, &infoCount, infos);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &infoCount, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, infos, infoCount * sizeof(nvmlProcessInfo_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)infos);
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetGraphicsRunningProcesses_v3(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int infoCount;
  nvmlProcessInfo_t *infos;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &infoCount, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  infos = (nvmlProcessInfo_t *)malloc(infoCount * sizeof(nvmlProcessInfo_t));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result =
      nvmlDeviceGetGraphicsRunningProcesses_v3(device, &infoCount, infos);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &infoCount, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, infos, infoCount * sizeof(nvmlProcessInfo_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)infos);
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetMPSComputeRunningProcesses_v3(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int infoCount;
  nvmlProcessInfo_t *infos;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &infoCount, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  infos = (nvmlProcessInfo_t *)malloc(infoCount * sizeof(nvmlProcessInfo_t));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result =
      nvmlDeviceGetMPSComputeRunningProcesses_v3(device, &infoCount, infos);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &infoCount, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, infos, infoCount * sizeof(nvmlProcessInfo_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)infos);
ERROR_0:
  return -1;
}

int handle_nvmlDeviceOnSameBoard(conn_t *conn) {
  nvmlDevice_t device1;
  nvmlDevice_t device2;
  int onSameBoard;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device1, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &device2, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceOnSameBoard(device1, device2, &onSameBoard);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &onSameBoard, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetAPIRestriction(conn_t *conn) {
  nvmlDevice_t device;
  nvmlRestrictedAPI_t apiType;
  nvmlEnableState_t isRestricted;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &apiType, sizeof(nvmlRestrictedAPI_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetAPIRestriction(device, apiType, &isRestricted);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &isRestricted, sizeof(nvmlEnableState_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetSamples(conn_t *conn) {
  nvmlDevice_t device;
  nvmlSamplingType_t type;
  unsigned long long lastSeenTimeStamp;
  nvmlValueType_t sampleValType;
  unsigned int sampleCount;
  nvmlSample_t *samples;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &type, sizeof(nvmlSamplingType_t)) < 0 ||
      rpc_read(conn, &lastSeenTimeStamp, sizeof(unsigned long long)) < 0 ||
      rpc_read(conn, &sampleCount, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  samples = (nvmlSample_t *)malloc(sampleCount * sizeof(nvmlSample_t));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = nvmlDeviceGetSamples(
      device, type, lastSeenTimeStamp, &sampleValType, &sampleCount, samples);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &sampleValType, sizeof(nvmlValueType_t)) < 0 ||
      rpc_write(conn, &sampleCount, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, samples, sampleCount * sizeof(nvmlSample_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)samples);
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetBAR1MemoryInfo(conn_t *conn) {
  nvmlDevice_t device;
  nvmlBAR1Memory_t bar1Memory;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetBAR1MemoryInfo(device, &bar1Memory);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &bar1Memory, sizeof(nvmlBAR1Memory_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetViolationStatus(conn_t *conn) {
  nvmlDevice_t device;
  nvmlPerfPolicyType_t perfPolicyType;
  nvmlViolationTime_t violTime;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &perfPolicyType, sizeof(nvmlPerfPolicyType_t)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetViolationStatus(device, perfPolicyType, &violTime);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &violTime, sizeof(nvmlViolationTime_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetIrqNum(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int irqNum;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetIrqNum(device, &irqNum);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &irqNum, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetNumGpuCores(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int numCores;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetNumGpuCores(device, &numCores);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &numCores, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetPowerSource(conn_t *conn) {
  nvmlDevice_t device;
  nvmlPowerSource_t powerSource;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetPowerSource(device, &powerSource);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &powerSource, sizeof(nvmlPowerSource_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetMemoryBusWidth(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int busWidth;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetMemoryBusWidth(device, &busWidth);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &busWidth, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetPcieLinkMaxSpeed(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int maxSpeed;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetPcieLinkMaxSpeed(device, &maxSpeed);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &maxSpeed, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetPcieSpeed(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int pcieSpeed;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetPcieSpeed(device, &pcieSpeed);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pcieSpeed, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetAdaptiveClockInfoStatus(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int adaptiveClockStatus;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetAdaptiveClockInfoStatus(device, &adaptiveClockStatus);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &adaptiveClockStatus, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetAccountingMode(conn_t *conn) {
  nvmlDevice_t device;
  nvmlEnableState_t mode;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetAccountingMode(device, &mode);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &mode, sizeof(nvmlEnableState_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetAccountingStats(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int pid;
  nvmlAccountingStats_t stats;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &pid, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetAccountingStats(device, pid, &stats);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &stats, sizeof(nvmlAccountingStats_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetAccountingPids(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int count;
  unsigned int *pids;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &count, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  pids = (unsigned int *)malloc(count * sizeof(unsigned int));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = nvmlDeviceGetAccountingPids(device, &count, pids);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &count, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, pids, count * sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)pids);
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetAccountingBufferSize(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int bufferSize;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetAccountingBufferSize(device, &bufferSize);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &bufferSize, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetRetiredPages(conn_t *conn) {
  nvmlDevice_t device;
  nvmlPageRetirementCause_t cause;
  unsigned int pageCount;
  unsigned long long *addresses;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &cause, sizeof(nvmlPageRetirementCause_t)) < 0 ||
      rpc_read(conn, &pageCount, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  addresses =
      (unsigned long long *)malloc(pageCount * sizeof(unsigned long long));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result =
      nvmlDeviceGetRetiredPages(device, cause, &pageCount, addresses);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pageCount, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, addresses, pageCount * sizeof(unsigned long long)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)addresses);
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetRetiredPages_v2(conn_t *conn) {
  nvmlDevice_t device;
  nvmlPageRetirementCause_t cause;
  unsigned int pageCount;
  unsigned long long *addresses;
  unsigned long long *timestamps;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &cause, sizeof(nvmlPageRetirementCause_t)) < 0 ||
      rpc_read(conn, &pageCount, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  addresses =
      (unsigned long long *)malloc(pageCount * sizeof(unsigned long long));
  if (false)
    goto ERROR_1;
  timestamps =
      (unsigned long long *)malloc(pageCount * sizeof(unsigned long long));
  if (false)
    goto ERROR_2;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_2;
  scuda_intercept_result = nvmlDeviceGetRetiredPages_v2(
      device, cause, &pageCount, addresses, timestamps);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pageCount, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, addresses, pageCount * sizeof(unsigned long long)) < 0 ||
      rpc_write(conn, timestamps, pageCount * sizeof(unsigned long long)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_2;

  return 0;
ERROR_2:
  free((void *)addresses);
ERROR_1:
  free((void *)timestamps);
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetRetiredPagesPendingStatus(conn_t *conn) {
  nvmlDevice_t device;
  nvmlEnableState_t isPending;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetRetiredPagesPendingStatus(device, &isPending);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &isPending, sizeof(nvmlEnableState_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetRemappedRows(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int corrRows;
  unsigned int uncRows;
  unsigned int isPending;
  unsigned int failureOccurred;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetRemappedRows(
      device, &corrRows, &uncRows, &isPending, &failureOccurred);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &corrRows, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &uncRows, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &isPending, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &failureOccurred, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetRowRemapperHistogram(conn_t *conn) {
  nvmlDevice_t device;
  nvmlRowRemapperHistogramValues_t values;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetRowRemapperHistogram(device, &values);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &values, sizeof(nvmlRowRemapperHistogramValues_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetArchitecture(conn_t *conn) {
  nvmlDevice_t device;
  nvmlDeviceArchitecture_t arch;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetArchitecture(device, &arch);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &arch, sizeof(nvmlDeviceArchitecture_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlUnitSetLedState(conn_t *conn) {
  nvmlUnit_t unit;
  nvmlLedColor_t color;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &unit, sizeof(nvmlUnit_t)) < 0 ||
      rpc_read(conn, &color, sizeof(nvmlLedColor_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlUnitSetLedState(unit, color);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceSetPersistenceMode(conn_t *conn) {
  nvmlDevice_t device;
  nvmlEnableState_t mode;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &mode, sizeof(nvmlEnableState_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceSetPersistenceMode(device, mode);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceSetComputeMode(conn_t *conn) {
  nvmlDevice_t device;
  nvmlComputeMode_t mode;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &mode, sizeof(nvmlComputeMode_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceSetComputeMode(device, mode);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceSetEccMode(conn_t *conn) {
  nvmlDevice_t device;
  nvmlEnableState_t ecc;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &ecc, sizeof(nvmlEnableState_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceSetEccMode(device, ecc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceClearEccErrorCounts(conn_t *conn) {
  nvmlDevice_t device;
  nvmlEccCounterType_t counterType;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &counterType, sizeof(nvmlEccCounterType_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceClearEccErrorCounts(device, counterType);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceSetDriverModel(conn_t *conn) {
  nvmlDevice_t device;
  nvmlDriverModel_t driverModel;
  unsigned int flags;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &driverModel, sizeof(nvmlDriverModel_t)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceSetDriverModel(device, driverModel, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceSetGpuLockedClocks(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int minGpuClockMHz;
  unsigned int maxGpuClockMHz;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &minGpuClockMHz, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &maxGpuClockMHz, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceSetGpuLockedClocks(device, minGpuClockMHz, maxGpuClockMHz);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceResetGpuLockedClocks(conn_t *conn) {
  nvmlDevice_t device;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceResetGpuLockedClocks(device);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceSetMemoryLockedClocks(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int minMemClockMHz;
  unsigned int maxMemClockMHz;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &minMemClockMHz, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &maxMemClockMHz, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceSetMemoryLockedClocks(device, minMemClockMHz, maxMemClockMHz);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceResetMemoryLockedClocks(conn_t *conn) {
  nvmlDevice_t device;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceResetMemoryLockedClocks(device);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceSetApplicationsClocks(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int memClockMHz;
  unsigned int graphicsClockMHz;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &memClockMHz, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &graphicsClockMHz, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceSetApplicationsClocks(device, memClockMHz, graphicsClockMHz);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetClkMonStatus(conn_t *conn) {
  nvmlDevice_t device;
  nvmlClkMonStatus_t status;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetClkMonStatus(device, &status);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &status, sizeof(nvmlClkMonStatus_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceSetPowerManagementLimit(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int limit;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &limit, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceSetPowerManagementLimit(device, limit);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceSetGpuOperationMode(conn_t *conn) {
  nvmlDevice_t device;
  nvmlGpuOperationMode_t mode;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &mode, sizeof(nvmlGpuOperationMode_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceSetGpuOperationMode(device, mode);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceSetAPIRestriction(conn_t *conn) {
  nvmlDevice_t device;
  nvmlRestrictedAPI_t apiType;
  nvmlEnableState_t isRestricted;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &apiType, sizeof(nvmlRestrictedAPI_t)) < 0 ||
      rpc_read(conn, &isRestricted, sizeof(nvmlEnableState_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceSetAPIRestriction(device, apiType, isRestricted);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceSetAccountingMode(conn_t *conn) {
  nvmlDevice_t device;
  nvmlEnableState_t mode;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &mode, sizeof(nvmlEnableState_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceSetAccountingMode(device, mode);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceClearAccountingPids(conn_t *conn) {
  nvmlDevice_t device;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceClearAccountingPids(device);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetNvLinkState(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int link;
  nvmlEnableState_t isActive;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &link, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetNvLinkState(device, link, &isActive);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &isActive, sizeof(nvmlEnableState_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetNvLinkVersion(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int link;
  unsigned int version;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &link, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetNvLinkVersion(device, link, &version);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &version, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetNvLinkCapability(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int link;
  nvmlNvLinkCapability_t capability;
  unsigned int capResult;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &link, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &capability, sizeof(nvmlNvLinkCapability_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetNvLinkCapability(device, link, capability, &capResult);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &capResult, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetNvLinkRemotePciInfo_v2(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int link;
  nvmlPciInfo_t pci;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &link, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetNvLinkRemotePciInfo_v2(device, link, &pci);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pci, sizeof(nvmlPciInfo_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetNvLinkErrorCounter(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int link;
  nvmlNvLinkErrorCounter_t counter;
  unsigned long long counterValue;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &link, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &counter, sizeof(nvmlNvLinkErrorCounter_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetNvLinkErrorCounter(device, link, counter, &counterValue);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &counterValue, sizeof(unsigned long long)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceResetNvLinkErrorCounters(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int link;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &link, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceResetNvLinkErrorCounters(device, link);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceSetNvLinkUtilizationControl(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int link;
  unsigned int counter;
  nvmlNvLinkUtilizationControl_t *control;
  unsigned int reset;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &link, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &counter, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &control, sizeof(nvmlNvLinkUtilizationControl_t *)) < 0 ||
      rpc_read(conn, &reset, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceSetNvLinkUtilizationControl(
      device, link, counter, control, reset);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetNvLinkUtilizationControl(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int link;
  unsigned int counter;
  nvmlNvLinkUtilizationControl_t control;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &link, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &counter, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetNvLinkUtilizationControl(device, link, counter, &control);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &control, sizeof(nvmlNvLinkUtilizationControl_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetNvLinkUtilizationCounter(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int link;
  unsigned int counter;
  unsigned long long rxcounter;
  unsigned long long txcounter;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &link, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &counter, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetNvLinkUtilizationCounter(
      device, link, counter, &rxcounter, &txcounter);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &rxcounter, sizeof(unsigned long long)) < 0 ||
      rpc_write(conn, &txcounter, sizeof(unsigned long long)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceFreezeNvLinkUtilizationCounter(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int link;
  unsigned int counter;
  nvmlEnableState_t freeze;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &link, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &counter, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &freeze, sizeof(nvmlEnableState_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceFreezeNvLinkUtilizationCounter(device, link, counter, freeze);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceResetNvLinkUtilizationCounter(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int link;
  unsigned int counter;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &link, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &counter, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceResetNvLinkUtilizationCounter(device, link, counter);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetNvLinkRemoteDeviceType(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int link;
  nvmlIntNvLinkDeviceType_t pNvLinkDeviceType;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &link, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetNvLinkRemoteDeviceType(device, link, &pNvLinkDeviceType);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pNvLinkDeviceType, sizeof(nvmlIntNvLinkDeviceType_t)) <
          0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlEventSetCreate(conn_t *conn) {
  nvmlEventSet_t set;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlEventSetCreate(&set);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &set, sizeof(nvmlEventSet_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceRegisterEvents(conn_t *conn) {
  nvmlDevice_t device;
  unsigned long long eventTypes;
  nvmlEventSet_t set;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &eventTypes, sizeof(unsigned long long)) < 0 ||
      rpc_read(conn, &set, sizeof(nvmlEventSet_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceRegisterEvents(device, eventTypes, set);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetSupportedEventTypes(conn_t *conn) {
  nvmlDevice_t device;
  unsigned long long eventTypes;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetSupportedEventTypes(device, &eventTypes);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &eventTypes, sizeof(unsigned long long)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlEventSetWait_v2(conn_t *conn) {
  nvmlEventSet_t set;
  nvmlEventData_t data;
  unsigned int timeoutms;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &set, sizeof(nvmlEventSet_t)) < 0 ||
      rpc_read(conn, &timeoutms, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlEventSetWait_v2(set, &data, timeoutms);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &data, sizeof(nvmlEventData_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlEventSetFree(conn_t *conn) {
  nvmlEventSet_t set;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &set, sizeof(nvmlEventSet_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlEventSetFree(set);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceModifyDrainState(conn_t *conn) {
  nvmlPciInfo_t pciInfo;
  nvmlEnableState_t newState;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &pciInfo, sizeof(nvmlPciInfo_t)) < 0 ||
      rpc_read(conn, &newState, sizeof(nvmlEnableState_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceModifyDrainState(&pciInfo, newState);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pciInfo, sizeof(nvmlPciInfo_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceQueryDrainState(conn_t *conn) {
  nvmlPciInfo_t pciInfo;
  nvmlEnableState_t currentState;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &pciInfo, sizeof(nvmlPciInfo_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceQueryDrainState(&pciInfo, &currentState);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pciInfo, sizeof(nvmlPciInfo_t)) < 0 ||
      rpc_write(conn, &currentState, sizeof(nvmlEnableState_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceRemoveGpu_v2(conn_t *conn) {
  nvmlPciInfo_t pciInfo;
  nvmlDetachGpuState_t gpuState;
  nvmlPcieLinkState_t linkState;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &pciInfo, sizeof(nvmlPciInfo_t)) < 0 ||
      rpc_read(conn, &gpuState, sizeof(nvmlDetachGpuState_t)) < 0 ||
      rpc_read(conn, &linkState, sizeof(nvmlPcieLinkState_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceRemoveGpu_v2(&pciInfo, gpuState, linkState);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pciInfo, sizeof(nvmlPciInfo_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceDiscoverGpus(conn_t *conn) {
  nvmlPciInfo_t pciInfo;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &pciInfo, sizeof(nvmlPciInfo_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceDiscoverGpus(&pciInfo);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pciInfo, sizeof(nvmlPciInfo_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetFieldValues(conn_t *conn) {
  nvmlDevice_t device;
  int valuesCount;
  nvmlFieldValue_t *values;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &valuesCount, sizeof(int)) < 0 || false)
    goto ERROR_0;
  values = (nvmlFieldValue_t *)malloc(valuesCount * sizeof(nvmlFieldValue_t));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result =
      nvmlDeviceGetFieldValues(device, valuesCount, values);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, values, valuesCount * sizeof(nvmlFieldValue_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)values);
ERROR_0:
  return -1;
}

int handle_nvmlDeviceClearFieldValues(conn_t *conn) {
  nvmlDevice_t device;
  int valuesCount;
  nvmlFieldValue_t *values;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &valuesCount, sizeof(int)) < 0 || false)
    goto ERROR_0;
  values = (nvmlFieldValue_t *)malloc(valuesCount * sizeof(nvmlFieldValue_t));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result =
      nvmlDeviceClearFieldValues(device, valuesCount, values);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, values, valuesCount * sizeof(nvmlFieldValue_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)values);
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetVirtualizationMode(conn_t *conn) {
  nvmlDevice_t device;
  nvmlGpuVirtualizationMode_t pVirtualMode;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetVirtualizationMode(device, &pVirtualMode);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pVirtualMode, sizeof(nvmlGpuVirtualizationMode_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetHostVgpuMode(conn_t *conn) {
  nvmlDevice_t device;
  nvmlHostVgpuMode_t pHostVgpuMode;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetHostVgpuMode(device, &pHostVgpuMode);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pHostVgpuMode, sizeof(nvmlHostVgpuMode_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceSetVirtualizationMode(conn_t *conn) {
  nvmlDevice_t device;
  nvmlGpuVirtualizationMode_t virtualMode;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &virtualMode, sizeof(nvmlGpuVirtualizationMode_t)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceSetVirtualizationMode(device, virtualMode);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetGridLicensableFeatures_v4(conn_t *conn) {
  nvmlDevice_t device;
  nvmlGridLicensableFeatures_t pGridLicensableFeatures;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetGridLicensableFeatures_v4(device, &pGridLicensableFeatures);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pGridLicensableFeatures,
                sizeof(nvmlGridLicensableFeatures_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetProcessUtilization(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int processSamplesCount;
  nvmlProcessUtilizationSample_t *utilization;
  unsigned long long lastSeenTimeStamp;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &processSamplesCount, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  utilization = (nvmlProcessUtilizationSample_t *)malloc(
      processSamplesCount * sizeof(nvmlProcessUtilizationSample_t));
  if (rpc_read(conn, &lastSeenTimeStamp, sizeof(unsigned long long)) < 0 ||
      false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = nvmlDeviceGetProcessUtilization(
      device, utilization, &processSamplesCount, lastSeenTimeStamp);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &processSamplesCount, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, utilization,
                processSamplesCount * sizeof(nvmlProcessUtilizationSample_t)) <
          0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)utilization);
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetGspFirmwareVersion(conn_t *conn) {
  nvmlDevice_t device;
  char version;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetGspFirmwareVersion(device, &version);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &version, sizeof(char)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetGspFirmwareMode(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int isEnabled;
  unsigned int defaultMode;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetGspFirmwareMode(device, &isEnabled, &defaultMode);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &isEnabled, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &defaultMode, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlGetVgpuDriverCapabilities(conn_t *conn) {
  nvmlVgpuDriverCapability_t capability;
  unsigned int capResult;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &capability, sizeof(nvmlVgpuDriverCapability_t)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlGetVgpuDriverCapabilities(capability, &capResult);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &capResult, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetVgpuCapabilities(conn_t *conn) {
  nvmlDevice_t device;
  nvmlDeviceVgpuCapability_t capability;
  unsigned int capResult;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &capability, sizeof(nvmlDeviceVgpuCapability_t)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetVgpuCapabilities(device, capability, &capResult);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &capResult, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetSupportedVgpus(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int vgpuCount;
  nvmlVgpuTypeId_t *vgpuTypeIds;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &vgpuCount, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  vgpuTypeIds =
      (nvmlVgpuTypeId_t *)malloc(vgpuCount * sizeof(nvmlVgpuTypeId_t));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result =
      nvmlDeviceGetSupportedVgpus(device, &vgpuCount, vgpuTypeIds);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &vgpuCount, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, vgpuTypeIds, vgpuCount * sizeof(nvmlVgpuTypeId_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)vgpuTypeIds);
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetCreatableVgpus(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int vgpuCount;
  nvmlVgpuTypeId_t *vgpuTypeIds;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &vgpuCount, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  vgpuTypeIds =
      (nvmlVgpuTypeId_t *)malloc(vgpuCount * sizeof(nvmlVgpuTypeId_t));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result =
      nvmlDeviceGetCreatableVgpus(device, &vgpuCount, vgpuTypeIds);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &vgpuCount, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, vgpuTypeIds, vgpuCount * sizeof(nvmlVgpuTypeId_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)vgpuTypeIds);
ERROR_0:
  return -1;
}

int handle_nvmlVgpuTypeGetClass(conn_t *conn) {
  nvmlVgpuTypeId_t vgpuTypeId;
  unsigned int size;
  char *vgpuTypeClass;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &vgpuTypeId, sizeof(nvmlVgpuTypeId_t)) < 0 || false)
    goto ERROR_0;
  vgpuTypeClass = (char *)malloc(size * sizeof(char));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result =
      nvmlVgpuTypeGetClass(vgpuTypeId, vgpuTypeClass, &size);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &size, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, vgpuTypeClass, size * sizeof(char)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)vgpuTypeClass);
ERROR_0:
  return -1;
}

int handle_nvmlVgpuTypeGetName(conn_t *conn) {
  nvmlVgpuTypeId_t vgpuTypeId;
  unsigned int size;
  char *vgpuTypeName;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &vgpuTypeId, sizeof(nvmlVgpuTypeId_t)) < 0 ||
      rpc_read(conn, &size, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  vgpuTypeName = (char *)malloc(size * sizeof(char));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = nvmlVgpuTypeGetName(vgpuTypeId, vgpuTypeName, &size);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &size, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, vgpuTypeName, size * sizeof(char)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)vgpuTypeName);
ERROR_0:
  return -1;
}

int handle_nvmlVgpuTypeGetGpuInstanceProfileId(conn_t *conn) {
  nvmlVgpuTypeId_t vgpuTypeId;
  unsigned int gpuInstanceProfileId;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &vgpuTypeId, sizeof(nvmlVgpuTypeId_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlVgpuTypeGetGpuInstanceProfileId(vgpuTypeId, &gpuInstanceProfileId);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &gpuInstanceProfileId, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlVgpuTypeGetDeviceID(conn_t *conn) {
  nvmlVgpuTypeId_t vgpuTypeId;
  unsigned long long deviceID;
  unsigned long long subsystemID;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &vgpuTypeId, sizeof(nvmlVgpuTypeId_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlVgpuTypeGetDeviceID(vgpuTypeId, &deviceID, &subsystemID);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &deviceID, sizeof(unsigned long long)) < 0 ||
      rpc_write(conn, &subsystemID, sizeof(unsigned long long)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlVgpuTypeGetFramebufferSize(conn_t *conn) {
  nvmlVgpuTypeId_t vgpuTypeId;
  unsigned long long fbSize;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &vgpuTypeId, sizeof(nvmlVgpuTypeId_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlVgpuTypeGetFramebufferSize(vgpuTypeId, &fbSize);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &fbSize, sizeof(unsigned long long)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlVgpuTypeGetNumDisplayHeads(conn_t *conn) {
  nvmlVgpuTypeId_t vgpuTypeId;
  unsigned int numDisplayHeads;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &vgpuTypeId, sizeof(nvmlVgpuTypeId_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlVgpuTypeGetNumDisplayHeads(vgpuTypeId, &numDisplayHeads);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &numDisplayHeads, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlVgpuTypeGetResolution(conn_t *conn) {
  nvmlVgpuTypeId_t vgpuTypeId;
  unsigned int displayIndex;
  unsigned int xdim;
  unsigned int ydim;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &vgpuTypeId, sizeof(nvmlVgpuTypeId_t)) < 0 ||
      rpc_read(conn, &displayIndex, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlVgpuTypeGetResolution(vgpuTypeId, displayIndex, &xdim, &ydim);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &xdim, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &ydim, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlVgpuTypeGetLicense(conn_t *conn) {
  nvmlVgpuTypeId_t vgpuTypeId;
  unsigned int size;
  char *vgpuTypeLicenseString;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &vgpuTypeId, sizeof(nvmlVgpuTypeId_t)) < 0 ||
      rpc_read(conn, &size, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  vgpuTypeLicenseString = (char *)malloc(size * sizeof(char));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result =
      nvmlVgpuTypeGetLicense(vgpuTypeId, vgpuTypeLicenseString, size);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, vgpuTypeLicenseString, size * sizeof(char)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)vgpuTypeLicenseString);
ERROR_0:
  return -1;
}

int handle_nvmlVgpuTypeGetFrameRateLimit(conn_t *conn) {
  nvmlVgpuTypeId_t vgpuTypeId;
  unsigned int frameRateLimit;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &vgpuTypeId, sizeof(nvmlVgpuTypeId_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlVgpuTypeGetFrameRateLimit(vgpuTypeId, &frameRateLimit);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &frameRateLimit, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlVgpuTypeGetMaxInstances(conn_t *conn) {
  nvmlDevice_t device;
  nvmlVgpuTypeId_t vgpuTypeId;
  unsigned int vgpuInstanceCount;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &vgpuTypeId, sizeof(nvmlVgpuTypeId_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlVgpuTypeGetMaxInstances(device, vgpuTypeId, &vgpuInstanceCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &vgpuInstanceCount, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlVgpuTypeGetMaxInstancesPerVm(conn_t *conn) {
  nvmlVgpuTypeId_t vgpuTypeId;
  unsigned int vgpuInstanceCountPerVm;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &vgpuTypeId, sizeof(nvmlVgpuTypeId_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlVgpuTypeGetMaxInstancesPerVm(vgpuTypeId, &vgpuInstanceCountPerVm);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &vgpuInstanceCountPerVm, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetActiveVgpus(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int vgpuCount;
  nvmlVgpuInstance_t *vgpuInstances;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &vgpuCount, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  vgpuInstances =
      (nvmlVgpuInstance_t *)malloc(vgpuCount * sizeof(nvmlVgpuInstance_t));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result =
      nvmlDeviceGetActiveVgpus(device, &vgpuCount, vgpuInstances);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &vgpuCount, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, vgpuInstances, vgpuCount * sizeof(nvmlVgpuInstance_t)) <
          0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)vgpuInstances);
ERROR_0:
  return -1;
}

int handle_nvmlVgpuInstanceGetVmID(conn_t *conn) {
  nvmlVgpuInstance_t vgpuInstance;
  unsigned int size;
  char *vmId;
  nvmlVgpuVmIdType_t vmIdType;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &vgpuInstance, sizeof(nvmlVgpuInstance_t)) < 0 ||
      rpc_read(conn, &size, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  vmId = (char *)malloc(size * sizeof(char));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result =
      nvmlVgpuInstanceGetVmID(vgpuInstance, vmId, size, &vmIdType);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, vmId, size * sizeof(char)) < 0 ||
      rpc_write(conn, &vmIdType, sizeof(nvmlVgpuVmIdType_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)vmId);
ERROR_0:
  return -1;
}

int handle_nvmlVgpuInstanceGetUUID(conn_t *conn) {
  nvmlVgpuInstance_t vgpuInstance;
  unsigned int size;
  char *uuid;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &vgpuInstance, sizeof(nvmlVgpuInstance_t)) < 0 ||
      rpc_read(conn, &size, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  uuid = (char *)malloc(size * sizeof(char));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = nvmlVgpuInstanceGetUUID(vgpuInstance, uuid, size);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, uuid, size * sizeof(char)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)uuid);
ERROR_0:
  return -1;
}

int handle_nvmlVgpuInstanceGetVmDriverVersion(conn_t *conn) {
  nvmlVgpuInstance_t vgpuInstance;
  unsigned int length;
  char *version;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &vgpuInstance, sizeof(nvmlVgpuInstance_t)) < 0 ||
      rpc_read(conn, &length, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  version = (char *)malloc(length * sizeof(char));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result =
      nvmlVgpuInstanceGetVmDriverVersion(vgpuInstance, version, length);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, version, length * sizeof(char)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)version);
ERROR_0:
  return -1;
}

int handle_nvmlVgpuInstanceGetFbUsage(conn_t *conn) {
  nvmlVgpuInstance_t vgpuInstance;
  unsigned long long fbUsage;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &vgpuInstance, sizeof(nvmlVgpuInstance_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlVgpuInstanceGetFbUsage(vgpuInstance, &fbUsage);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &fbUsage, sizeof(unsigned long long)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlVgpuInstanceGetLicenseStatus(conn_t *conn) {
  nvmlVgpuInstance_t vgpuInstance;
  unsigned int licensed;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &vgpuInstance, sizeof(nvmlVgpuInstance_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlVgpuInstanceGetLicenseStatus(vgpuInstance, &licensed);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &licensed, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlVgpuInstanceGetType(conn_t *conn) {
  nvmlVgpuInstance_t vgpuInstance;
  nvmlVgpuTypeId_t vgpuTypeId;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &vgpuInstance, sizeof(nvmlVgpuInstance_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlVgpuInstanceGetType(vgpuInstance, &vgpuTypeId);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &vgpuTypeId, sizeof(nvmlVgpuTypeId_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlVgpuInstanceGetFrameRateLimit(conn_t *conn) {
  nvmlVgpuInstance_t vgpuInstance;
  unsigned int frameRateLimit;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &vgpuInstance, sizeof(nvmlVgpuInstance_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlVgpuInstanceGetFrameRateLimit(vgpuInstance, &frameRateLimit);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &frameRateLimit, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlVgpuInstanceGetEccMode(conn_t *conn) {
  nvmlVgpuInstance_t vgpuInstance;
  nvmlEnableState_t eccMode;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &vgpuInstance, sizeof(nvmlVgpuInstance_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlVgpuInstanceGetEccMode(vgpuInstance, &eccMode);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &eccMode, sizeof(nvmlEnableState_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlVgpuInstanceGetEncoderCapacity(conn_t *conn) {
  nvmlVgpuInstance_t vgpuInstance;
  unsigned int encoderCapacity;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &vgpuInstance, sizeof(nvmlVgpuInstance_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlVgpuInstanceGetEncoderCapacity(vgpuInstance, &encoderCapacity);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &encoderCapacity, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlVgpuInstanceSetEncoderCapacity(conn_t *conn) {
  nvmlVgpuInstance_t vgpuInstance;
  unsigned int encoderCapacity;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &vgpuInstance, sizeof(nvmlVgpuInstance_t)) < 0 ||
      rpc_read(conn, &encoderCapacity, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlVgpuInstanceSetEncoderCapacity(vgpuInstance, encoderCapacity);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlVgpuInstanceGetEncoderStats(conn_t *conn) {
  nvmlVgpuInstance_t vgpuInstance;
  unsigned int sessionCount;
  unsigned int averageFps;
  unsigned int averageLatency;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &vgpuInstance, sizeof(nvmlVgpuInstance_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlVgpuInstanceGetEncoderStats(
      vgpuInstance, &sessionCount, &averageFps, &averageLatency);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &sessionCount, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &averageFps, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &averageLatency, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlVgpuInstanceGetEncoderSessions(conn_t *conn) {
  nvmlVgpuInstance_t vgpuInstance;
  unsigned int sessionCount;
  nvmlEncoderSessionInfo_t *sessionInfo;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &vgpuInstance, sizeof(nvmlVgpuInstance_t)) < 0 ||
      rpc_read(conn, &sessionCount, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  sessionInfo = (nvmlEncoderSessionInfo_t *)malloc(
      sessionCount * sizeof(nvmlEncoderSessionInfo_t));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = nvmlVgpuInstanceGetEncoderSessions(
      vgpuInstance, &sessionCount, sessionInfo);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &sessionCount, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, sessionInfo,
                sessionCount * sizeof(nvmlEncoderSessionInfo_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)sessionInfo);
ERROR_0:
  return -1;
}

int handle_nvmlVgpuInstanceGetFBCStats(conn_t *conn) {
  nvmlVgpuInstance_t vgpuInstance;
  nvmlFBCStats_t fbcStats;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &vgpuInstance, sizeof(nvmlVgpuInstance_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlVgpuInstanceGetFBCStats(vgpuInstance, &fbcStats);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &fbcStats, sizeof(nvmlFBCStats_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlVgpuInstanceGetFBCSessions(conn_t *conn) {
  nvmlVgpuInstance_t vgpuInstance;
  unsigned int sessionCount;
  nvmlFBCSessionInfo_t *sessionInfo;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &vgpuInstance, sizeof(nvmlVgpuInstance_t)) < 0 ||
      rpc_read(conn, &sessionCount, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  sessionInfo = (nvmlFBCSessionInfo_t *)malloc(sessionCount *
                                               sizeof(nvmlFBCSessionInfo_t));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result =
      nvmlVgpuInstanceGetFBCSessions(vgpuInstance, &sessionCount, sessionInfo);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &sessionCount, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, sessionInfo,
                sessionCount * sizeof(nvmlFBCSessionInfo_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)sessionInfo);
ERROR_0:
  return -1;
}

int handle_nvmlVgpuInstanceGetGpuInstanceId(conn_t *conn) {
  nvmlVgpuInstance_t vgpuInstance;
  unsigned int gpuInstanceId;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &vgpuInstance, sizeof(nvmlVgpuInstance_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlVgpuInstanceGetGpuInstanceId(vgpuInstance, &gpuInstanceId);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &gpuInstanceId, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlVgpuInstanceGetGpuPciId(conn_t *conn) {
  nvmlVgpuInstance_t vgpuInstance;
  unsigned int length;
  char *vgpuPciId;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &vgpuInstance, sizeof(nvmlVgpuInstance_t)) < 0 ||
      rpc_read(conn, &length, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  vgpuPciId = (char *)malloc(length * sizeof(char));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result =
      nvmlVgpuInstanceGetGpuPciId(vgpuInstance, vgpuPciId, &length);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &length, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, vgpuPciId, length * sizeof(char)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)vgpuPciId);
ERROR_0:
  return -1;
}

int handle_nvmlVgpuTypeGetCapabilities(conn_t *conn) {
  nvmlVgpuTypeId_t vgpuTypeId;
  nvmlVgpuCapability_t capability;
  unsigned int capResult;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &vgpuTypeId, sizeof(nvmlVgpuTypeId_t)) < 0 ||
      rpc_read(conn, &capability, sizeof(nvmlVgpuCapability_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlVgpuTypeGetCapabilities(vgpuTypeId, capability, &capResult);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &capResult, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlVgpuInstanceGetMetadata(conn_t *conn) {
  nvmlVgpuInstance_t vgpuInstance;
  unsigned int bufferSize;
  nvmlVgpuMetadata_t *vgpuMetadata;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &vgpuInstance, sizeof(nvmlVgpuInstance_t)) < 0 ||
      rpc_read(conn, &bufferSize, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  vgpuMetadata =
      (nvmlVgpuMetadata_t *)malloc(bufferSize * sizeof(nvmlVgpuMetadata_t));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result =
      nvmlVgpuInstanceGetMetadata(vgpuInstance, vgpuMetadata, &bufferSize);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &bufferSize, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, vgpuMetadata, bufferSize * sizeof(nvmlVgpuMetadata_t)) <
          0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)vgpuMetadata);
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetVgpuMetadata(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int bufferSize;
  nvmlVgpuPgpuMetadata_t *pgpuMetadata;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &bufferSize, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  pgpuMetadata = (nvmlVgpuPgpuMetadata_t *)malloc(
      bufferSize * sizeof(nvmlVgpuPgpuMetadata_t));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result =
      nvmlDeviceGetVgpuMetadata(device, pgpuMetadata, &bufferSize);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &bufferSize, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, pgpuMetadata,
                bufferSize * sizeof(nvmlVgpuPgpuMetadata_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)pgpuMetadata);
ERROR_0:
  return -1;
}

int handle_nvmlGetVgpuCompatibility(conn_t *conn) {
  nvmlVgpuMetadata_t vgpuMetadata;
  nvmlVgpuPgpuMetadata_t pgpuMetadata;
  nvmlVgpuPgpuCompatibility_t compatibilityInfo;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &vgpuMetadata, sizeof(nvmlVgpuMetadata_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlGetVgpuCompatibility(
      &vgpuMetadata, &pgpuMetadata, &compatibilityInfo);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &vgpuMetadata, sizeof(nvmlVgpuMetadata_t)) < 0 ||
      rpc_write(conn, &pgpuMetadata, sizeof(nvmlVgpuPgpuMetadata_t)) < 0 ||
      rpc_write(conn, &compatibilityInfo, sizeof(nvmlVgpuPgpuCompatibility_t)) <
          0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetPgpuMetadataString(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int bufferSize;
  char *pgpuMetadata;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &bufferSize, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  pgpuMetadata = (char *)malloc(bufferSize * sizeof(char));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result =
      nvmlDeviceGetPgpuMetadataString(device, pgpuMetadata, &bufferSize);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &bufferSize, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, pgpuMetadata, bufferSize * sizeof(char)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)pgpuMetadata);
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetVgpuSchedulerLog(conn_t *conn) {
  nvmlDevice_t device;
  nvmlVgpuSchedulerLog_t pSchedulerLog;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetVgpuSchedulerLog(device, &pSchedulerLog);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pSchedulerLog, sizeof(nvmlVgpuSchedulerLog_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetVgpuSchedulerState(conn_t *conn) {
  nvmlDevice_t device;
  nvmlVgpuSchedulerGetState_t pSchedulerState;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetVgpuSchedulerState(device, &pSchedulerState);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pSchedulerState, sizeof(nvmlVgpuSchedulerGetState_t)) <
          0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetVgpuSchedulerCapabilities(conn_t *conn) {
  nvmlDevice_t device;
  nvmlVgpuSchedulerCapabilities_t pCapabilities;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetVgpuSchedulerCapabilities(device, &pCapabilities);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pCapabilities, sizeof(nvmlVgpuSchedulerCapabilities_t)) <
          0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlGetVgpuVersion(conn_t *conn) {
  nvmlVgpuVersion_t supported;
  nvmlVgpuVersion_t current;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlGetVgpuVersion(&supported, &current);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &supported, sizeof(nvmlVgpuVersion_t)) < 0 ||
      rpc_write(conn, &current, sizeof(nvmlVgpuVersion_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlSetVgpuVersion(conn_t *conn) {
  nvmlVgpuVersion_t vgpuVersion;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlSetVgpuVersion(&vgpuVersion);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &vgpuVersion, sizeof(nvmlVgpuVersion_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetVgpuUtilization(conn_t *conn) {
  nvmlDevice_t device;
  unsigned long long lastSeenTimeStamp;
  nvmlValueType_t sampleValType;
  unsigned int vgpuInstanceSamplesCount;
  nvmlVgpuInstanceUtilizationSample_t *utilizationSamples;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &lastSeenTimeStamp, sizeof(unsigned long long)) < 0 ||
      rpc_read(conn, &sampleValType, sizeof(nvmlValueType_t)) < 0 ||
      rpc_read(conn, &vgpuInstanceSamplesCount, sizeof(unsigned int)) < 0 ||
      false)
    goto ERROR_0;
  utilizationSamples = (nvmlVgpuInstanceUtilizationSample_t *)malloc(
      vgpuInstanceSamplesCount * sizeof(nvmlVgpuInstanceUtilizationSample_t));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = nvmlDeviceGetVgpuUtilization(
      device, lastSeenTimeStamp, &sampleValType, &vgpuInstanceSamplesCount,
      utilizationSamples);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &sampleValType, sizeof(nvmlValueType_t)) < 0 ||
      rpc_write(conn, &vgpuInstanceSamplesCount, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, utilizationSamples,
                vgpuInstanceSamplesCount *
                    sizeof(nvmlVgpuInstanceUtilizationSample_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)utilizationSamples);
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetVgpuProcessUtilization(conn_t *conn) {
  nvmlDevice_t device;
  unsigned long long lastSeenTimeStamp;
  unsigned int vgpuProcessSamplesCount;
  nvmlVgpuProcessUtilizationSample_t *utilizationSamples;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &lastSeenTimeStamp, sizeof(unsigned long long)) < 0 ||
      rpc_read(conn, &vgpuProcessSamplesCount, sizeof(unsigned int)) < 0 ||
      false)
    goto ERROR_0;
  utilizationSamples = (nvmlVgpuProcessUtilizationSample_t *)malloc(
      vgpuProcessSamplesCount * sizeof(nvmlVgpuProcessUtilizationSample_t));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = nvmlDeviceGetVgpuProcessUtilization(
      device, lastSeenTimeStamp, &vgpuProcessSamplesCount, utilizationSamples);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &vgpuProcessSamplesCount, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, utilizationSamples,
                vgpuProcessSamplesCount *
                    sizeof(nvmlVgpuProcessUtilizationSample_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)utilizationSamples);
ERROR_0:
  return -1;
}

int handle_nvmlVgpuInstanceGetAccountingMode(conn_t *conn) {
  nvmlVgpuInstance_t vgpuInstance;
  nvmlEnableState_t mode;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &vgpuInstance, sizeof(nvmlVgpuInstance_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlVgpuInstanceGetAccountingMode(vgpuInstance, &mode);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &mode, sizeof(nvmlEnableState_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlVgpuInstanceGetAccountingPids(conn_t *conn) {
  nvmlVgpuInstance_t vgpuInstance;
  unsigned int count;
  unsigned int *pids;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &vgpuInstance, sizeof(nvmlVgpuInstance_t)) < 0 ||
      rpc_read(conn, &count, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  pids = (unsigned int *)malloc(count * sizeof(unsigned int));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result =
      nvmlVgpuInstanceGetAccountingPids(vgpuInstance, &count, pids);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &count, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, pids, count * sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)pids);
ERROR_0:
  return -1;
}

int handle_nvmlVgpuInstanceGetAccountingStats(conn_t *conn) {
  nvmlVgpuInstance_t vgpuInstance;
  unsigned int pid;
  nvmlAccountingStats_t stats;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &vgpuInstance, sizeof(nvmlVgpuInstance_t)) < 0 ||
      rpc_read(conn, &pid, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlVgpuInstanceGetAccountingStats(vgpuInstance, pid, &stats);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &stats, sizeof(nvmlAccountingStats_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlVgpuInstanceClearAccountingPids(conn_t *conn) {
  nvmlVgpuInstance_t vgpuInstance;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &vgpuInstance, sizeof(nvmlVgpuInstance_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlVgpuInstanceClearAccountingPids(vgpuInstance);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlVgpuInstanceGetLicenseInfo_v2(conn_t *conn) {
  nvmlVgpuInstance_t vgpuInstance;
  nvmlVgpuLicenseInfo_t licenseInfo;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &vgpuInstance, sizeof(nvmlVgpuInstance_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlVgpuInstanceGetLicenseInfo_v2(vgpuInstance, &licenseInfo);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &licenseInfo, sizeof(nvmlVgpuLicenseInfo_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlGetExcludedDeviceCount(conn_t *conn) {
  unsigned int deviceCount;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlGetExcludedDeviceCount(&deviceCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &deviceCount, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlGetExcludedDeviceInfoByIndex(conn_t *conn) {
  unsigned int index;
  nvmlExcludedDeviceInfo_t info;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &index, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlGetExcludedDeviceInfoByIndex(index, &info);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &info, sizeof(nvmlExcludedDeviceInfo_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceSetMigMode(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int mode;
  nvmlReturn_t activationStatus;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &mode, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceSetMigMode(device, mode, &activationStatus);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &activationStatus, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetMigMode(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int currentMode;
  unsigned int pendingMode;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetMigMode(device, &currentMode, &pendingMode);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &currentMode, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &pendingMode, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetGpuInstanceProfileInfo(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int profile;
  nvmlGpuInstanceProfileInfo_t info;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &profile, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetGpuInstanceProfileInfo(device, profile, &info);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &info, sizeof(nvmlGpuInstanceProfileInfo_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetGpuInstanceProfileInfoV(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int profile;
  nvmlGpuInstanceProfileInfo_v2_t info;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &profile, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetGpuInstanceProfileInfoV(device, profile, &info);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &info, sizeof(nvmlGpuInstanceProfileInfo_v2_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetGpuInstancePossiblePlacements_v2(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int profileId;
  unsigned int count;
  nvmlGpuInstancePlacement_t *placements;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &profileId, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &count, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  placements = (nvmlGpuInstancePlacement_t *)malloc(
      count * sizeof(nvmlGpuInstancePlacement_t));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = nvmlDeviceGetGpuInstancePossiblePlacements_v2(
      device, profileId, placements, &count);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &count, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, placements, count * sizeof(nvmlGpuInstancePlacement_t)) <
          0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)placements);
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetGpuInstanceRemainingCapacity(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int profileId;
  unsigned int count;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &profileId, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetGpuInstanceRemainingCapacity(device, profileId, &count);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &count, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceCreateGpuInstance(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int profileId;
  nvmlGpuInstance_t gpuInstance;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &profileId, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceCreateGpuInstance(device, profileId, &gpuInstance);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &gpuInstance, sizeof(nvmlGpuInstance_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlGpuInstanceDestroy(conn_t *conn) {
  nvmlGpuInstance_t gpuInstance;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &gpuInstance, sizeof(nvmlGpuInstance_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlGpuInstanceDestroy(gpuInstance);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetGpuInstances(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int profileId;
  unsigned int count;
  nvmlGpuInstance_t *gpuInstances;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &profileId, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &count, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  gpuInstances = (nvmlGpuInstance_t *)malloc(count * sizeof(nvmlGpuInstance_t));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result =
      nvmlDeviceGetGpuInstances(device, profileId, gpuInstances, &count);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &count, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, gpuInstances, count * sizeof(nvmlGpuInstance_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)gpuInstances);
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetGpuInstanceById(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int id;
  nvmlGpuInstance_t gpuInstance;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &id, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetGpuInstanceById(device, id, &gpuInstance);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &gpuInstance, sizeof(nvmlGpuInstance_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlGpuInstanceGetInfo(conn_t *conn) {
  nvmlGpuInstance_t gpuInstance;
  nvmlGpuInstanceInfo_t info;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &gpuInstance, sizeof(nvmlGpuInstance_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlGpuInstanceGetInfo(gpuInstance, &info);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &info, sizeof(nvmlGpuInstanceInfo_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlGpuInstanceGetComputeInstanceProfileInfo(conn_t *conn) {
  nvmlGpuInstance_t gpuInstance;
  unsigned int profile;
  unsigned int engProfile;
  nvmlComputeInstanceProfileInfo_t info;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &gpuInstance, sizeof(nvmlGpuInstance_t)) < 0 ||
      rpc_read(conn, &profile, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &engProfile, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlGpuInstanceGetComputeInstanceProfileInfo(
      gpuInstance, profile, engProfile, &info);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &info, sizeof(nvmlComputeInstanceProfileInfo_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlGpuInstanceGetComputeInstanceProfileInfoV(conn_t *conn) {
  nvmlGpuInstance_t gpuInstance;
  unsigned int profile;
  unsigned int engProfile;
  nvmlComputeInstanceProfileInfo_v2_t info;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &gpuInstance, sizeof(nvmlGpuInstance_t)) < 0 ||
      rpc_read(conn, &profile, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &engProfile, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlGpuInstanceGetComputeInstanceProfileInfoV(
      gpuInstance, profile, engProfile, &info);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &info, sizeof(nvmlComputeInstanceProfileInfo_v2_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlGpuInstanceGetComputeInstanceRemainingCapacity(conn_t *conn) {
  nvmlGpuInstance_t gpuInstance;
  unsigned int profileId;
  unsigned int count;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &gpuInstance, sizeof(nvmlGpuInstance_t)) < 0 ||
      rpc_read(conn, &profileId, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlGpuInstanceGetComputeInstanceRemainingCapacity(
      gpuInstance, profileId, &count);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &count, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlGpuInstanceGetComputeInstancePossiblePlacements(conn_t *conn) {
  nvmlGpuInstance_t gpuInstance;
  unsigned int profileId;
  unsigned int count;
  nvmlComputeInstancePlacement_t *placements;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &gpuInstance, sizeof(nvmlGpuInstance_t)) < 0 ||
      rpc_read(conn, &profileId, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &count, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  placements = (nvmlComputeInstancePlacement_t *)malloc(
      count * sizeof(nvmlComputeInstancePlacement_t));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = nvmlGpuInstanceGetComputeInstancePossiblePlacements(
      gpuInstance, profileId, placements, &count);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &count, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, placements,
                count * sizeof(nvmlComputeInstancePlacement_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)placements);
ERROR_0:
  return -1;
}

int handle_nvmlGpuInstanceCreateComputeInstance(conn_t *conn) {
  nvmlGpuInstance_t gpuInstance;
  unsigned int profileId;
  nvmlComputeInstance_t computeInstance;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &gpuInstance, sizeof(nvmlGpuInstance_t)) < 0 ||
      rpc_read(conn, &profileId, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlGpuInstanceCreateComputeInstance(
      gpuInstance, profileId, &computeInstance);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &computeInstance, sizeof(nvmlComputeInstance_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlComputeInstanceDestroy(conn_t *conn) {
  nvmlComputeInstance_t computeInstance;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &computeInstance, sizeof(nvmlComputeInstance_t)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlComputeInstanceDestroy(computeInstance);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlGpuInstanceGetComputeInstances(conn_t *conn) {
  nvmlGpuInstance_t gpuInstance;
  unsigned int profileId;
  unsigned int count;
  nvmlComputeInstance_t *computeInstances;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &gpuInstance, sizeof(nvmlGpuInstance_t)) < 0 ||
      rpc_read(conn, &profileId, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &count, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  computeInstances =
      (nvmlComputeInstance_t *)malloc(count * sizeof(nvmlComputeInstance_t));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = nvmlGpuInstanceGetComputeInstances(
      gpuInstance, profileId, computeInstances, &count);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &count, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, computeInstances, count * sizeof(nvmlComputeInstance_t)) <
          0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)computeInstances);
ERROR_0:
  return -1;
}

int handle_nvmlGpuInstanceGetComputeInstanceById(conn_t *conn) {
  nvmlGpuInstance_t gpuInstance;
  unsigned int id;
  nvmlComputeInstance_t computeInstance;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &gpuInstance, sizeof(nvmlGpuInstance_t)) < 0 ||
      rpc_read(conn, &id, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlGpuInstanceGetComputeInstanceById(gpuInstance, id, &computeInstance);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &computeInstance, sizeof(nvmlComputeInstance_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlComputeInstanceGetInfo_v2(conn_t *conn) {
  nvmlComputeInstance_t computeInstance;
  nvmlComputeInstanceInfo_t info;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &computeInstance, sizeof(nvmlComputeInstance_t)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlComputeInstanceGetInfo_v2(computeInstance, &info);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &info, sizeof(nvmlComputeInstanceInfo_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceIsMigDeviceHandle(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int isMigDevice;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceIsMigDeviceHandle(device, &isMigDevice);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &isMigDevice, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetGpuInstanceId(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int id;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetGpuInstanceId(device, &id);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &id, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetComputeInstanceId(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int id;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetComputeInstanceId(device, &id);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &id, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetMaxMigDeviceCount(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int count;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetMaxMigDeviceCount(device, &count);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &count, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetMigDeviceHandleByIndex(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int index;
  nvmlDevice_t migDevice;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &index, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetMigDeviceHandleByIndex(device, index, &migDevice);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &migDevice, sizeof(nvmlDevice_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetDeviceHandleFromMigDeviceHandle(conn_t *conn) {
  nvmlDevice_t migDevice;
  nvmlDevice_t device;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &migDevice, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetDeviceHandleFromMigDeviceHandle(migDevice, &device);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetBusType(conn_t *conn) {
  nvmlDevice_t device;
  nvmlBusType_t type;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetBusType(device, &type);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &type, sizeof(nvmlBusType_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetDynamicPstatesInfo(conn_t *conn) {
  nvmlDevice_t device;
  nvmlGpuDynamicPstatesInfo_t pDynamicPstatesInfo;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetDynamicPstatesInfo(device, &pDynamicPstatesInfo);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pDynamicPstatesInfo,
                sizeof(nvmlGpuDynamicPstatesInfo_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceSetFanSpeed_v2(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int fan;
  unsigned int speed;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &fan, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &speed, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceSetFanSpeed_v2(device, fan, speed);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetGpcClkVfOffset(conn_t *conn) {
  nvmlDevice_t device;
  int offset;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetGpcClkVfOffset(device, &offset);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &offset, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceSetGpcClkVfOffset(conn_t *conn) {
  nvmlDevice_t device;
  int offset;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &offset, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceSetGpcClkVfOffset(device, offset);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetMemClkVfOffset(conn_t *conn) {
  nvmlDevice_t device;
  int offset;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetMemClkVfOffset(device, &offset);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &offset, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceSetMemClkVfOffset(conn_t *conn) {
  nvmlDevice_t device;
  int offset;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &offset, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceSetMemClkVfOffset(device, offset);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetMinMaxClockOfPState(conn_t *conn) {
  nvmlDevice_t device;
  nvmlClockType_t type;
  nvmlPstates_t pstate;
  unsigned int minClockMHz;
  unsigned int maxClockMHz;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &type, sizeof(nvmlClockType_t)) < 0 ||
      rpc_read(conn, &pstate, sizeof(nvmlPstates_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetMinMaxClockOfPState(
      device, type, pstate, &minClockMHz, &maxClockMHz);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &minClockMHz, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &maxClockMHz, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetSupportedPerformanceStates(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int size;
  nvmlPstates_t *pstates;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &size, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;
  pstates = (nvmlPstates_t *)malloc(size * sizeof(nvmlPstates_t));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result =
      nvmlDeviceGetSupportedPerformanceStates(device, pstates, size);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, pstates, size * sizeof(nvmlPstates_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)pstates);
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetGpcClkMinMaxVfOffset(conn_t *conn) {
  nvmlDevice_t device;
  int minOffset;
  int maxOffset;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetGpcClkMinMaxVfOffset(device, &minOffset, &maxOffset);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &minOffset, sizeof(int)) < 0 ||
      rpc_write(conn, &maxOffset, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetMemClkMinMaxVfOffset(conn_t *conn) {
  nvmlDevice_t device;
  int minOffset;
  int maxOffset;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceGetMemClkMinMaxVfOffset(device, &minOffset, &maxOffset);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &minOffset, sizeof(int)) < 0 ||
      rpc_write(conn, &maxOffset, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceGetGpuFabricInfo(conn_t *conn) {
  nvmlDevice_t device;
  nvmlGpuFabricInfo_t gpuFabricInfo;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlDeviceGetGpuFabricInfo(device, &gpuFabricInfo);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &gpuFabricInfo, sizeof(nvmlGpuFabricInfo_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlGpmMetricsGet(conn_t *conn) {
  nvmlGpmMetricsGet_t metricsGet;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlGpmMetricsGet(&metricsGet);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &metricsGet, sizeof(nvmlGpmMetricsGet_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlGpmSampleFree(conn_t *conn) {
  nvmlGpmSample_t gpmSample;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &gpmSample, sizeof(nvmlGpmSample_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlGpmSampleFree(gpmSample);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlGpmSampleAlloc(conn_t *conn) {
  nvmlGpmSample_t gpmSample;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlGpmSampleAlloc(&gpmSample);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &gpmSample, sizeof(nvmlGpmSample_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlGpmSampleGet(conn_t *conn) {
  nvmlDevice_t device;
  nvmlGpmSample_t gpmSample;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &gpmSample, sizeof(nvmlGpmSample_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlGpmSampleGet(device, gpmSample);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlGpmMigSampleGet(conn_t *conn) {
  nvmlDevice_t device;
  unsigned int gpuInstanceId;
  nvmlGpmSample_t gpmSample;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 ||
      rpc_read(conn, &gpuInstanceId, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &gpmSample, sizeof(nvmlGpmSample_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlGpmMigSampleGet(device, gpuInstanceId, gpmSample);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlGpmQueryDeviceSupport(conn_t *conn) {
  nvmlDevice_t device;
  nvmlGpmSupport_t gpmSupport;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = nvmlGpmQueryDeviceSupport(device, &gpmSupport);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &gpmSupport, sizeof(nvmlGpmSupport_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_nvmlDeviceSetNvLinkDeviceLowPowerThreshold(conn_t *conn) {
  nvmlDevice_t device;
  nvmlNvLinkPowerThres_t info;
  int request_id;
  nvmlReturn_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(nvmlDevice_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      nvmlDeviceSetNvLinkDeviceLowPowerThreshold(device, &info);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &info, sizeof(nvmlNvLinkPowerThres_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(nvmlReturn_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuInit(conn_t *conn) {
  unsigned int Flags;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &Flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuInit(Flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuDriverGetVersion(conn_t *conn) {
  int driverVersion;
  int request_id;
  CUresult scuda_intercept_result;
  if (false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuDriverGetVersion(&driverVersion);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &driverVersion, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuDeviceGet(conn_t *conn) {
  CUdevice device;
  int ordinal;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &ordinal, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuDeviceGet(&device, ordinal);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &device, sizeof(CUdevice)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuDeviceGetCount(conn_t *conn) {
  int count;
  int request_id;
  CUresult scuda_intercept_result;
  if (false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuDeviceGetCount(&count);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &count, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuDeviceGetName(conn_t *conn) {
  int len;
  char *name;
  CUdevice dev;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &len, sizeof(int)) < 0 || false)
    goto ERROR_0;
  name = (char *)malloc(len * sizeof(char));
  if (rpc_read(conn, &dev, sizeof(CUdevice)) < 0 || false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = cuDeviceGetName(name, len, dev);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, name, len * sizeof(char)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)name);
ERROR_0:
  return -1;
}

int handle_cuDeviceGetUuid(conn_t *conn) {
  CUuuid *uuid;
  CUdevice dev;
  int request_id;
  CUresult scuda_intercept_result;
  if (false)
    goto ERROR_0;
  uuid = (CUuuid *)malloc(16 * sizeof(CUuuid));
  if (rpc_read(conn, &dev, sizeof(CUdevice)) < 0 || false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = cuDeviceGetUuid(uuid, dev);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, uuid, 16) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)uuid);
ERROR_0:
  return -1;
}

int handle_cuDeviceGetUuid_v2(conn_t *conn) {
  CUuuid *uuid;
  CUdevice dev;
  int request_id;
  CUresult scuda_intercept_result;
  if (false)
    goto ERROR_0;
  uuid = (CUuuid *)malloc(16 * sizeof(CUuuid));
  if (rpc_read(conn, &dev, sizeof(CUdevice)) < 0 || false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = cuDeviceGetUuid_v2(uuid, dev);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, uuid, 16) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)uuid);
ERROR_0:
  return -1;
}

int handle_cuDeviceGetLuid(conn_t *conn) {
  char *luid;
  std::size_t luid_len;
  unsigned int deviceNodeMask;
  CUdevice dev;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dev, sizeof(CUdevice)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuDeviceGetLuid(luid, &deviceNodeMask, dev);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &luid_len, sizeof(std::size_t)) < 0 ||
      rpc_write(conn, luid, luid_len) < 0 ||
      rpc_write(conn, &deviceNodeMask, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuDeviceTotalMem_v2(conn_t *conn) {
  size_t bytes;
  CUdevice dev;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dev, sizeof(CUdevice)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuDeviceTotalMem_v2(&bytes, dev);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &bytes, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuDeviceGetTexture1DLinearMaxWidth(conn_t *conn) {
  size_t maxWidthInElements;
  CUarray_format format;
  unsigned numChannels;
  CUdevice dev;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &format, sizeof(CUarray_format)) < 0 ||
      rpc_read(conn, &numChannels, sizeof(unsigned)) < 0 ||
      rpc_read(conn, &dev, sizeof(CUdevice)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuDeviceGetTexture1DLinearMaxWidth(
      &maxWidthInElements, format, numChannels, dev);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &maxWidthInElements, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuDeviceGetAttribute(conn_t *conn) {
  int pi;
  CUdevice_attribute attrib;
  CUdevice dev;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &attrib, sizeof(CUdevice_attribute)) < 0 ||
      rpc_read(conn, &dev, sizeof(CUdevice)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuDeviceGetAttribute(&pi, attrib, dev);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pi, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuDeviceSetMemPool(conn_t *conn) {
  CUdevice dev;
  CUmemoryPool pool;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dev, sizeof(CUdevice)) < 0 ||
      rpc_read(conn, &pool, sizeof(CUmemoryPool)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuDeviceSetMemPool(dev, pool);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuDeviceGetMemPool(conn_t *conn) {
  CUmemoryPool pool;
  CUdevice dev;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dev, sizeof(CUdevice)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuDeviceGetMemPool(&pool, dev);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pool, sizeof(CUmemoryPool)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuDeviceGetDefaultMemPool(conn_t *conn) {
  CUmemoryPool pool_out;
  CUdevice dev;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dev, sizeof(CUdevice)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuDeviceGetDefaultMemPool(&pool_out, dev);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pool_out, sizeof(CUmemoryPool)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuDeviceGetExecAffinitySupport(conn_t *conn) {
  int pi;
  CUexecAffinityType type;
  CUdevice dev;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &type, sizeof(CUexecAffinityType)) < 0 ||
      rpc_read(conn, &dev, sizeof(CUdevice)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuDeviceGetExecAffinitySupport(&pi, type, dev);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pi, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuFlushGPUDirectRDMAWrites(conn_t *conn) {
  CUflushGPUDirectRDMAWritesTarget target;
  CUflushGPUDirectRDMAWritesScope scope;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &target, sizeof(CUflushGPUDirectRDMAWritesTarget)) < 0 ||
      rpc_read(conn, &scope, sizeof(CUflushGPUDirectRDMAWritesScope)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuFlushGPUDirectRDMAWrites(target, scope);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuDeviceGetProperties(conn_t *conn) {
  CUdevprop prop;
  CUdevice dev;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dev, sizeof(CUdevice)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuDeviceGetProperties(&prop, dev);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &prop, sizeof(CUdevprop)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuDeviceComputeCapability(conn_t *conn) {
  int major;
  int minor;
  CUdevice dev;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dev, sizeof(CUdevice)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuDeviceComputeCapability(&major, &minor, dev);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &major, sizeof(int)) < 0 ||
      rpc_write(conn, &minor, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuDevicePrimaryCtxRetain(conn_t *conn) {
  CUcontext pctx;
  CUdevice dev;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dev, sizeof(CUdevice)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuDevicePrimaryCtxRetain(&pctx, dev);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pctx, sizeof(CUcontext)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuDevicePrimaryCtxRelease_v2(conn_t *conn) {
  CUdevice dev;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dev, sizeof(CUdevice)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuDevicePrimaryCtxRelease_v2(dev);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuDevicePrimaryCtxSetFlags_v2(conn_t *conn) {
  CUdevice dev;
  unsigned int flags;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dev, sizeof(CUdevice)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuDevicePrimaryCtxSetFlags_v2(dev, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuDevicePrimaryCtxGetState(conn_t *conn) {
  CUdevice dev;
  unsigned int flags;
  int active;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dev, sizeof(CUdevice)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuDevicePrimaryCtxGetState(dev, &flags, &active);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &flags, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &active, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuDevicePrimaryCtxReset_v2(conn_t *conn) {
  CUdevice dev;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dev, sizeof(CUdevice)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuDevicePrimaryCtxReset_v2(dev);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuCtxCreate_v2(conn_t *conn) {
  CUcontext pctx;
  unsigned int flags;
  CUdevice dev;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &flags, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &dev, sizeof(CUdevice)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuCtxCreate_v2(&pctx, flags, dev);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pctx, sizeof(CUcontext)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuCtxCreate_v3(conn_t *conn) {
  CUcontext pctx;
  int numParams;
  CUexecAffinityParam *paramsArray;
  unsigned int flags;
  CUdevice dev;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &numParams, sizeof(int)) < 0 || false)
    goto ERROR_0;
  paramsArray =
      (CUexecAffinityParam *)malloc(numParams * sizeof(CUexecAffinityParam));
  if (rpc_read(conn, &flags, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &dev, sizeof(CUdevice)) < 0 || false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result =
      cuCtxCreate_v3(&pctx, paramsArray, numParams, flags, dev);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pctx, sizeof(CUcontext)) < 0 ||
      rpc_write(conn, paramsArray, numParams * sizeof(CUexecAffinityParam)) <
          0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)paramsArray);
ERROR_0:
  return -1;
}

int handle_cuCtxDestroy_v2(conn_t *conn) {
  CUcontext ctx;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &ctx, sizeof(CUcontext)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuCtxDestroy_v2(ctx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuCtxPushCurrent_v2(conn_t *conn) {
  CUcontext ctx;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &ctx, sizeof(CUcontext)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuCtxPushCurrent_v2(ctx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuCtxPopCurrent_v2(conn_t *conn) {
  CUcontext pctx;
  int request_id;
  CUresult scuda_intercept_result;
  if (false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuCtxPopCurrent_v2(&pctx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pctx, sizeof(CUcontext)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuCtxSetCurrent(conn_t *conn) {
  CUcontext ctx;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &ctx, sizeof(CUcontext)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuCtxSetCurrent(ctx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuCtxGetCurrent(conn_t *conn) {
  CUcontext pctx;
  int request_id;
  CUresult scuda_intercept_result;
  if (false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuCtxGetCurrent(&pctx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pctx, sizeof(CUcontext)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuCtxGetDevice(conn_t *conn) {
  CUdevice device;
  int request_id;
  CUresult scuda_intercept_result;
  if (false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuCtxGetDevice(&device);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &device, sizeof(CUdevice)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuCtxGetFlags(conn_t *conn) {
  unsigned int flags;
  int request_id;
  CUresult scuda_intercept_result;
  if (false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuCtxGetFlags(&flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &flags, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuCtxGetId(conn_t *conn) {
  CUcontext ctx;
  unsigned long long ctxId;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &ctx, sizeof(CUcontext)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuCtxGetId(ctx, &ctxId);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &ctxId, sizeof(unsigned long long)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuCtxSynchronize(conn_t *conn) {
  int request_id;
  CUresult scuda_intercept_result;
  if (false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuCtxSynchronize();

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuCtxSetLimit(conn_t *conn) {
  CUlimit limit;
  size_t value;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &limit, sizeof(CUlimit)) < 0 ||
      rpc_read(conn, &value, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuCtxSetLimit(limit, value);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuCtxGetLimit(conn_t *conn) {
  size_t pvalue;
  CUlimit limit;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &limit, sizeof(CUlimit)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuCtxGetLimit(&pvalue, limit);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pvalue, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuCtxGetCacheConfig(conn_t *conn) {
  CUfunc_cache pconfig;
  int request_id;
  CUresult scuda_intercept_result;
  if (false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuCtxGetCacheConfig(&pconfig);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pconfig, sizeof(CUfunc_cache)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuCtxSetCacheConfig(conn_t *conn) {
  CUfunc_cache config;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &config, sizeof(CUfunc_cache)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuCtxSetCacheConfig(config);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuCtxGetSharedMemConfig(conn_t *conn) {
  CUsharedconfig pConfig;
  int request_id;
  CUresult scuda_intercept_result;
  if (false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuCtxGetSharedMemConfig(&pConfig);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pConfig, sizeof(CUsharedconfig)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuCtxSetSharedMemConfig(conn_t *conn) {
  CUsharedconfig config;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &config, sizeof(CUsharedconfig)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuCtxSetSharedMemConfig(config);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuCtxGetApiVersion(conn_t *conn) {
  CUcontext ctx;
  unsigned int version;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &ctx, sizeof(CUcontext)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuCtxGetApiVersion(ctx, &version);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &version, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuCtxGetStreamPriorityRange(conn_t *conn) {
  int leastPriority;
  int greatestPriority;
  int request_id;
  CUresult scuda_intercept_result;
  if (false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuCtxGetStreamPriorityRange(&leastPriority, &greatestPriority);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &leastPriority, sizeof(int)) < 0 ||
      rpc_write(conn, &greatestPriority, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuCtxResetPersistingL2Cache(conn_t *conn) {
  int request_id;
  CUresult scuda_intercept_result;
  if (false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuCtxResetPersistingL2Cache();

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuCtxGetExecAffinity(conn_t *conn) {
  CUexecAffinityParam pExecAffinity;
  CUexecAffinityType type;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &type, sizeof(CUexecAffinityType)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuCtxGetExecAffinity(&pExecAffinity, type);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pExecAffinity, sizeof(CUexecAffinityParam)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuCtxAttach(conn_t *conn) {
  CUcontext pctx;
  unsigned int flags;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuCtxAttach(&pctx, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pctx, sizeof(CUcontext)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuCtxDetach(conn_t *conn) {
  CUcontext ctx;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &ctx, sizeof(CUcontext)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuCtxDetach(ctx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuModuleLoad(conn_t *conn) {
  CUmodule module;
  const char *fname;
  std::size_t fname_len;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &fname_len, sizeof(std::size_t)) < 0)
    goto ERROR_0;
  fname = (const char *)malloc(fname_len);
  if (rpc_read(conn, (void *)fname, fname_len) < 0 || false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = cuModuleLoad(&module, fname);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &module, sizeof(CUmodule)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)fname);
ERROR_0:
  return -1;
}

int handle_cuModuleUnload(conn_t *conn) {
  CUmodule hmod;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hmod, sizeof(CUmodule)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuModuleUnload(hmod);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuModuleGetLoadingMode(conn_t *conn) {
  CUmoduleLoadingMode mode;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &mode, sizeof(CUmoduleLoadingMode)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuModuleGetLoadingMode(&mode);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &mode, sizeof(CUmoduleLoadingMode)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuModuleGetFunction(conn_t *conn) {
  CUfunction hfunc;
  CUmodule hmod;
  const char *name;
  std::size_t name_len;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hmod, sizeof(CUmodule)) < 0 ||
      rpc_read(conn, &name_len, sizeof(std::size_t)) < 0)
    goto ERROR_0;
  name = (const char *)malloc(name_len);
  if (rpc_read(conn, (void *)name, name_len) < 0 || false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = cuModuleGetFunction(&hfunc, hmod, name);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &hfunc, sizeof(CUfunction)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)name);
ERROR_0:
  return -1;
}

int handle_cuModuleGetGlobal_v2(conn_t *conn) {
  CUdeviceptr dptr;
  size_t bytes;
  CUmodule hmod;
  const char *name;
  std::size_t name_len;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hmod, sizeof(CUmodule)) < 0 ||
      rpc_read(conn, &name_len, sizeof(std::size_t)) < 0)
    goto ERROR_0;
  name = (const char *)malloc(name_len);
  if (rpc_read(conn, (void *)name, name_len) < 0 || false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = cuModuleGetGlobal_v2(&dptr, &bytes, hmod, name);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &dptr, sizeof(CUdeviceptr)) < 0 ||
      rpc_write(conn, &bytes, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)name);
ERROR_0:
  return -1;
}

int handle_cuLinkCreate_v2(conn_t *conn) {
  unsigned int numOptions;
  CUjit_option options;
  void *optionValues;
  CUlinkState stateOut;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &numOptions, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &options, sizeof(CUjit_option)) < 0 ||
      rpc_read(conn, &optionValues, sizeof(void *)) < 0 ||
      rpc_read(conn, &stateOut, sizeof(CUlinkState)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuLinkCreate_v2(numOptions, &options, &optionValues, &stateOut);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &options, sizeof(CUjit_option)) < 0 ||
      rpc_write(conn, &optionValues, sizeof(void *)) < 0 ||
      rpc_write(conn, &stateOut, sizeof(CUlinkState)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuLinkAddFile_v2(conn_t *conn) {
  CUlinkState state;
  CUjitInputType type;
  const char *path;
  std::size_t path_len;
  unsigned int numOptions;
  CUjit_option *options;
  void **optionValues;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &state, sizeof(CUlinkState)) < 0 ||
      rpc_read(conn, &type, sizeof(CUjitInputType)) < 0 ||
      rpc_read(conn, &path_len, sizeof(std::size_t)) < 0)
    goto ERROR_0;
  path = (const char *)malloc(path_len);
  if (rpc_read(conn, (void *)path, path_len) < 0 ||
      rpc_read(conn, &numOptions, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, options, numOptions * sizeof(CUjit_option)) < 0 ||
      rpc_read(conn, optionValues, numOptions * sizeof(void *)) < 0 || false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result =
      cuLinkAddFile_v2(state, type, path, numOptions, options, optionValues);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)path);
ERROR_0:
  return -1;
}

int handle_cuLinkComplete(conn_t *conn) {
  CUlinkState state;
  void *cubinOut;
  size_t sizeOut;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &state, sizeof(CUlinkState)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuLinkComplete(state, &cubinOut, &sizeOut);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &cubinOut, sizeof(void *)) < 0 ||
      rpc_write(conn, &sizeOut, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuLinkDestroy(conn_t *conn) {
  CUlinkState state;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &state, sizeof(CUlinkState)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuLinkDestroy(state);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuModuleGetTexRef(conn_t *conn) {
  CUtexref pTexRef;
  CUmodule hmod;
  const char *name;
  std::size_t name_len;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hmod, sizeof(CUmodule)) < 0 ||
      rpc_read(conn, &name_len, sizeof(std::size_t)) < 0)
    goto ERROR_0;
  name = (const char *)malloc(name_len);
  if (rpc_read(conn, (void *)name, name_len) < 0 || false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = cuModuleGetTexRef(&pTexRef, hmod, name);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pTexRef, sizeof(CUtexref)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)name);
ERROR_0:
  return -1;
}

int handle_cuModuleGetSurfRef(conn_t *conn) {
  CUsurfref pSurfRef;
  CUmodule hmod;
  const char *name;
  std::size_t name_len;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hmod, sizeof(CUmodule)) < 0 ||
      rpc_read(conn, &name_len, sizeof(std::size_t)) < 0)
    goto ERROR_0;
  name = (const char *)malloc(name_len);
  if (rpc_read(conn, (void *)name, name_len) < 0 || false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = cuModuleGetSurfRef(&pSurfRef, hmod, name);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pSurfRef, sizeof(CUsurfref)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)name);
ERROR_0:
  return -1;
}

int handle_cuLibraryLoadFromFile(conn_t *conn) {
  CUlibrary library;
  const char *fileName;
  std::size_t fileName_len;
  unsigned int numJitOptions;
  CUjit_option *jitOptions;
  void **jitOptionsValues;
  unsigned int numLibraryOptions;
  CUlibraryOption *libraryOptions;
  void **libraryOptionValues;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &fileName_len, sizeof(std::size_t)) < 0)
    goto ERROR_0;
  fileName = (const char *)malloc(fileName_len);
  if (rpc_read(conn, (void *)fileName, fileName_len) < 0 ||
      rpc_read(conn, &numJitOptions, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, jitOptions, numJitOptions * sizeof(CUjit_option)) < 0 ||
      rpc_read(conn, jitOptionsValues, numJitOptions * sizeof(void *)) < 0 ||
      rpc_read(conn, &numLibraryOptions, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, libraryOptions,
               numLibraryOptions * sizeof(CUlibraryOption)) < 0 ||
      rpc_read(conn, libraryOptionValues, numLibraryOptions * sizeof(void *)) <
          0 ||
      false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = cuLibraryLoadFromFile(
      &library, fileName, jitOptions, jitOptionsValues, numJitOptions,
      libraryOptions, libraryOptionValues, numLibraryOptions);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &library, sizeof(CUlibrary)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)fileName);
ERROR_0:
  return -1;
}

int handle_cuLibraryUnload(conn_t *conn) {
  CUlibrary library;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &library, sizeof(CUlibrary)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuLibraryUnload(library);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuLibraryGetKernel(conn_t *conn) {
  CUkernel pKernel;
  CUlibrary library;
  const char *name;
  std::size_t name_len;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &library, sizeof(CUlibrary)) < 0 ||
      rpc_read(conn, &name_len, sizeof(std::size_t)) < 0)
    goto ERROR_0;
  name = (const char *)malloc(name_len);
  if (rpc_read(conn, (void *)name, name_len) < 0 || false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = cuLibraryGetKernel(&pKernel, library, name);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pKernel, sizeof(CUkernel)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)name);
ERROR_0:
  return -1;
}

int handle_cuLibraryGetModule(conn_t *conn) {
  CUmodule pMod;
  CUlibrary library;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &library, sizeof(CUlibrary)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuLibraryGetModule(&pMod, library);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pMod, sizeof(CUmodule)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuKernelGetFunction(conn_t *conn) {
  CUfunction pFunc;
  CUkernel kernel;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &kernel, sizeof(CUkernel)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuKernelGetFunction(&pFunc, kernel);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pFunc, sizeof(CUfunction)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuLibraryGetGlobal(conn_t *conn) {
  CUdeviceptr dptr;
  size_t bytes;
  CUlibrary library;
  const char *name;
  std::size_t name_len;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &library, sizeof(CUlibrary)) < 0 ||
      rpc_read(conn, &name_len, sizeof(std::size_t)) < 0)
    goto ERROR_0;
  name = (const char *)malloc(name_len);
  if (rpc_read(conn, (void *)name, name_len) < 0 || false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = cuLibraryGetGlobal(&dptr, &bytes, library, name);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &dptr, sizeof(CUdeviceptr)) < 0 ||
      rpc_write(conn, &bytes, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)name);
ERROR_0:
  return -1;
}

int handle_cuLibraryGetManaged(conn_t *conn) {
  CUdeviceptr dptr;
  size_t bytes;
  CUlibrary library;
  const char *name;
  std::size_t name_len;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &library, sizeof(CUlibrary)) < 0 ||
      rpc_read(conn, &name_len, sizeof(std::size_t)) < 0)
    goto ERROR_0;
  name = (const char *)malloc(name_len);
  if (rpc_read(conn, (void *)name, name_len) < 0 || false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = cuLibraryGetManaged(&dptr, &bytes, library, name);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &dptr, sizeof(CUdeviceptr)) < 0 ||
      rpc_write(conn, &bytes, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)name);
ERROR_0:
  return -1;
}

int handle_cuLibraryGetUnifiedFunction(conn_t *conn) {
  void *fptr;
  CUlibrary library;
  const char *symbol;
  std::size_t symbol_len;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &library, sizeof(CUlibrary)) < 0 ||
      rpc_read(conn, &symbol_len, sizeof(std::size_t)) < 0)
    goto ERROR_0;
  symbol = (const char *)malloc(symbol_len);
  if (rpc_read(conn, (void *)symbol, symbol_len) < 0 || false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = cuLibraryGetUnifiedFunction(&fptr, library, symbol);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &fptr, sizeof(void *)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)symbol);
ERROR_0:
  return -1;
}

int handle_cuKernelGetAttribute(conn_t *conn) {
  int pi;
  CUfunction_attribute attrib;
  CUkernel kernel;
  CUdevice dev;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pi, sizeof(int)) < 0 ||
      rpc_read(conn, &attrib, sizeof(CUfunction_attribute)) < 0 ||
      rpc_read(conn, &kernel, sizeof(CUkernel)) < 0 ||
      rpc_read(conn, &dev, sizeof(CUdevice)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuKernelGetAttribute(&pi, attrib, kernel, dev);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pi, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuKernelSetAttribute(conn_t *conn) {
  CUfunction_attribute attrib;
  int val;
  CUkernel kernel;
  CUdevice dev;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &attrib, sizeof(CUfunction_attribute)) < 0 ||
      rpc_read(conn, &val, sizeof(int)) < 0 ||
      rpc_read(conn, &kernel, sizeof(CUkernel)) < 0 ||
      rpc_read(conn, &dev, sizeof(CUdevice)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuKernelSetAttribute(attrib, val, kernel, dev);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuKernelSetCacheConfig(conn_t *conn) {
  CUkernel kernel;
  CUfunc_cache config;
  CUdevice dev;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &kernel, sizeof(CUkernel)) < 0 ||
      rpc_read(conn, &config, sizeof(CUfunc_cache)) < 0 ||
      rpc_read(conn, &dev, sizeof(CUdevice)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuKernelSetCacheConfig(kernel, config, dev);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemGetInfo_v2(conn_t *conn) {
  size_t free;
  size_t total;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &free, sizeof(size_t)) < 0 ||
      rpc_read(conn, &total, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemGetInfo_v2(&free, &total);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &free, sizeof(size_t)) < 0 ||
      rpc_write(conn, &total, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemAlloc_v2(conn_t *conn) {
  CUdeviceptr dptr;
  size_t bytesize;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dptr, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &bytesize, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemAlloc_v2(&dptr, bytesize);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &dptr, sizeof(CUdeviceptr)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemAllocPitch_v2(conn_t *conn) {
  CUdeviceptr dptr;
  size_t pPitch;
  size_t WidthInBytes;
  size_t Height;
  unsigned int ElementSizeBytes;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dptr, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &pPitch, sizeof(size_t)) < 0 ||
      rpc_read(conn, &WidthInBytes, sizeof(size_t)) < 0 ||
      rpc_read(conn, &Height, sizeof(size_t)) < 0 ||
      rpc_read(conn, &ElementSizeBytes, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemAllocPitch_v2(&dptr, &pPitch, WidthInBytes,
                                              Height, ElementSizeBytes);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &dptr, sizeof(CUdeviceptr)) < 0 ||
      rpc_write(conn, &pPitch, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemFree_v2(conn_t *conn) {
  CUdeviceptr dptr;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dptr, sizeof(CUdeviceptr)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemFree_v2(dptr);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemGetAddressRange_v2(conn_t *conn) {
  CUdeviceptr pbase;
  size_t psize;
  CUdeviceptr dptr;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pbase, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &psize, sizeof(size_t)) < 0 ||
      rpc_read(conn, &dptr, sizeof(CUdeviceptr)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemGetAddressRange_v2(&pbase, &psize, dptr);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pbase, sizeof(CUdeviceptr)) < 0 ||
      rpc_write(conn, &psize, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemAllocHost_v2(conn_t *conn) {
  void *pp;
  size_t bytesize;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &bytesize, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemAllocHost_v2(&pp, bytesize);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pp, sizeof(void *)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemFreeHost(conn_t *conn) {
  void *p;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &p, sizeof(void *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemFreeHost(p);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemHostAlloc(conn_t *conn) {
  void *pp;
  size_t bytesize;
  unsigned int Flags;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &bytesize, sizeof(size_t)) < 0 ||
      rpc_read(conn, &Flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemHostAlloc(&pp, bytesize, Flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pp, sizeof(void *)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemHostGetDevicePointer_v2(conn_t *conn) {
  CUdeviceptr pdptr;
  void *p;
  unsigned int Flags;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pdptr, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &p, sizeof(void *)) < 0 ||
      rpc_read(conn, &Flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemHostGetDevicePointer_v2(&pdptr, p, Flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pdptr, sizeof(CUdeviceptr)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemHostGetFlags(conn_t *conn) {
  unsigned int pFlags;
  void *p;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pFlags, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &p, sizeof(void *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemHostGetFlags(&pFlags, p);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pFlags, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemAllocManaged(conn_t *conn) {
  CUdeviceptr dptr;
  size_t bytesize;
  unsigned int flags;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dptr, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &bytesize, sizeof(size_t)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemAllocManaged(&dptr, bytesize, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &dptr, sizeof(CUdeviceptr)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuDeviceGetByPCIBusId(conn_t *conn) {
  CUdevice dev;
  const char *pciBusId;
  std::size_t pciBusId_len;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dev, sizeof(CUdevice)) < 0 ||
      rpc_read(conn, &pciBusId_len, sizeof(std::size_t)) < 0)
    goto ERROR_0;
  pciBusId = (const char *)malloc(pciBusId_len);
  if (rpc_read(conn, (void *)pciBusId, pciBusId_len) < 0 || false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = cuDeviceGetByPCIBusId(&dev, pciBusId);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &dev, sizeof(CUdevice)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)pciBusId);
ERROR_0:
  return -1;
}

int handle_cuDeviceGetPCIBusId(conn_t *conn) {
  int len;
  char *pciBusId;
  CUdevice dev;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &len, sizeof(int)) < 0 || false)
    goto ERROR_0;
  pciBusId = (char *)malloc(len * sizeof(char));
  if (rpc_read(conn, &dev, sizeof(CUdevice)) < 0 || false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = cuDeviceGetPCIBusId(pciBusId, len, dev);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, pciBusId, len * sizeof(char)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)pciBusId);
ERROR_0:
  return -1;
}

int handle_cuIpcGetEventHandle(conn_t *conn) {
  CUipcEventHandle pHandle;
  CUevent event;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pHandle, sizeof(CUipcEventHandle)) < 0 ||
      rpc_read(conn, &event, sizeof(CUevent)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuIpcGetEventHandle(&pHandle, event);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pHandle, sizeof(CUipcEventHandle)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuIpcOpenEventHandle(conn_t *conn) {
  CUevent phEvent;
  CUipcEventHandle handle;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &phEvent, sizeof(CUevent)) < 0 ||
      rpc_read(conn, &handle, sizeof(CUipcEventHandle)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuIpcOpenEventHandle(&phEvent, handle);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &phEvent, sizeof(CUevent)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuIpcGetMemHandle(conn_t *conn) {
  CUipcMemHandle pHandle;
  CUdeviceptr dptr;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pHandle, sizeof(CUipcMemHandle)) < 0 ||
      rpc_read(conn, &dptr, sizeof(CUdeviceptr)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuIpcGetMemHandle(&pHandle, dptr);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pHandle, sizeof(CUipcMemHandle)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuIpcOpenMemHandle_v2(conn_t *conn) {
  CUdeviceptr pdptr;
  CUipcMemHandle handle;
  unsigned int Flags;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pdptr, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &handle, sizeof(CUipcMemHandle)) < 0 ||
      rpc_read(conn, &Flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuIpcOpenMemHandle_v2(&pdptr, handle, Flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pdptr, sizeof(CUdeviceptr)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuIpcCloseMemHandle(conn_t *conn) {
  CUdeviceptr dptr;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dptr, sizeof(CUdeviceptr)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuIpcCloseMemHandle(dptr);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemcpy(conn_t *conn) {
  CUdeviceptr dst;
  CUdeviceptr src;
  size_t ByteCount;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dst, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &src, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &ByteCount, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemcpy(dst, src, ByteCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemcpyPeer(conn_t *conn) {
  CUdeviceptr dstDevice;
  CUcontext dstContext;
  CUdeviceptr srcDevice;
  CUcontext srcContext;
  size_t ByteCount;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dstDevice, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &dstContext, sizeof(CUcontext)) < 0 ||
      rpc_read(conn, &srcDevice, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &srcContext, sizeof(CUcontext)) < 0 ||
      rpc_read(conn, &ByteCount, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuMemcpyPeer(dstDevice, dstContext, srcDevice, srcContext, ByteCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemcpyHtoD_v2(conn_t *conn) {
  CUdeviceptr dstDevice;
  const void *srcHost;
  size_t ByteCount;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dstDevice, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &srcHost, sizeof(const void *)) < 0 ||
      rpc_read(conn, &ByteCount, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemcpyHtoD_v2(dstDevice, srcHost, ByteCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemcpyDtoD_v2(conn_t *conn) {
  CUdeviceptr dstDevice;
  CUdeviceptr srcDevice;
  size_t ByteCount;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dstDevice, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &srcDevice, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &ByteCount, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemcpyDtoD_v2(dstDevice, srcDevice, ByteCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemcpyDtoA_v2(conn_t *conn) {
  CUarray dstArray;
  size_t dstOffset;
  CUdeviceptr srcDevice;
  size_t ByteCount;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dstArray, sizeof(CUarray)) < 0 ||
      rpc_read(conn, &dstOffset, sizeof(size_t)) < 0 ||
      rpc_read(conn, &srcDevice, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &ByteCount, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuMemcpyDtoA_v2(dstArray, dstOffset, srcDevice, ByteCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemcpyAtoD_v2(conn_t *conn) {
  CUdeviceptr dstDevice;
  CUarray srcArray;
  size_t srcOffset;
  size_t ByteCount;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dstDevice, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &srcArray, sizeof(CUarray)) < 0 ||
      rpc_read(conn, &srcOffset, sizeof(size_t)) < 0 ||
      rpc_read(conn, &ByteCount, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuMemcpyAtoD_v2(dstDevice, srcArray, srcOffset, ByteCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemcpyAtoH_v2(conn_t *conn) {
  void *dstHost;
  CUarray srcArray;
  size_t srcOffset;
  size_t ByteCount;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dstHost, sizeof(void *)) < 0 ||
      rpc_read(conn, &srcArray, sizeof(CUarray)) < 0 ||
      rpc_read(conn, &srcOffset, sizeof(size_t)) < 0 ||
      rpc_read(conn, &ByteCount, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuMemcpyAtoH_v2(dstHost, srcArray, srcOffset, ByteCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemcpyAtoA_v2(conn_t *conn) {
  CUarray dstArray;
  size_t dstOffset;
  CUarray srcArray;
  size_t srcOffset;
  size_t ByteCount;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dstArray, sizeof(CUarray)) < 0 ||
      rpc_read(conn, &dstOffset, sizeof(size_t)) < 0 ||
      rpc_read(conn, &srcArray, sizeof(CUarray)) < 0 ||
      rpc_read(conn, &srcOffset, sizeof(size_t)) < 0 ||
      rpc_read(conn, &ByteCount, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuMemcpyAtoA_v2(dstArray, dstOffset, srcArray, srcOffset, ByteCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemcpyAsync(conn_t *conn) {
  CUdeviceptr dst;
  CUdeviceptr src;
  size_t ByteCount;
  CUstream hStream;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dst, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &src, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &ByteCount, sizeof(size_t)) < 0 ||
      rpc_read(conn, &hStream, sizeof(CUstream)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemcpyAsync(dst, src, ByteCount, hStream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemcpyPeerAsync(conn_t *conn) {
  CUdeviceptr dstDevice;
  CUcontext dstContext;
  CUdeviceptr srcDevice;
  CUcontext srcContext;
  size_t ByteCount;
  CUstream hStream;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dstDevice, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &dstContext, sizeof(CUcontext)) < 0 ||
      rpc_read(conn, &srcDevice, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &srcContext, sizeof(CUcontext)) < 0 ||
      rpc_read(conn, &ByteCount, sizeof(size_t)) < 0 ||
      rpc_read(conn, &hStream, sizeof(CUstream)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemcpyPeerAsync(dstDevice, dstContext, srcDevice,
                                             srcContext, ByteCount, hStream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemcpyHtoDAsync_v2(conn_t *conn) {
  CUdeviceptr dstDevice;
  const void *srcHost;
  size_t ByteCount;
  CUstream hStream;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dstDevice, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &srcHost, sizeof(const void *)) < 0 ||
      rpc_read(conn, &ByteCount, sizeof(size_t)) < 0 ||
      rpc_read(conn, &hStream, sizeof(CUstream)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuMemcpyHtoDAsync_v2(dstDevice, srcHost, ByteCount, hStream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemcpyDtoDAsync_v2(conn_t *conn) {
  CUdeviceptr dstDevice;
  CUdeviceptr srcDevice;
  size_t ByteCount;
  CUstream hStream;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dstDevice, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &srcDevice, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &ByteCount, sizeof(size_t)) < 0 ||
      rpc_read(conn, &hStream, sizeof(CUstream)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuMemcpyDtoDAsync_v2(dstDevice, srcDevice, ByteCount, hStream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemsetD8_v2(conn_t *conn) {
  CUdeviceptr dstDevice;
  unsigned char uc;
  size_t N;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dstDevice, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &uc, sizeof(unsigned char)) < 0 ||
      rpc_read(conn, &N, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemsetD8_v2(dstDevice, uc, N);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemsetD16_v2(conn_t *conn) {
  CUdeviceptr dstDevice;
  unsigned short us;
  size_t N;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dstDevice, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &us, sizeof(unsigned short)) < 0 ||
      rpc_read(conn, &N, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemsetD16_v2(dstDevice, us, N);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemsetD32_v2(conn_t *conn) {
  CUdeviceptr dstDevice;
  unsigned int ui;
  size_t N;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dstDevice, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &ui, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &N, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemsetD32_v2(dstDevice, ui, N);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemsetD2D8_v2(conn_t *conn) {
  CUdeviceptr dstDevice;
  size_t dstPitch;
  unsigned char uc;
  size_t Width;
  size_t Height;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dstDevice, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &dstPitch, sizeof(size_t)) < 0 ||
      rpc_read(conn, &uc, sizeof(unsigned char)) < 0 ||
      rpc_read(conn, &Width, sizeof(size_t)) < 0 ||
      rpc_read(conn, &Height, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuMemsetD2D8_v2(dstDevice, dstPitch, uc, Width, Height);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemsetD2D16_v2(conn_t *conn) {
  CUdeviceptr dstDevice;
  size_t dstPitch;
  unsigned short us;
  size_t Width;
  size_t Height;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dstDevice, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &dstPitch, sizeof(size_t)) < 0 ||
      rpc_read(conn, &us, sizeof(unsigned short)) < 0 ||
      rpc_read(conn, &Width, sizeof(size_t)) < 0 ||
      rpc_read(conn, &Height, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuMemsetD2D16_v2(dstDevice, dstPitch, us, Width, Height);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemsetD2D32_v2(conn_t *conn) {
  CUdeviceptr dstDevice;
  size_t dstPitch;
  unsigned int ui;
  size_t Width;
  size_t Height;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dstDevice, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &dstPitch, sizeof(size_t)) < 0 ||
      rpc_read(conn, &ui, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &Width, sizeof(size_t)) < 0 ||
      rpc_read(conn, &Height, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuMemsetD2D32_v2(dstDevice, dstPitch, ui, Width, Height);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemsetD8Async(conn_t *conn) {
  CUdeviceptr dstDevice;
  unsigned char uc;
  size_t N;
  CUstream hStream;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dstDevice, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &uc, sizeof(unsigned char)) < 0 ||
      rpc_read(conn, &N, sizeof(size_t)) < 0 ||
      rpc_read(conn, &hStream, sizeof(CUstream)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemsetD8Async(dstDevice, uc, N, hStream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemsetD16Async(conn_t *conn) {
  CUdeviceptr dstDevice;
  unsigned short us;
  size_t N;
  CUstream hStream;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dstDevice, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &us, sizeof(unsigned short)) < 0 ||
      rpc_read(conn, &N, sizeof(size_t)) < 0 ||
      rpc_read(conn, &hStream, sizeof(CUstream)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemsetD16Async(dstDevice, us, N, hStream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemsetD32Async(conn_t *conn) {
  CUdeviceptr dstDevice;
  unsigned int ui;
  size_t N;
  CUstream hStream;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dstDevice, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &ui, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &N, sizeof(size_t)) < 0 ||
      rpc_read(conn, &hStream, sizeof(CUstream)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemsetD32Async(dstDevice, ui, N, hStream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemsetD2D8Async(conn_t *conn) {
  CUdeviceptr dstDevice;
  size_t dstPitch;
  unsigned char uc;
  size_t Width;
  size_t Height;
  CUstream hStream;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dstDevice, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &dstPitch, sizeof(size_t)) < 0 ||
      rpc_read(conn, &uc, sizeof(unsigned char)) < 0 ||
      rpc_read(conn, &Width, sizeof(size_t)) < 0 ||
      rpc_read(conn, &Height, sizeof(size_t)) < 0 ||
      rpc_read(conn, &hStream, sizeof(CUstream)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuMemsetD2D8Async(dstDevice, dstPitch, uc, Width, Height, hStream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemsetD2D16Async(conn_t *conn) {
  CUdeviceptr dstDevice;
  size_t dstPitch;
  unsigned short us;
  size_t Width;
  size_t Height;
  CUstream hStream;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dstDevice, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &dstPitch, sizeof(size_t)) < 0 ||
      rpc_read(conn, &us, sizeof(unsigned short)) < 0 ||
      rpc_read(conn, &Width, sizeof(size_t)) < 0 ||
      rpc_read(conn, &Height, sizeof(size_t)) < 0 ||
      rpc_read(conn, &hStream, sizeof(CUstream)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuMemsetD2D16Async(dstDevice, dstPitch, us, Width, Height, hStream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemsetD2D32Async(conn_t *conn) {
  CUdeviceptr dstDevice;
  size_t dstPitch;
  unsigned int ui;
  size_t Width;
  size_t Height;
  CUstream hStream;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dstDevice, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &dstPitch, sizeof(size_t)) < 0 ||
      rpc_read(conn, &ui, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &Width, sizeof(size_t)) < 0 ||
      rpc_read(conn, &Height, sizeof(size_t)) < 0 ||
      rpc_read(conn, &hStream, sizeof(CUstream)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuMemsetD2D32Async(dstDevice, dstPitch, ui, Width, Height, hStream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuArrayCreate_v2(conn_t *conn) {
  CUarray pHandle;
  const CUDA_ARRAY_DESCRIPTOR *pAllocateArray;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pHandle, sizeof(CUarray)) < 0 ||
      rpc_read(conn, &pAllocateArray, sizeof(const CUDA_ARRAY_DESCRIPTOR *)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuArrayCreate_v2(&pHandle, pAllocateArray);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pHandle, sizeof(CUarray)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuArrayGetDescriptor_v2(conn_t *conn) {
  CUDA_ARRAY_DESCRIPTOR pArrayDescriptor;
  CUarray hArray;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pArrayDescriptor, sizeof(CUDA_ARRAY_DESCRIPTOR)) < 0 ||
      rpc_read(conn, &hArray, sizeof(CUarray)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuArrayGetDescriptor_v2(&pArrayDescriptor, hArray);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pArrayDescriptor, sizeof(CUDA_ARRAY_DESCRIPTOR)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuArrayGetSparseProperties(conn_t *conn) {
  CUDA_ARRAY_SPARSE_PROPERTIES sparseProperties;
  CUarray array;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &sparseProperties, sizeof(CUDA_ARRAY_SPARSE_PROPERTIES)) <
          0 ||
      rpc_read(conn, &array, sizeof(CUarray)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuArrayGetSparseProperties(&sparseProperties, array);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &sparseProperties, sizeof(CUDA_ARRAY_SPARSE_PROPERTIES)) <
          0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMipmappedArrayGetSparseProperties(conn_t *conn) {
  CUDA_ARRAY_SPARSE_PROPERTIES sparseProperties;
  CUmipmappedArray mipmap;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &sparseProperties, sizeof(CUDA_ARRAY_SPARSE_PROPERTIES)) <
          0 ||
      rpc_read(conn, &mipmap, sizeof(CUmipmappedArray)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuMipmappedArrayGetSparseProperties(&sparseProperties, mipmap);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &sparseProperties, sizeof(CUDA_ARRAY_SPARSE_PROPERTIES)) <
          0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuArrayGetMemoryRequirements(conn_t *conn) {
  CUDA_ARRAY_MEMORY_REQUIREMENTS memoryRequirements;
  CUarray array;
  CUdevice device;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &memoryRequirements,
               sizeof(CUDA_ARRAY_MEMORY_REQUIREMENTS)) < 0 ||
      rpc_read(conn, &array, sizeof(CUarray)) < 0 ||
      rpc_read(conn, &device, sizeof(CUdevice)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuArrayGetMemoryRequirements(&memoryRequirements, array, device);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &memoryRequirements,
                sizeof(CUDA_ARRAY_MEMORY_REQUIREMENTS)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMipmappedArrayGetMemoryRequirements(conn_t *conn) {
  CUDA_ARRAY_MEMORY_REQUIREMENTS memoryRequirements;
  CUmipmappedArray mipmap;
  CUdevice device;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &memoryRequirements,
               sizeof(CUDA_ARRAY_MEMORY_REQUIREMENTS)) < 0 ||
      rpc_read(conn, &mipmap, sizeof(CUmipmappedArray)) < 0 ||
      rpc_read(conn, &device, sizeof(CUdevice)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMipmappedArrayGetMemoryRequirements(
      &memoryRequirements, mipmap, device);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &memoryRequirements,
                sizeof(CUDA_ARRAY_MEMORY_REQUIREMENTS)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuArrayGetPlane(conn_t *conn) {
  CUarray pPlaneArray;
  CUarray hArray;
  unsigned int planeIdx;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pPlaneArray, sizeof(CUarray)) < 0 ||
      rpc_read(conn, &hArray, sizeof(CUarray)) < 0 ||
      rpc_read(conn, &planeIdx, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuArrayGetPlane(&pPlaneArray, hArray, planeIdx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pPlaneArray, sizeof(CUarray)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuArrayDestroy(conn_t *conn) {
  CUarray hArray;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hArray, sizeof(CUarray)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuArrayDestroy(hArray);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuArray3DCreate_v2(conn_t *conn) {
  CUarray pHandle;
  const CUDA_ARRAY3D_DESCRIPTOR *pAllocateArray;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pHandle, sizeof(CUarray)) < 0 ||
      rpc_read(conn, &pAllocateArray, sizeof(const CUDA_ARRAY3D_DESCRIPTOR *)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuArray3DCreate_v2(&pHandle, pAllocateArray);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pHandle, sizeof(CUarray)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuArray3DGetDescriptor_v2(conn_t *conn) {
  CUDA_ARRAY3D_DESCRIPTOR pArrayDescriptor;
  CUarray hArray;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pArrayDescriptor, sizeof(CUDA_ARRAY3D_DESCRIPTOR)) < 0 ||
      rpc_read(conn, &hArray, sizeof(CUarray)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuArray3DGetDescriptor_v2(&pArrayDescriptor, hArray);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pArrayDescriptor, sizeof(CUDA_ARRAY3D_DESCRIPTOR)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMipmappedArrayCreate(conn_t *conn) {
  CUmipmappedArray pHandle;
  const CUDA_ARRAY3D_DESCRIPTOR *pMipmappedArrayDesc;
  unsigned int numMipmapLevels;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pHandle, sizeof(CUmipmappedArray)) < 0 ||
      rpc_read(conn, &pMipmappedArrayDesc,
               sizeof(const CUDA_ARRAY3D_DESCRIPTOR *)) < 0 ||
      rpc_read(conn, &numMipmapLevels, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuMipmappedArrayCreate(&pHandle, pMipmappedArrayDesc, numMipmapLevels);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pHandle, sizeof(CUmipmappedArray)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMipmappedArrayGetLevel(conn_t *conn) {
  CUarray pLevelArray;
  CUmipmappedArray hMipmappedArray;
  unsigned int level;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pLevelArray, sizeof(CUarray)) < 0 ||
      rpc_read(conn, &hMipmappedArray, sizeof(CUmipmappedArray)) < 0 ||
      rpc_read(conn, &level, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuMipmappedArrayGetLevel(&pLevelArray, hMipmappedArray, level);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pLevelArray, sizeof(CUarray)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMipmappedArrayDestroy(conn_t *conn) {
  CUmipmappedArray hMipmappedArray;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hMipmappedArray, sizeof(CUmipmappedArray)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMipmappedArrayDestroy(hMipmappedArray);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemAddressReserve(conn_t *conn) {
  CUdeviceptr ptr;
  size_t size;
  size_t alignment;
  CUdeviceptr addr;
  unsigned long long flags;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &ptr, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &size, sizeof(size_t)) < 0 ||
      rpc_read(conn, &alignment, sizeof(size_t)) < 0 ||
      rpc_read(conn, &addr, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned long long)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuMemAddressReserve(&ptr, size, alignment, addr, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &ptr, sizeof(CUdeviceptr)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemAddressFree(conn_t *conn) {
  CUdeviceptr ptr;
  size_t size;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &ptr, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &size, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemAddressFree(ptr, size);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemCreate(conn_t *conn) {
  CUmemGenericAllocationHandle handle;
  size_t size;
  const CUmemAllocationProp *prop;
  unsigned long long flags;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(CUmemGenericAllocationHandle)) < 0 ||
      rpc_read(conn, &size, sizeof(size_t)) < 0 ||
      rpc_read(conn, &prop, sizeof(const CUmemAllocationProp *)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned long long)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemCreate(&handle, size, prop, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &handle, sizeof(CUmemGenericAllocationHandle)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemRelease(conn_t *conn) {
  CUmemGenericAllocationHandle handle;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(CUmemGenericAllocationHandle)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemRelease(handle);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemMap(conn_t *conn) {
  CUdeviceptr ptr;
  size_t size;
  size_t offset;
  CUmemGenericAllocationHandle handle;
  unsigned long long flags;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &ptr, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &size, sizeof(size_t)) < 0 ||
      rpc_read(conn, &offset, sizeof(size_t)) < 0 ||
      rpc_read(conn, &handle, sizeof(CUmemGenericAllocationHandle)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned long long)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemMap(ptr, size, offset, handle, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemMapArrayAsync(conn_t *conn) {
  CUarrayMapInfo mapInfoList;
  unsigned int count;
  CUstream hStream;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &mapInfoList, sizeof(CUarrayMapInfo)) < 0 ||
      rpc_read(conn, &count, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &hStream, sizeof(CUstream)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemMapArrayAsync(&mapInfoList, count, hStream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &mapInfoList, sizeof(CUarrayMapInfo)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemUnmap(conn_t *conn) {
  CUdeviceptr ptr;
  size_t size;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &ptr, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &size, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemUnmap(ptr, size);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemSetAccess(conn_t *conn) {
  CUdeviceptr ptr;
  size_t size;
  const CUmemAccessDesc *desc;
  size_t count;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &ptr, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &size, sizeof(size_t)) < 0 ||
      rpc_read(conn, &desc, sizeof(const CUmemAccessDesc *)) < 0 ||
      rpc_read(conn, &count, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemSetAccess(ptr, size, desc, count);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemGetAccess(conn_t *conn) {
  unsigned long long flags;
  const CUmemLocation *location;
  CUdeviceptr ptr;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &flags, sizeof(unsigned long long)) < 0 ||
      rpc_read(conn, &location, sizeof(const CUmemLocation *)) < 0 ||
      rpc_read(conn, &ptr, sizeof(CUdeviceptr)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemGetAccess(&flags, location, ptr);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &flags, sizeof(unsigned long long)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemGetAllocationGranularity(conn_t *conn) {
  size_t granularity;
  const CUmemAllocationProp *prop;
  CUmemAllocationGranularity_flags option;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &granularity, sizeof(size_t)) < 0 ||
      rpc_read(conn, &prop, sizeof(const CUmemAllocationProp *)) < 0 ||
      rpc_read(conn, &option, sizeof(CUmemAllocationGranularity_flags)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuMemGetAllocationGranularity(&granularity, prop, option);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &granularity, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemGetAllocationPropertiesFromHandle(conn_t *conn) {
  CUmemAllocationProp prop;
  CUmemGenericAllocationHandle handle;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &prop, sizeof(CUmemAllocationProp)) < 0 ||
      rpc_read(conn, &handle, sizeof(CUmemGenericAllocationHandle)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuMemGetAllocationPropertiesFromHandle(&prop, handle);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &prop, sizeof(CUmemAllocationProp)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemFreeAsync(conn_t *conn) {
  CUdeviceptr dptr;
  CUstream hStream;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dptr, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &hStream, sizeof(CUstream)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemFreeAsync(dptr, hStream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemAllocAsync(conn_t *conn) {
  CUdeviceptr dptr;
  size_t bytesize;
  CUstream hStream;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dptr, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &bytesize, sizeof(size_t)) < 0 ||
      rpc_read(conn, &hStream, sizeof(CUstream)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemAllocAsync(&dptr, bytesize, hStream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &dptr, sizeof(CUdeviceptr)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemPoolTrimTo(conn_t *conn) {
  CUmemoryPool pool;
  size_t minBytesToKeep;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pool, sizeof(CUmemoryPool)) < 0 ||
      rpc_read(conn, &minBytesToKeep, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemPoolTrimTo(pool, minBytesToKeep);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemPoolSetAccess(conn_t *conn) {
  CUmemoryPool pool;
  const CUmemAccessDesc *map;
  size_t count;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pool, sizeof(CUmemoryPool)) < 0 ||
      rpc_read(conn, &map, sizeof(const CUmemAccessDesc *)) < 0 ||
      rpc_read(conn, &count, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemPoolSetAccess(pool, map, count);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemPoolGetAccess(conn_t *conn) {
  CUmemAccess_flags flags;
  CUmemoryPool memPool;
  CUmemLocation location;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &flags, sizeof(CUmemAccess_flags)) < 0 ||
      rpc_read(conn, &memPool, sizeof(CUmemoryPool)) < 0 ||
      rpc_read(conn, &location, sizeof(CUmemLocation)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemPoolGetAccess(&flags, memPool, &location);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &flags, sizeof(CUmemAccess_flags)) < 0 ||
      rpc_write(conn, &location, sizeof(CUmemLocation)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemPoolCreate(conn_t *conn) {
  CUmemoryPool pool;
  const CUmemPoolProps *poolProps;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pool, sizeof(CUmemoryPool)) < 0 ||
      rpc_read(conn, &poolProps, sizeof(const CUmemPoolProps *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemPoolCreate(&pool, poolProps);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pool, sizeof(CUmemoryPool)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemPoolDestroy(conn_t *conn) {
  CUmemoryPool pool;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pool, sizeof(CUmemoryPool)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemPoolDestroy(pool);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemAllocFromPoolAsync(conn_t *conn) {
  CUdeviceptr dptr;
  size_t bytesize;
  CUmemoryPool pool;
  CUstream hStream;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dptr, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &bytesize, sizeof(size_t)) < 0 ||
      rpc_read(conn, &pool, sizeof(CUmemoryPool)) < 0 ||
      rpc_read(conn, &hStream, sizeof(CUstream)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuMemAllocFromPoolAsync(&dptr, bytesize, pool, hStream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &dptr, sizeof(CUdeviceptr)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemPoolExportPointer(conn_t *conn) {
  CUmemPoolPtrExportData shareData_out;
  CUdeviceptr ptr;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &shareData_out, sizeof(CUmemPoolPtrExportData)) < 0 ||
      rpc_read(conn, &ptr, sizeof(CUdeviceptr)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemPoolExportPointer(&shareData_out, ptr);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &shareData_out, sizeof(CUmemPoolPtrExportData)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemPoolImportPointer(conn_t *conn) {
  CUdeviceptr ptr_out;
  CUmemoryPool pool;
  CUmemPoolPtrExportData shareData;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &ptr_out, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &pool, sizeof(CUmemoryPool)) < 0 ||
      rpc_read(conn, &shareData, sizeof(CUmemPoolPtrExportData)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemPoolImportPointer(&ptr_out, pool, &shareData);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &ptr_out, sizeof(CUdeviceptr)) < 0 ||
      rpc_write(conn, &shareData, sizeof(CUmemPoolPtrExportData)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemPrefetchAsync(conn_t *conn) {
  CUdeviceptr devPtr;
  size_t count;
  CUdevice dstDevice;
  CUstream hStream;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &devPtr, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &count, sizeof(size_t)) < 0 ||
      rpc_read(conn, &dstDevice, sizeof(CUdevice)) < 0 ||
      rpc_read(conn, &hStream, sizeof(CUstream)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuMemPrefetchAsync(devPtr, count, dstDevice, hStream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemAdvise(conn_t *conn) {
  CUdeviceptr devPtr;
  size_t count;
  CUmem_advise advice;
  CUdevice device;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &devPtr, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &count, sizeof(size_t)) < 0 ||
      rpc_read(conn, &advice, sizeof(CUmem_advise)) < 0 ||
      rpc_read(conn, &device, sizeof(CUdevice)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemAdvise(devPtr, count, advice, device);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuMemRangeGetAttributes(conn_t *conn) {
  void *data;
  size_t dataSizes;
  CUmem_range_attribute attributes;
  size_t numAttributes;
  CUdeviceptr devPtr;
  size_t count;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &data, sizeof(void *)) < 0 ||
      rpc_read(conn, &dataSizes, sizeof(size_t)) < 0 ||
      rpc_read(conn, &attributes, sizeof(CUmem_range_attribute)) < 0 ||
      rpc_read(conn, &numAttributes, sizeof(size_t)) < 0 ||
      rpc_read(conn, &devPtr, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &count, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuMemRangeGetAttributes(
      &data, &dataSizes, &attributes, numAttributes, devPtr, count);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &data, sizeof(void *)) < 0 ||
      rpc_write(conn, &dataSizes, sizeof(size_t)) < 0 ||
      rpc_write(conn, &attributes, sizeof(CUmem_range_attribute)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuPointerSetAttribute(conn_t *conn) {
  const void *value;
  CUpointer_attribute attribute;
  CUdeviceptr ptr;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &value, sizeof(const void *)) < 0 ||
      rpc_read(conn, &attribute, sizeof(CUpointer_attribute)) < 0 ||
      rpc_read(conn, &ptr, sizeof(CUdeviceptr)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuPointerSetAttribute(value, attribute, ptr);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuPointerGetAttributes(conn_t *conn) {
  unsigned int numAttributes;
  CUpointer_attribute attributes;
  void *data;
  CUdeviceptr ptr;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &numAttributes, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &attributes, sizeof(CUpointer_attribute)) < 0 ||
      rpc_read(conn, &data, sizeof(void *)) < 0 ||
      rpc_read(conn, &ptr, sizeof(CUdeviceptr)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuPointerGetAttributes(numAttributes, &attributes, &data, ptr);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &attributes, sizeof(CUpointer_attribute)) < 0 ||
      rpc_write(conn, &data, sizeof(void *)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuStreamCreate(conn_t *conn) {
  CUstream phStream;
  unsigned int Flags;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &phStream, sizeof(CUstream)) < 0 ||
      rpc_read(conn, &Flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuStreamCreate(&phStream, Flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &phStream, sizeof(CUstream)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuStreamCreateWithPriority(conn_t *conn) {
  CUstream phStream;
  unsigned int flags;
  int priority;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &phStream, sizeof(CUstream)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &priority, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuStreamCreateWithPriority(&phStream, flags, priority);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &phStream, sizeof(CUstream)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuStreamGetPriority(conn_t *conn) {
  CUstream hStream;
  int priority;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hStream, sizeof(CUstream)) < 0 ||
      rpc_read(conn, &priority, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuStreamGetPriority(hStream, &priority);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &priority, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuStreamGetFlags(conn_t *conn) {
  CUstream hStream;
  unsigned int flags;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hStream, sizeof(CUstream)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuStreamGetFlags(hStream, &flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &flags, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuStreamGetId(conn_t *conn) {
  CUstream hStream;
  unsigned long long streamId;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hStream, sizeof(CUstream)) < 0 ||
      rpc_read(conn, &streamId, sizeof(unsigned long long)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuStreamGetId(hStream, &streamId);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &streamId, sizeof(unsigned long long)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuStreamGetCtx(conn_t *conn) {
  CUstream hStream;
  CUcontext pctx;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hStream, sizeof(CUstream)) < 0 ||
      rpc_read(conn, &pctx, sizeof(CUcontext)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuStreamGetCtx(hStream, &pctx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pctx, sizeof(CUcontext)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuStreamWaitEvent(conn_t *conn) {
  CUstream hStream;
  CUevent hEvent;
  unsigned int Flags;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hStream, sizeof(CUstream)) < 0 ||
      rpc_read(conn, &hEvent, sizeof(CUevent)) < 0 ||
      rpc_read(conn, &Flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuStreamWaitEvent(hStream, hEvent, Flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuStreamBeginCapture_v2(conn_t *conn) {
  CUstream hStream;
  CUstreamCaptureMode mode;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hStream, sizeof(CUstream)) < 0 ||
      rpc_read(conn, &mode, sizeof(CUstreamCaptureMode)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuStreamBeginCapture_v2(hStream, mode);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuThreadExchangeStreamCaptureMode(conn_t *conn) {
  CUstreamCaptureMode mode;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &mode, sizeof(CUstreamCaptureMode)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuThreadExchangeStreamCaptureMode(&mode);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &mode, sizeof(CUstreamCaptureMode)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuStreamEndCapture(conn_t *conn) {
  CUstream hStream;
  CUgraph phGraph;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hStream, sizeof(CUstream)) < 0 ||
      rpc_read(conn, &phGraph, sizeof(CUgraph)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuStreamEndCapture(hStream, &phGraph);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &phGraph, sizeof(CUgraph)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuStreamIsCapturing(conn_t *conn) {
  CUstream hStream;
  CUstreamCaptureStatus captureStatus;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hStream, sizeof(CUstream)) < 0 ||
      rpc_read(conn, &captureStatus, sizeof(CUstreamCaptureStatus)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuStreamIsCapturing(hStream, &captureStatus);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &captureStatus, sizeof(CUstreamCaptureStatus)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuStreamUpdateCaptureDependencies(conn_t *conn) {
  CUstream hStream;
  CUgraphNode dependencies;
  size_t numDependencies;
  unsigned int flags;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hStream, sizeof(CUstream)) < 0 ||
      rpc_read(conn, &dependencies, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &numDependencies, sizeof(size_t)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuStreamUpdateCaptureDependencies(
      hStream, &dependencies, numDependencies, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &dependencies, sizeof(CUgraphNode)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuStreamAttachMemAsync(conn_t *conn) {
  CUstream hStream;
  CUdeviceptr dptr;
  size_t length;
  unsigned int flags;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hStream, sizeof(CUstream)) < 0 ||
      rpc_read(conn, &dptr, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &length, sizeof(size_t)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuStreamAttachMemAsync(hStream, dptr, length, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuStreamQuery(conn_t *conn) {
  CUstream hStream;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hStream, sizeof(CUstream)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuStreamQuery(hStream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuStreamSynchronize(conn_t *conn) {
  CUstream hStream;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hStream, sizeof(CUstream)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuStreamSynchronize(hStream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuStreamDestroy_v2(conn_t *conn) {
  CUstream hStream;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hStream, sizeof(CUstream)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuStreamDestroy_v2(hStream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuStreamCopyAttributes(conn_t *conn) {
  CUstream dst;
  CUstream src;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dst, sizeof(CUstream)) < 0 ||
      rpc_read(conn, &src, sizeof(CUstream)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuStreamCopyAttributes(dst, src);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuStreamGetAttribute(conn_t *conn) {
  CUstream hStream;
  CUstreamAttrID attr;
  CUstreamAttrValue value_out;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hStream, sizeof(CUstream)) < 0 ||
      rpc_read(conn, &attr, sizeof(CUstreamAttrID)) < 0 ||
      rpc_read(conn, &value_out, sizeof(CUstreamAttrValue)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuStreamGetAttribute(hStream, attr, &value_out);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &value_out, sizeof(CUstreamAttrValue)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuStreamSetAttribute(conn_t *conn) {
  CUstream hStream;
  CUstreamAttrID attr;
  const CUstreamAttrValue *value;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hStream, sizeof(CUstream)) < 0 ||
      rpc_read(conn, &attr, sizeof(CUstreamAttrID)) < 0 ||
      rpc_read(conn, &value, sizeof(const CUstreamAttrValue *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuStreamSetAttribute(hStream, attr, value);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuEventCreate(conn_t *conn) {
  CUevent phEvent;
  unsigned int Flags;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &phEvent, sizeof(CUevent)) < 0 ||
      rpc_read(conn, &Flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuEventCreate(&phEvent, Flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &phEvent, sizeof(CUevent)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuEventRecord(conn_t *conn) {
  CUevent hEvent;
  CUstream hStream;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hEvent, sizeof(CUevent)) < 0 ||
      rpc_read(conn, &hStream, sizeof(CUstream)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuEventRecord(hEvent, hStream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuEventRecordWithFlags(conn_t *conn) {
  CUevent hEvent;
  CUstream hStream;
  unsigned int flags;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hEvent, sizeof(CUevent)) < 0 ||
      rpc_read(conn, &hStream, sizeof(CUstream)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuEventRecordWithFlags(hEvent, hStream, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuEventQuery(conn_t *conn) {
  CUevent hEvent;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hEvent, sizeof(CUevent)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuEventQuery(hEvent);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuEventSynchronize(conn_t *conn) {
  CUevent hEvent;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hEvent, sizeof(CUevent)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuEventSynchronize(hEvent);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuEventDestroy_v2(conn_t *conn) {
  CUevent hEvent;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hEvent, sizeof(CUevent)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuEventDestroy_v2(hEvent);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuEventElapsedTime(conn_t *conn) {
  float pMilliseconds;
  CUevent hStart;
  CUevent hEnd;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pMilliseconds, sizeof(float)) < 0 ||
      rpc_read(conn, &hStart, sizeof(CUevent)) < 0 ||
      rpc_read(conn, &hEnd, sizeof(CUevent)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuEventElapsedTime(&pMilliseconds, hStart, hEnd);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pMilliseconds, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuImportExternalMemory(conn_t *conn) {
  CUexternalMemory extMem_out;
  const CUDA_EXTERNAL_MEMORY_HANDLE_DESC *memHandleDesc;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &extMem_out, sizeof(CUexternalMemory)) < 0 ||
      rpc_read(conn, &memHandleDesc,
               sizeof(const CUDA_EXTERNAL_MEMORY_HANDLE_DESC *)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuImportExternalMemory(&extMem_out, memHandleDesc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &extMem_out, sizeof(CUexternalMemory)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuExternalMemoryGetMappedBuffer(conn_t *conn) {
  CUdeviceptr devPtr;
  CUexternalMemory extMem;
  const CUDA_EXTERNAL_MEMORY_BUFFER_DESC *bufferDesc;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &devPtr, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &extMem, sizeof(CUexternalMemory)) < 0 ||
      rpc_read(conn, &bufferDesc,
               sizeof(const CUDA_EXTERNAL_MEMORY_BUFFER_DESC *)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuExternalMemoryGetMappedBuffer(&devPtr, extMem, bufferDesc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &devPtr, sizeof(CUdeviceptr)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuExternalMemoryGetMappedMipmappedArray(conn_t *conn) {
  CUmipmappedArray mipmap;
  CUexternalMemory extMem;
  const CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC *mipmapDesc;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &mipmap, sizeof(CUmipmappedArray)) < 0 ||
      rpc_read(conn, &extMem, sizeof(CUexternalMemory)) < 0 ||
      rpc_read(conn, &mipmapDesc,
               sizeof(const CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC *)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuExternalMemoryGetMappedMipmappedArray(&mipmap, extMem, mipmapDesc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &mipmap, sizeof(CUmipmappedArray)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuDestroyExternalMemory(conn_t *conn) {
  CUexternalMemory extMem;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &extMem, sizeof(CUexternalMemory)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuDestroyExternalMemory(extMem);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuImportExternalSemaphore(conn_t *conn) {
  CUexternalSemaphore extSem_out;
  const CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC *semHandleDesc;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &extSem_out, sizeof(CUexternalSemaphore)) < 0 ||
      rpc_read(conn, &semHandleDesc,
               sizeof(const CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC *)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuImportExternalSemaphore(&extSem_out, semHandleDesc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &extSem_out, sizeof(CUexternalSemaphore)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuSignalExternalSemaphoresAsync(conn_t *conn) {
  const CUexternalSemaphore *extSemArray;
  const CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS *paramsArray;
  unsigned int numExtSems;
  CUstream stream;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &extSemArray, sizeof(const CUexternalSemaphore *)) < 0 ||
      rpc_read(conn, &paramsArray,
               sizeof(const CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS *)) < 0 ||
      rpc_read(conn, &numExtSems, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &stream, sizeof(CUstream)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuSignalExternalSemaphoresAsync(
      extSemArray, paramsArray, numExtSems, stream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuWaitExternalSemaphoresAsync(conn_t *conn) {
  const CUexternalSemaphore *extSemArray;
  const CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS *paramsArray;
  unsigned int numExtSems;
  CUstream stream;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &extSemArray, sizeof(const CUexternalSemaphore *)) < 0 ||
      rpc_read(conn, &paramsArray,
               sizeof(const CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS *)) < 0 ||
      rpc_read(conn, &numExtSems, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &stream, sizeof(CUstream)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuWaitExternalSemaphoresAsync(
      extSemArray, paramsArray, numExtSems, stream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuDestroyExternalSemaphore(conn_t *conn) {
  CUexternalSemaphore extSem;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &extSem, sizeof(CUexternalSemaphore)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuDestroyExternalSemaphore(extSem);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuStreamWaitValue32_v2(conn_t *conn) {
  CUstream stream;
  CUdeviceptr addr;
  cuuint32_t value;
  unsigned int flags;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &stream, sizeof(CUstream)) < 0 ||
      rpc_read(conn, &addr, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &value, sizeof(cuuint32_t)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuStreamWaitValue32_v2(stream, addr, value, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuStreamWaitValue64_v2(conn_t *conn) {
  CUstream stream;
  CUdeviceptr addr;
  cuuint64_t value;
  unsigned int flags;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &stream, sizeof(CUstream)) < 0 ||
      rpc_read(conn, &addr, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &value, sizeof(cuuint64_t)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuStreamWaitValue64_v2(stream, addr, value, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuStreamWriteValue32_v2(conn_t *conn) {
  CUstream stream;
  CUdeviceptr addr;
  cuuint32_t value;
  unsigned int flags;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &stream, sizeof(CUstream)) < 0 ||
      rpc_read(conn, &addr, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &value, sizeof(cuuint32_t)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuStreamWriteValue32_v2(stream, addr, value, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuStreamWriteValue64_v2(conn_t *conn) {
  CUstream stream;
  CUdeviceptr addr;
  cuuint64_t value;
  unsigned int flags;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &stream, sizeof(CUstream)) < 0 ||
      rpc_read(conn, &addr, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &value, sizeof(cuuint64_t)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuStreamWriteValue64_v2(stream, addr, value, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuStreamBatchMemOp_v2(conn_t *conn) {
  CUstream stream;
  unsigned int count;
  CUstreamBatchMemOpParams paramArray;
  unsigned int flags;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &stream, sizeof(CUstream)) < 0 ||
      rpc_read(conn, &count, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &paramArray, sizeof(CUstreamBatchMemOpParams)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuStreamBatchMemOp_v2(stream, count, &paramArray, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &paramArray, sizeof(CUstreamBatchMemOpParams)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuFuncGetAttribute(conn_t *conn) {
  int pi;
  CUfunction_attribute attrib;
  CUfunction hfunc;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pi, sizeof(int)) < 0 ||
      rpc_read(conn, &attrib, sizeof(CUfunction_attribute)) < 0 ||
      rpc_read(conn, &hfunc, sizeof(CUfunction)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuFuncGetAttribute(&pi, attrib, hfunc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pi, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuFuncSetAttribute(conn_t *conn) {
  CUfunction hfunc;
  CUfunction_attribute attrib;
  int value;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hfunc, sizeof(CUfunction)) < 0 ||
      rpc_read(conn, &attrib, sizeof(CUfunction_attribute)) < 0 ||
      rpc_read(conn, &value, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuFuncSetAttribute(hfunc, attrib, value);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuFuncSetCacheConfig(conn_t *conn) {
  CUfunction hfunc;
  CUfunc_cache config;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hfunc, sizeof(CUfunction)) < 0 ||
      rpc_read(conn, &config, sizeof(CUfunc_cache)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuFuncSetCacheConfig(hfunc, config);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuFuncSetSharedMemConfig(conn_t *conn) {
  CUfunction hfunc;
  CUsharedconfig config;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hfunc, sizeof(CUfunction)) < 0 ||
      rpc_read(conn, &config, sizeof(CUsharedconfig)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuFuncSetSharedMemConfig(hfunc, config);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuFuncGetModule(conn_t *conn) {
  CUmodule hmod;
  CUfunction hfunc;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hmod, sizeof(CUmodule)) < 0 ||
      rpc_read(conn, &hfunc, sizeof(CUfunction)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuFuncGetModule(&hmod, hfunc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &hmod, sizeof(CUmodule)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuLaunchKernel(conn_t *conn) {
  CUfunction f;
  unsigned int gridDimX;
  unsigned int gridDimY;
  unsigned int gridDimZ;
  unsigned int blockDimX;
  unsigned int blockDimY;
  unsigned int blockDimZ;
  unsigned int sharedMemBytes;
  CUstream hStream;
  void **kernelParams;
  void **extra;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &f, sizeof(CUfunction)) < 0 ||
      rpc_read(conn, &gridDimX, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &gridDimY, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &gridDimZ, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &blockDimX, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &blockDimY, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &blockDimZ, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &sharedMemBytes, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &hStream, sizeof(CUstream)) < 0 ||
      rpc_read(conn, &kernelParams, sizeof(void **)) < 0 ||
      rpc_read(conn, &extra, sizeof(void **)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuLaunchKernel(f, gridDimX, gridDimY, gridDimZ, blockDimX, blockDimY,
                     blockDimZ, sharedMemBytes, hStream, kernelParams, extra);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuLaunchCooperativeKernel(conn_t *conn) {
  CUfunction f;
  unsigned int gridDimX;
  unsigned int gridDimY;
  unsigned int gridDimZ;
  unsigned int blockDimX;
  unsigned int blockDimY;
  unsigned int blockDimZ;
  unsigned int sharedMemBytes;
  CUstream hStream;
  void *kernelParams;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &f, sizeof(CUfunction)) < 0 ||
      rpc_read(conn, &gridDimX, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &gridDimY, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &gridDimZ, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &blockDimX, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &blockDimY, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &blockDimZ, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &sharedMemBytes, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &hStream, sizeof(CUstream)) < 0 ||
      rpc_read(conn, &kernelParams, sizeof(void *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuLaunchCooperativeKernel(
      f, gridDimX, gridDimY, gridDimZ, blockDimX, blockDimY, blockDimZ,
      sharedMemBytes, hStream, &kernelParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &kernelParams, sizeof(void *)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuLaunchCooperativeKernelMultiDevice(conn_t *conn) {
  CUDA_LAUNCH_PARAMS launchParamsList;
  unsigned int numDevices;
  unsigned int flags;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &launchParamsList, sizeof(CUDA_LAUNCH_PARAMS)) < 0 ||
      rpc_read(conn, &numDevices, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuLaunchCooperativeKernelMultiDevice(
      &launchParamsList, numDevices, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &launchParamsList, sizeof(CUDA_LAUNCH_PARAMS)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuFuncSetBlockShape(conn_t *conn) {
  CUfunction hfunc;
  int x;
  int y;
  int z;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hfunc, sizeof(CUfunction)) < 0 ||
      rpc_read(conn, &x, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(int)) < 0 ||
      rpc_read(conn, &z, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuFuncSetBlockShape(hfunc, x, y, z);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuFuncSetSharedSize(conn_t *conn) {
  CUfunction hfunc;
  unsigned int bytes;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hfunc, sizeof(CUfunction)) < 0 ||
      rpc_read(conn, &bytes, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuFuncSetSharedSize(hfunc, bytes);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuParamSetSize(conn_t *conn) {
  CUfunction hfunc;
  unsigned int numbytes;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hfunc, sizeof(CUfunction)) < 0 ||
      rpc_read(conn, &numbytes, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuParamSetSize(hfunc, numbytes);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuParamSeti(conn_t *conn) {
  CUfunction hfunc;
  int offset;
  unsigned int value;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hfunc, sizeof(CUfunction)) < 0 ||
      rpc_read(conn, &offset, sizeof(int)) < 0 ||
      rpc_read(conn, &value, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuParamSeti(hfunc, offset, value);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuParamSetf(conn_t *conn) {
  CUfunction hfunc;
  int offset;
  float value;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hfunc, sizeof(CUfunction)) < 0 ||
      rpc_read(conn, &offset, sizeof(int)) < 0 ||
      rpc_read(conn, &value, sizeof(float)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuParamSetf(hfunc, offset, value);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuLaunch(conn_t *conn) {
  CUfunction f;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &f, sizeof(CUfunction)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuLaunch(f);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuLaunchGrid(conn_t *conn) {
  CUfunction f;
  int grid_width;
  int grid_height;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &f, sizeof(CUfunction)) < 0 ||
      rpc_read(conn, &grid_width, sizeof(int)) < 0 ||
      rpc_read(conn, &grid_height, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuLaunchGrid(f, grid_width, grid_height);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuLaunchGridAsync(conn_t *conn) {
  CUfunction f;
  int grid_width;
  int grid_height;
  CUstream hStream;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &f, sizeof(CUfunction)) < 0 ||
      rpc_read(conn, &grid_width, sizeof(int)) < 0 ||
      rpc_read(conn, &grid_height, sizeof(int)) < 0 ||
      rpc_read(conn, &hStream, sizeof(CUstream)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuLaunchGridAsync(f, grid_width, grid_height, hStream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuParamSetTexRef(conn_t *conn) {
  CUfunction hfunc;
  int texunit;
  CUtexref hTexRef;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hfunc, sizeof(CUfunction)) < 0 ||
      rpc_read(conn, &texunit, sizeof(int)) < 0 ||
      rpc_read(conn, &hTexRef, sizeof(CUtexref)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuParamSetTexRef(hfunc, texunit, hTexRef);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphCreate(conn_t *conn) {
  CUgraph phGraph;
  unsigned int flags;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &phGraph, sizeof(CUgraph)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphCreate(&phGraph, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &phGraph, sizeof(CUgraph)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphAddKernelNode_v2(conn_t *conn) {
  CUgraphNode phGraphNode;
  CUgraph hGraph;
  const CUgraphNode *dependencies;
  size_t numDependencies;
  const CUDA_KERNEL_NODE_PARAMS *nodeParams;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &phGraphNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &hGraph, sizeof(CUgraph)) < 0 ||
      rpc_read(conn, &dependencies, sizeof(const CUgraphNode *)) < 0 ||
      rpc_read(conn, &numDependencies, sizeof(size_t)) < 0 ||
      rpc_read(conn, &nodeParams, sizeof(const CUDA_KERNEL_NODE_PARAMS *)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphAddKernelNode_v2(
      &phGraphNode, hGraph, dependencies, numDependencies, nodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &phGraphNode, sizeof(CUgraphNode)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphKernelNodeGetParams_v2(conn_t *conn) {
  CUgraphNode hNode;
  CUDA_KERNEL_NODE_PARAMS nodeParams;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &nodeParams, sizeof(CUDA_KERNEL_NODE_PARAMS)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphKernelNodeGetParams_v2(hNode, &nodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &nodeParams, sizeof(CUDA_KERNEL_NODE_PARAMS)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphKernelNodeSetParams_v2(conn_t *conn) {
  CUgraphNode hNode;
  const CUDA_KERNEL_NODE_PARAMS *nodeParams;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &nodeParams, sizeof(const CUDA_KERNEL_NODE_PARAMS *)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphKernelNodeSetParams_v2(hNode, nodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphAddMemcpyNode(conn_t *conn) {
  CUgraphNode phGraphNode;
  CUgraph hGraph;
  const CUgraphNode *dependencies;
  size_t numDependencies;
  const CUDA_MEMCPY3D *copyParams;
  CUcontext ctx;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &phGraphNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &hGraph, sizeof(CUgraph)) < 0 ||
      rpc_read(conn, &dependencies, sizeof(const CUgraphNode *)) < 0 ||
      rpc_read(conn, &numDependencies, sizeof(size_t)) < 0 ||
      rpc_read(conn, &copyParams, sizeof(const CUDA_MEMCPY3D *)) < 0 ||
      rpc_read(conn, &ctx, sizeof(CUcontext)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphAddMemcpyNode(
      &phGraphNode, hGraph, dependencies, numDependencies, copyParams, ctx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &phGraphNode, sizeof(CUgraphNode)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphMemcpyNodeGetParams(conn_t *conn) {
  CUgraphNode hNode;
  CUDA_MEMCPY3D nodeParams;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &nodeParams, sizeof(CUDA_MEMCPY3D)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphMemcpyNodeGetParams(hNode, &nodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &nodeParams, sizeof(CUDA_MEMCPY3D)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphMemcpyNodeSetParams(conn_t *conn) {
  CUgraphNode hNode;
  const CUDA_MEMCPY3D *nodeParams;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &nodeParams, sizeof(const CUDA_MEMCPY3D *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphMemcpyNodeSetParams(hNode, nodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphAddMemsetNode(conn_t *conn) {
  CUgraphNode phGraphNode;
  CUgraph hGraph;
  const CUgraphNode *dependencies;
  size_t numDependencies;
  const CUDA_MEMSET_NODE_PARAMS *memsetParams;
  CUcontext ctx;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &phGraphNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &hGraph, sizeof(CUgraph)) < 0 ||
      rpc_read(conn, &dependencies, sizeof(const CUgraphNode *)) < 0 ||
      rpc_read(conn, &numDependencies, sizeof(size_t)) < 0 ||
      rpc_read(conn, &memsetParams, sizeof(const CUDA_MEMSET_NODE_PARAMS *)) <
          0 ||
      rpc_read(conn, &ctx, sizeof(CUcontext)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphAddMemsetNode(
      &phGraphNode, hGraph, dependencies, numDependencies, memsetParams, ctx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &phGraphNode, sizeof(CUgraphNode)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphMemsetNodeGetParams(conn_t *conn) {
  CUgraphNode hNode;
  CUDA_MEMSET_NODE_PARAMS nodeParams;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &nodeParams, sizeof(CUDA_MEMSET_NODE_PARAMS)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphMemsetNodeGetParams(hNode, &nodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &nodeParams, sizeof(CUDA_MEMSET_NODE_PARAMS)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphMemsetNodeSetParams(conn_t *conn) {
  CUgraphNode hNode;
  const CUDA_MEMSET_NODE_PARAMS *nodeParams;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &nodeParams, sizeof(const CUDA_MEMSET_NODE_PARAMS *)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphMemsetNodeSetParams(hNode, nodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphAddHostNode(conn_t *conn) {
  CUgraphNode phGraphNode;
  CUgraph hGraph;
  const CUgraphNode *dependencies;
  size_t numDependencies;
  const CUDA_HOST_NODE_PARAMS *nodeParams;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &phGraphNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &hGraph, sizeof(CUgraph)) < 0 ||
      rpc_read(conn, &dependencies, sizeof(const CUgraphNode *)) < 0 ||
      rpc_read(conn, &numDependencies, sizeof(size_t)) < 0 ||
      rpc_read(conn, &nodeParams, sizeof(const CUDA_HOST_NODE_PARAMS *)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphAddHostNode(
      &phGraphNode, hGraph, dependencies, numDependencies, nodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &phGraphNode, sizeof(CUgraphNode)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphHostNodeGetParams(conn_t *conn) {
  CUgraphNode hNode;
  CUDA_HOST_NODE_PARAMS nodeParams;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &nodeParams, sizeof(CUDA_HOST_NODE_PARAMS)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphHostNodeGetParams(hNode, &nodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &nodeParams, sizeof(CUDA_HOST_NODE_PARAMS)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphHostNodeSetParams(conn_t *conn) {
  CUgraphNode hNode;
  const CUDA_HOST_NODE_PARAMS *nodeParams;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &nodeParams, sizeof(const CUDA_HOST_NODE_PARAMS *)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphHostNodeSetParams(hNode, nodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphAddChildGraphNode(conn_t *conn) {
  CUgraphNode phGraphNode;
  CUgraph hGraph;
  const CUgraphNode *dependencies;
  size_t numDependencies;
  CUgraph childGraph;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &phGraphNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &hGraph, sizeof(CUgraph)) < 0 ||
      rpc_read(conn, &dependencies, sizeof(const CUgraphNode *)) < 0 ||
      rpc_read(conn, &numDependencies, sizeof(size_t)) < 0 ||
      rpc_read(conn, &childGraph, sizeof(CUgraph)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphAddChildGraphNode(
      &phGraphNode, hGraph, dependencies, numDependencies, childGraph);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &phGraphNode, sizeof(CUgraphNode)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphChildGraphNodeGetGraph(conn_t *conn) {
  CUgraphNode hNode;
  CUgraph phGraph;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &phGraph, sizeof(CUgraph)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphChildGraphNodeGetGraph(hNode, &phGraph);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &phGraph, sizeof(CUgraph)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphAddEmptyNode(conn_t *conn) {
  CUgraphNode phGraphNode;
  CUgraph hGraph;
  const CUgraphNode *dependencies;
  size_t numDependencies;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &phGraphNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &hGraph, sizeof(CUgraph)) < 0 ||
      rpc_read(conn, &dependencies, sizeof(const CUgraphNode *)) < 0 ||
      rpc_read(conn, &numDependencies, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuGraphAddEmptyNode(&phGraphNode, hGraph, dependencies, numDependencies);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &phGraphNode, sizeof(CUgraphNode)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphAddEventRecordNode(conn_t *conn) {
  CUgraphNode phGraphNode;
  CUgraph hGraph;
  const CUgraphNode *dependencies;
  size_t numDependencies;
  CUevent event;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &phGraphNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &hGraph, sizeof(CUgraph)) < 0 ||
      rpc_read(conn, &dependencies, sizeof(const CUgraphNode *)) < 0 ||
      rpc_read(conn, &numDependencies, sizeof(size_t)) < 0 ||
      rpc_read(conn, &event, sizeof(CUevent)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphAddEventRecordNode(
      &phGraphNode, hGraph, dependencies, numDependencies, event);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &phGraphNode, sizeof(CUgraphNode)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphEventRecordNodeGetEvent(conn_t *conn) {
  CUgraphNode hNode;
  CUevent event_out;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &event_out, sizeof(CUevent)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphEventRecordNodeGetEvent(hNode, &event_out);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &event_out, sizeof(CUevent)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphEventRecordNodeSetEvent(conn_t *conn) {
  CUgraphNode hNode;
  CUevent event;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &event, sizeof(CUevent)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphEventRecordNodeSetEvent(hNode, event);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphAddEventWaitNode(conn_t *conn) {
  CUgraphNode phGraphNode;
  CUgraph hGraph;
  const CUgraphNode *dependencies;
  size_t numDependencies;
  CUevent event;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &phGraphNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &hGraph, sizeof(CUgraph)) < 0 ||
      rpc_read(conn, &dependencies, sizeof(const CUgraphNode *)) < 0 ||
      rpc_read(conn, &numDependencies, sizeof(size_t)) < 0 ||
      rpc_read(conn, &event, sizeof(CUevent)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphAddEventWaitNode(
      &phGraphNode, hGraph, dependencies, numDependencies, event);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &phGraphNode, sizeof(CUgraphNode)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphEventWaitNodeGetEvent(conn_t *conn) {
  CUgraphNode hNode;
  CUevent event_out;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &event_out, sizeof(CUevent)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphEventWaitNodeGetEvent(hNode, &event_out);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &event_out, sizeof(CUevent)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphEventWaitNodeSetEvent(conn_t *conn) {
  CUgraphNode hNode;
  CUevent event;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &event, sizeof(CUevent)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphEventWaitNodeSetEvent(hNode, event);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphAddExternalSemaphoresSignalNode(conn_t *conn) {
  CUgraphNode phGraphNode;
  CUgraph hGraph;
  const CUgraphNode *dependencies;
  size_t numDependencies;
  const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS *nodeParams;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &phGraphNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &hGraph, sizeof(CUgraph)) < 0 ||
      rpc_read(conn, &dependencies, sizeof(const CUgraphNode *)) < 0 ||
      rpc_read(conn, &numDependencies, sizeof(size_t)) < 0 ||
      rpc_read(conn, &nodeParams,
               sizeof(const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS *)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphAddExternalSemaphoresSignalNode(
      &phGraphNode, hGraph, dependencies, numDependencies, nodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &phGraphNode, sizeof(CUgraphNode)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphExternalSemaphoresSignalNodeGetParams(conn_t *conn) {
  CUgraphNode hNode;
  CUDA_EXT_SEM_SIGNAL_NODE_PARAMS params_out;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &params_out, sizeof(CUDA_EXT_SEM_SIGNAL_NODE_PARAMS)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuGraphExternalSemaphoresSignalNodeGetParams(hNode, &params_out);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &params_out, sizeof(CUDA_EXT_SEM_SIGNAL_NODE_PARAMS)) <
          0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphExternalSemaphoresSignalNodeSetParams(conn_t *conn) {
  CUgraphNode hNode;
  const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS *nodeParams;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &nodeParams,
               sizeof(const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS *)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuGraphExternalSemaphoresSignalNodeSetParams(hNode, nodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphAddExternalSemaphoresWaitNode(conn_t *conn) {
  CUgraphNode phGraphNode;
  CUgraph hGraph;
  const CUgraphNode *dependencies;
  size_t numDependencies;
  const CUDA_EXT_SEM_WAIT_NODE_PARAMS *nodeParams;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &phGraphNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &hGraph, sizeof(CUgraph)) < 0 ||
      rpc_read(conn, &dependencies, sizeof(const CUgraphNode *)) < 0 ||
      rpc_read(conn, &numDependencies, sizeof(size_t)) < 0 ||
      rpc_read(conn, &nodeParams,
               sizeof(const CUDA_EXT_SEM_WAIT_NODE_PARAMS *)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphAddExternalSemaphoresWaitNode(
      &phGraphNode, hGraph, dependencies, numDependencies, nodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &phGraphNode, sizeof(CUgraphNode)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphExternalSemaphoresWaitNodeGetParams(conn_t *conn) {
  CUgraphNode hNode;
  CUDA_EXT_SEM_WAIT_NODE_PARAMS params_out;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &params_out, sizeof(CUDA_EXT_SEM_WAIT_NODE_PARAMS)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuGraphExternalSemaphoresWaitNodeGetParams(hNode, &params_out);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &params_out, sizeof(CUDA_EXT_SEM_WAIT_NODE_PARAMS)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphExternalSemaphoresWaitNodeSetParams(conn_t *conn) {
  CUgraphNode hNode;
  const CUDA_EXT_SEM_WAIT_NODE_PARAMS *nodeParams;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &nodeParams,
               sizeof(const CUDA_EXT_SEM_WAIT_NODE_PARAMS *)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuGraphExternalSemaphoresWaitNodeSetParams(hNode, nodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphAddBatchMemOpNode(conn_t *conn) {
  CUgraphNode phGraphNode;
  CUgraph hGraph;
  const CUgraphNode *dependencies;
  size_t numDependencies;
  const CUDA_BATCH_MEM_OP_NODE_PARAMS *nodeParams;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &phGraphNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &hGraph, sizeof(CUgraph)) < 0 ||
      rpc_read(conn, &dependencies, sizeof(const CUgraphNode *)) < 0 ||
      rpc_read(conn, &numDependencies, sizeof(size_t)) < 0 ||
      rpc_read(conn, &nodeParams,
               sizeof(const CUDA_BATCH_MEM_OP_NODE_PARAMS *)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphAddBatchMemOpNode(
      &phGraphNode, hGraph, dependencies, numDependencies, nodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &phGraphNode, sizeof(CUgraphNode)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphBatchMemOpNodeGetParams(conn_t *conn) {
  CUgraphNode hNode;
  CUDA_BATCH_MEM_OP_NODE_PARAMS nodeParams_out;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &nodeParams_out, sizeof(CUDA_BATCH_MEM_OP_NODE_PARAMS)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuGraphBatchMemOpNodeGetParams(hNode, &nodeParams_out);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &nodeParams_out, sizeof(CUDA_BATCH_MEM_OP_NODE_PARAMS)) <
          0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphBatchMemOpNodeSetParams(conn_t *conn) {
  CUgraphNode hNode;
  const CUDA_BATCH_MEM_OP_NODE_PARAMS *nodeParams;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &nodeParams,
               sizeof(const CUDA_BATCH_MEM_OP_NODE_PARAMS *)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphBatchMemOpNodeSetParams(hNode, nodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphExecBatchMemOpNodeSetParams(conn_t *conn) {
  CUgraphExec hGraphExec;
  CUgraphNode hNode;
  const CUDA_BATCH_MEM_OP_NODE_PARAMS *nodeParams;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hGraphExec, sizeof(CUgraphExec)) < 0 ||
      rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &nodeParams,
               sizeof(const CUDA_BATCH_MEM_OP_NODE_PARAMS *)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuGraphExecBatchMemOpNodeSetParams(hGraphExec, hNode, nodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphAddMemAllocNode(conn_t *conn) {
  CUgraphNode phGraphNode;
  CUgraph hGraph;
  const CUgraphNode *dependencies;
  size_t numDependencies;
  CUDA_MEM_ALLOC_NODE_PARAMS nodeParams;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &phGraphNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &hGraph, sizeof(CUgraph)) < 0 ||
      rpc_read(conn, &dependencies, sizeof(const CUgraphNode *)) < 0 ||
      rpc_read(conn, &numDependencies, sizeof(size_t)) < 0 ||
      rpc_read(conn, &nodeParams, sizeof(CUDA_MEM_ALLOC_NODE_PARAMS)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphAddMemAllocNode(
      &phGraphNode, hGraph, dependencies, numDependencies, &nodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &phGraphNode, sizeof(CUgraphNode)) < 0 ||
      rpc_write(conn, &nodeParams, sizeof(CUDA_MEM_ALLOC_NODE_PARAMS)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphMemAllocNodeGetParams(conn_t *conn) {
  CUgraphNode hNode;
  CUDA_MEM_ALLOC_NODE_PARAMS params_out;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &params_out, sizeof(CUDA_MEM_ALLOC_NODE_PARAMS)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphMemAllocNodeGetParams(hNode, &params_out);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &params_out, sizeof(CUDA_MEM_ALLOC_NODE_PARAMS)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphAddMemFreeNode(conn_t *conn) {
  CUgraphNode phGraphNode;
  CUgraph hGraph;
  size_t numDependencies;
  CUgraphNode *dependencies;
  CUdeviceptr dptr;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &phGraphNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &hGraph, sizeof(CUgraph)) < 0 ||
      rpc_read(conn, &numDependencies, sizeof(size_t)) < 0 ||
      rpc_read(conn, dependencies,
               numDependencies * sizeof(const CUgraphNode)) < 0 ||
      rpc_read(conn, &dptr, sizeof(CUdeviceptr)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphAddMemFreeNode(
      &phGraphNode, hGraph, dependencies, numDependencies, dptr);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &phGraphNode, sizeof(CUgraphNode)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphMemFreeNodeGetParams(conn_t *conn) {
  CUgraphNode hNode;
  CUdeviceptr dptr_out;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &dptr_out, sizeof(CUdeviceptr)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphMemFreeNodeGetParams(hNode, &dptr_out);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &dptr_out, sizeof(CUdeviceptr)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuDeviceGraphMemTrim(conn_t *conn) {
  CUdevice device;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(CUdevice)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuDeviceGraphMemTrim(device);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphClone(conn_t *conn) {
  CUgraph phGraphClone;
  CUgraph originalGraph;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &phGraphClone, sizeof(CUgraph)) < 0 ||
      rpc_read(conn, &originalGraph, sizeof(CUgraph)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphClone(&phGraphClone, originalGraph);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &phGraphClone, sizeof(CUgraph)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphNodeFindInClone(conn_t *conn) {
  CUgraphNode phNode;
  CUgraphNode hOriginalNode;
  CUgraph hClonedGraph;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &phNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &hOriginalNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &hClonedGraph, sizeof(CUgraph)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuGraphNodeFindInClone(&phNode, hOriginalNode, hClonedGraph);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &phNode, sizeof(CUgraphNode)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphNodeGetType(conn_t *conn) {
  CUgraphNode hNode;
  CUgraphNodeType type;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &type, sizeof(CUgraphNodeType)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphNodeGetType(hNode, &type);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &type, sizeof(CUgraphNodeType)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphGetNodes(conn_t *conn) {
  CUgraph hGraph;
  CUgraphNode nodes;
  size_t numNodes;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hGraph, sizeof(CUgraph)) < 0 ||
      rpc_read(conn, &nodes, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &numNodes, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphGetNodes(hGraph, &nodes, &numNodes);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &nodes, sizeof(CUgraphNode)) < 0 ||
      rpc_write(conn, &numNodes, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphGetRootNodes(conn_t *conn) {
  CUgraph hGraph;
  CUgraphNode rootNodes;
  size_t numRootNodes;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hGraph, sizeof(CUgraph)) < 0 ||
      rpc_read(conn, &rootNodes, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &numRootNodes, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuGraphGetRootNodes(hGraph, &rootNodes, &numRootNodes);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &rootNodes, sizeof(CUgraphNode)) < 0 ||
      rpc_write(conn, &numRootNodes, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphGetEdges(conn_t *conn) {
  CUgraph hGraph;
  CUgraphNode from;
  CUgraphNode to;
  size_t numEdges;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hGraph, sizeof(CUgraph)) < 0 ||
      rpc_read(conn, &from, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &to, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &numEdges, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphGetEdges(hGraph, &from, &to, &numEdges);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &from, sizeof(CUgraphNode)) < 0 ||
      rpc_write(conn, &to, sizeof(CUgraphNode)) < 0 ||
      rpc_write(conn, &numEdges, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphNodeGetDependencies(conn_t *conn) {
  CUgraphNode hNode;
  CUgraphNode dependencies;
  size_t numDependencies;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &dependencies, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &numDependencies, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuGraphNodeGetDependencies(hNode, &dependencies, &numDependencies);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &dependencies, sizeof(CUgraphNode)) < 0 ||
      rpc_write(conn, &numDependencies, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphNodeGetDependentNodes(conn_t *conn) {
  CUgraphNode hNode;
  CUgraphNode dependentNodes;
  size_t numDependentNodes;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &dependentNodes, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &numDependentNodes, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuGraphNodeGetDependentNodes(hNode, &dependentNodes, &numDependentNodes);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &dependentNodes, sizeof(CUgraphNode)) < 0 ||
      rpc_write(conn, &numDependentNodes, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphAddDependencies(conn_t *conn) {
  CUgraph hGraph;
  const CUgraphNode *from;
  const CUgraphNode *to;
  size_t numDependencies;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hGraph, sizeof(CUgraph)) < 0 ||
      rpc_read(conn, &from, sizeof(const CUgraphNode *)) < 0 ||
      rpc_read(conn, &to, sizeof(const CUgraphNode *)) < 0 ||
      rpc_read(conn, &numDependencies, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuGraphAddDependencies(hGraph, from, to, numDependencies);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphRemoveDependencies(conn_t *conn) {
  CUgraph hGraph;
  const CUgraphNode *from;
  const CUgraphNode *to;
  size_t numDependencies;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hGraph, sizeof(CUgraph)) < 0 ||
      rpc_read(conn, &from, sizeof(const CUgraphNode *)) < 0 ||
      rpc_read(conn, &to, sizeof(const CUgraphNode *)) < 0 ||
      rpc_read(conn, &numDependencies, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuGraphRemoveDependencies(hGraph, from, to, numDependencies);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphDestroyNode(conn_t *conn) {
  CUgraphNode hNode;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphDestroyNode(hNode);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphInstantiateWithFlags(conn_t *conn) {
  CUgraphExec phGraphExec;
  CUgraph hGraph;
  unsigned long long flags;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &phGraphExec, sizeof(CUgraphExec)) < 0 ||
      rpc_read(conn, &hGraph, sizeof(CUgraph)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned long long)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuGraphInstantiateWithFlags(&phGraphExec, hGraph, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &phGraphExec, sizeof(CUgraphExec)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphInstantiateWithParams(conn_t *conn) {
  CUgraphExec phGraphExec;
  CUgraph hGraph;
  CUDA_GRAPH_INSTANTIATE_PARAMS instantiateParams;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &phGraphExec, sizeof(CUgraphExec)) < 0 ||
      rpc_read(conn, &hGraph, sizeof(CUgraph)) < 0 ||
      rpc_read(conn, &instantiateParams,
               sizeof(CUDA_GRAPH_INSTANTIATE_PARAMS)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuGraphInstantiateWithParams(&phGraphExec, hGraph, &instantiateParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &phGraphExec, sizeof(CUgraphExec)) < 0 ||
      rpc_write(conn, &instantiateParams,
                sizeof(CUDA_GRAPH_INSTANTIATE_PARAMS)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphExecGetFlags(conn_t *conn) {
  CUgraphExec hGraphExec;
  cuuint64_t flags;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hGraphExec, sizeof(CUgraphExec)) < 0 ||
      rpc_read(conn, &flags, sizeof(cuuint64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphExecGetFlags(hGraphExec, &flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &flags, sizeof(cuuint64_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphExecKernelNodeSetParams_v2(conn_t *conn) {
  CUgraphExec hGraphExec;
  CUgraphNode hNode;
  const CUDA_KERNEL_NODE_PARAMS *nodeParams;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hGraphExec, sizeof(CUgraphExec)) < 0 ||
      rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &nodeParams, sizeof(const CUDA_KERNEL_NODE_PARAMS *)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuGraphExecKernelNodeSetParams_v2(hGraphExec, hNode, nodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphExecMemcpyNodeSetParams(conn_t *conn) {
  CUgraphExec hGraphExec;
  CUgraphNode hNode;
  const CUDA_MEMCPY3D *copyParams;
  CUcontext ctx;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hGraphExec, sizeof(CUgraphExec)) < 0 ||
      rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &copyParams, sizeof(const CUDA_MEMCPY3D *)) < 0 ||
      rpc_read(conn, &ctx, sizeof(CUcontext)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuGraphExecMemcpyNodeSetParams(hGraphExec, hNode, copyParams, ctx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphExecMemsetNodeSetParams(conn_t *conn) {
  CUgraphExec hGraphExec;
  CUgraphNode hNode;
  const CUDA_MEMSET_NODE_PARAMS *memsetParams;
  CUcontext ctx;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hGraphExec, sizeof(CUgraphExec)) < 0 ||
      rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &memsetParams, sizeof(const CUDA_MEMSET_NODE_PARAMS *)) <
          0 ||
      rpc_read(conn, &ctx, sizeof(CUcontext)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuGraphExecMemsetNodeSetParams(hGraphExec, hNode, memsetParams, ctx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphExecHostNodeSetParams(conn_t *conn) {
  CUgraphExec hGraphExec;
  CUgraphNode hNode;
  const CUDA_HOST_NODE_PARAMS *nodeParams;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hGraphExec, sizeof(CUgraphExec)) < 0 ||
      rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &nodeParams, sizeof(const CUDA_HOST_NODE_PARAMS *)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuGraphExecHostNodeSetParams(hGraphExec, hNode, nodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphExecChildGraphNodeSetParams(conn_t *conn) {
  CUgraphExec hGraphExec;
  CUgraphNode hNode;
  CUgraph childGraph;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hGraphExec, sizeof(CUgraphExec)) < 0 ||
      rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &childGraph, sizeof(CUgraph)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuGraphExecChildGraphNodeSetParams(hGraphExec, hNode, childGraph);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphExecEventRecordNodeSetEvent(conn_t *conn) {
  CUgraphExec hGraphExec;
  CUgraphNode hNode;
  CUevent event;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hGraphExec, sizeof(CUgraphExec)) < 0 ||
      rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &event, sizeof(CUevent)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuGraphExecEventRecordNodeSetEvent(hGraphExec, hNode, event);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphExecEventWaitNodeSetEvent(conn_t *conn) {
  CUgraphExec hGraphExec;
  CUgraphNode hNode;
  CUevent event;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hGraphExec, sizeof(CUgraphExec)) < 0 ||
      rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &event, sizeof(CUevent)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuGraphExecEventWaitNodeSetEvent(hGraphExec, hNode, event);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphExecExternalSemaphoresSignalNodeSetParams(conn_t *conn) {
  CUgraphExec hGraphExec;
  CUgraphNode hNode;
  const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS *nodeParams;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hGraphExec, sizeof(CUgraphExec)) < 0 ||
      rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &nodeParams,
               sizeof(const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS *)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphExecExternalSemaphoresSignalNodeSetParams(
      hGraphExec, hNode, nodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphExecExternalSemaphoresWaitNodeSetParams(conn_t *conn) {
  CUgraphExec hGraphExec;
  CUgraphNode hNode;
  const CUDA_EXT_SEM_WAIT_NODE_PARAMS *nodeParams;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hGraphExec, sizeof(CUgraphExec)) < 0 ||
      rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &nodeParams,
               sizeof(const CUDA_EXT_SEM_WAIT_NODE_PARAMS *)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphExecExternalSemaphoresWaitNodeSetParams(
      hGraphExec, hNode, nodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphNodeSetEnabled(conn_t *conn) {
  CUgraphExec hGraphExec;
  CUgraphNode hNode;
  unsigned int isEnabled;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hGraphExec, sizeof(CUgraphExec)) < 0 ||
      rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &isEnabled, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphNodeSetEnabled(hGraphExec, hNode, isEnabled);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphNodeGetEnabled(conn_t *conn) {
  CUgraphExec hGraphExec;
  CUgraphNode hNode;
  unsigned int isEnabled;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hGraphExec, sizeof(CUgraphExec)) < 0 ||
      rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &isEnabled, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphNodeGetEnabled(hGraphExec, hNode, &isEnabled);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &isEnabled, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphUpload(conn_t *conn) {
  CUgraphExec hGraphExec;
  CUstream hStream;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hGraphExec, sizeof(CUgraphExec)) < 0 ||
      rpc_read(conn, &hStream, sizeof(CUstream)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphUpload(hGraphExec, hStream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphLaunch(conn_t *conn) {
  CUgraphExec hGraphExec;
  CUstream hStream;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hGraphExec, sizeof(CUgraphExec)) < 0 ||
      rpc_read(conn, &hStream, sizeof(CUstream)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphLaunch(hGraphExec, hStream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphExecDestroy(conn_t *conn) {
  CUgraphExec hGraphExec;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hGraphExec, sizeof(CUgraphExec)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphExecDestroy(hGraphExec);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphDestroy(conn_t *conn) {
  CUgraph hGraph;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hGraph, sizeof(CUgraph)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphDestroy(hGraph);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphExecUpdate_v2(conn_t *conn) {
  CUgraphExec hGraphExec;
  CUgraph hGraph;
  CUgraphExecUpdateResultInfo resultInfo;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hGraphExec, sizeof(CUgraphExec)) < 0 ||
      rpc_read(conn, &hGraph, sizeof(CUgraph)) < 0 ||
      rpc_read(conn, &resultInfo, sizeof(CUgraphExecUpdateResultInfo)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuGraphExecUpdate_v2(hGraphExec, hGraph, &resultInfo);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &resultInfo, sizeof(CUgraphExecUpdateResultInfo)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphKernelNodeCopyAttributes(conn_t *conn) {
  CUgraphNode dst;
  CUgraphNode src;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dst, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &src, sizeof(CUgraphNode)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphKernelNodeCopyAttributes(dst, src);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphKernelNodeGetAttribute(conn_t *conn) {
  CUgraphNode hNode;
  CUkernelNodeAttrID attr;
  CUkernelNodeAttrValue value_out;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &attr, sizeof(CUkernelNodeAttrID)) < 0 ||
      rpc_read(conn, &value_out, sizeof(CUkernelNodeAttrValue)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuGraphKernelNodeGetAttribute(hNode, attr, &value_out);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &value_out, sizeof(CUkernelNodeAttrValue)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphKernelNodeSetAttribute(conn_t *conn) {
  CUgraphNode hNode;
  CUkernelNodeAttrID attr;
  const CUkernelNodeAttrValue *value;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hNode, sizeof(CUgraphNode)) < 0 ||
      rpc_read(conn, &attr, sizeof(CUkernelNodeAttrID)) < 0 ||
      rpc_read(conn, &value, sizeof(const CUkernelNodeAttrValue *)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphKernelNodeSetAttribute(hNode, attr, value);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphDebugDotPrint(conn_t *conn) {
  CUgraph hGraph;
  const char *path;
  unsigned int flags;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hGraph, sizeof(CUgraph)) < 0 ||
      rpc_read(conn, &path, sizeof(const char *)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphDebugDotPrint(hGraph, path, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuUserObjectRetain(conn_t *conn) {
  CUuserObject object;
  unsigned int count;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &object, sizeof(CUuserObject)) < 0 ||
      rpc_read(conn, &count, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuUserObjectRetain(object, count);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuUserObjectRelease(conn_t *conn) {
  CUuserObject object;
  unsigned int count;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &object, sizeof(CUuserObject)) < 0 ||
      rpc_read(conn, &count, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuUserObjectRelease(object, count);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphRetainUserObject(conn_t *conn) {
  CUgraph graph;
  CUuserObject object;
  unsigned int count;
  unsigned int flags;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &graph, sizeof(CUgraph)) < 0 ||
      rpc_read(conn, &object, sizeof(CUuserObject)) < 0 ||
      rpc_read(conn, &count, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphRetainUserObject(graph, object, count, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphReleaseUserObject(conn_t *conn) {
  CUgraph graph;
  CUuserObject object;
  unsigned int count;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &graph, sizeof(CUgraph)) < 0 ||
      rpc_read(conn, &object, sizeof(CUuserObject)) < 0 ||
      rpc_read(conn, &count, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphReleaseUserObject(graph, object, count);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuOccupancyMaxActiveBlocksPerMultiprocessor(conn_t *conn) {
  int numBlocks;
  CUfunction func;
  int blockSize;
  size_t dynamicSMemSize;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &numBlocks, sizeof(int)) < 0 ||
      rpc_read(conn, &func, sizeof(CUfunction)) < 0 ||
      rpc_read(conn, &blockSize, sizeof(int)) < 0 ||
      rpc_read(conn, &dynamicSMemSize, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuOccupancyMaxActiveBlocksPerMultiprocessor(
      &numBlocks, func, blockSize, dynamicSMemSize);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &numBlocks, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(conn_t *conn) {
  int numBlocks;
  CUfunction func;
  int blockSize;
  size_t dynamicSMemSize;
  unsigned int flags;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &numBlocks, sizeof(int)) < 0 ||
      rpc_read(conn, &func, sizeof(CUfunction)) < 0 ||
      rpc_read(conn, &blockSize, sizeof(int)) < 0 ||
      rpc_read(conn, &dynamicSMemSize, sizeof(size_t)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
      &numBlocks, func, blockSize, dynamicSMemSize, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &numBlocks, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuOccupancyAvailableDynamicSMemPerBlock(conn_t *conn) {
  size_t dynamicSmemSize;
  CUfunction func;
  int numBlocks;
  int blockSize;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &dynamicSmemSize, sizeof(size_t)) < 0 ||
      rpc_read(conn, &func, sizeof(CUfunction)) < 0 ||
      rpc_read(conn, &numBlocks, sizeof(int)) < 0 ||
      rpc_read(conn, &blockSize, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuOccupancyAvailableDynamicSMemPerBlock(
      &dynamicSmemSize, func, numBlocks, blockSize);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &dynamicSmemSize, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuOccupancyMaxPotentialClusterSize(conn_t *conn) {
  int clusterSize;
  CUfunction func;
  const CUlaunchConfig *config;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &clusterSize, sizeof(int)) < 0 ||
      rpc_read(conn, &func, sizeof(CUfunction)) < 0 ||
      rpc_read(conn, &config, sizeof(const CUlaunchConfig *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuOccupancyMaxPotentialClusterSize(&clusterSize, func, config);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &clusterSize, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuOccupancyMaxActiveClusters(conn_t *conn) {
  int numClusters;
  CUfunction func;
  const CUlaunchConfig *config;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &numClusters, sizeof(int)) < 0 ||
      rpc_read(conn, &func, sizeof(CUfunction)) < 0 ||
      rpc_read(conn, &config, sizeof(const CUlaunchConfig *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuOccupancyMaxActiveClusters(&numClusters, func, config);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &numClusters, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuTexRefSetArray(conn_t *conn) {
  CUtexref hTexRef;
  CUarray hArray;
  unsigned int Flags;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hTexRef, sizeof(CUtexref)) < 0 ||
      rpc_read(conn, &hArray, sizeof(CUarray)) < 0 ||
      rpc_read(conn, &Flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuTexRefSetArray(hTexRef, hArray, Flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuTexRefSetMipmappedArray(conn_t *conn) {
  CUtexref hTexRef;
  CUmipmappedArray hMipmappedArray;
  unsigned int Flags;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hTexRef, sizeof(CUtexref)) < 0 ||
      rpc_read(conn, &hMipmappedArray, sizeof(CUmipmappedArray)) < 0 ||
      rpc_read(conn, &Flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuTexRefSetMipmappedArray(hTexRef, hMipmappedArray, Flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuTexRefSetAddress_v2(conn_t *conn) {
  size_t ByteOffset;
  CUtexref hTexRef;
  CUdeviceptr dptr;
  size_t bytes;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &ByteOffset, sizeof(size_t)) < 0 ||
      rpc_read(conn, &hTexRef, sizeof(CUtexref)) < 0 ||
      rpc_read(conn, &dptr, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &bytes, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuTexRefSetAddress_v2(&ByteOffset, hTexRef, dptr, bytes);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &ByteOffset, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuTexRefSetAddress2D_v3(conn_t *conn) {
  CUtexref hTexRef;
  const CUDA_ARRAY_DESCRIPTOR *desc;
  CUdeviceptr dptr;
  size_t Pitch;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hTexRef, sizeof(CUtexref)) < 0 ||
      rpc_read(conn, &desc, sizeof(const CUDA_ARRAY_DESCRIPTOR *)) < 0 ||
      rpc_read(conn, &dptr, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &Pitch, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuTexRefSetAddress2D_v3(hTexRef, desc, dptr, Pitch);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuTexRefSetFormat(conn_t *conn) {
  CUtexref hTexRef;
  CUarray_format fmt;
  int NumPackedComponents;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hTexRef, sizeof(CUtexref)) < 0 ||
      rpc_read(conn, &fmt, sizeof(CUarray_format)) < 0 ||
      rpc_read(conn, &NumPackedComponents, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuTexRefSetFormat(hTexRef, fmt, NumPackedComponents);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuTexRefSetAddressMode(conn_t *conn) {
  CUtexref hTexRef;
  int dim;
  CUaddress_mode am;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hTexRef, sizeof(CUtexref)) < 0 ||
      rpc_read(conn, &dim, sizeof(int)) < 0 ||
      rpc_read(conn, &am, sizeof(CUaddress_mode)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuTexRefSetAddressMode(hTexRef, dim, am);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuTexRefSetFilterMode(conn_t *conn) {
  CUtexref hTexRef;
  CUfilter_mode fm;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hTexRef, sizeof(CUtexref)) < 0 ||
      rpc_read(conn, &fm, sizeof(CUfilter_mode)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuTexRefSetFilterMode(hTexRef, fm);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuTexRefSetMipmapFilterMode(conn_t *conn) {
  CUtexref hTexRef;
  CUfilter_mode fm;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hTexRef, sizeof(CUtexref)) < 0 ||
      rpc_read(conn, &fm, sizeof(CUfilter_mode)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuTexRefSetMipmapFilterMode(hTexRef, fm);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuTexRefSetMipmapLevelBias(conn_t *conn) {
  CUtexref hTexRef;
  float bias;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hTexRef, sizeof(CUtexref)) < 0 ||
      rpc_read(conn, &bias, sizeof(float)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuTexRefSetMipmapLevelBias(hTexRef, bias);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuTexRefSetMipmapLevelClamp(conn_t *conn) {
  CUtexref hTexRef;
  float minMipmapLevelClamp;
  float maxMipmapLevelClamp;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hTexRef, sizeof(CUtexref)) < 0 ||
      rpc_read(conn, &minMipmapLevelClamp, sizeof(float)) < 0 ||
      rpc_read(conn, &maxMipmapLevelClamp, sizeof(float)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuTexRefSetMipmapLevelClamp(
      hTexRef, minMipmapLevelClamp, maxMipmapLevelClamp);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuTexRefSetMaxAnisotropy(conn_t *conn) {
  CUtexref hTexRef;
  unsigned int maxAniso;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hTexRef, sizeof(CUtexref)) < 0 ||
      rpc_read(conn, &maxAniso, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuTexRefSetMaxAnisotropy(hTexRef, maxAniso);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuTexRefSetBorderColor(conn_t *conn) {
  CUtexref hTexRef;
  float pBorderColor;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hTexRef, sizeof(CUtexref)) < 0 ||
      rpc_read(conn, &pBorderColor, sizeof(float)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuTexRefSetBorderColor(hTexRef, &pBorderColor);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pBorderColor, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuTexRefSetFlags(conn_t *conn) {
  CUtexref hTexRef;
  unsigned int Flags;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hTexRef, sizeof(CUtexref)) < 0 ||
      rpc_read(conn, &Flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuTexRefSetFlags(hTexRef, Flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuTexRefGetAddress_v2(conn_t *conn) {
  CUdeviceptr pdptr;
  CUtexref hTexRef;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pdptr, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &hTexRef, sizeof(CUtexref)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuTexRefGetAddress_v2(&pdptr, hTexRef);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pdptr, sizeof(CUdeviceptr)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuTexRefGetArray(conn_t *conn) {
  CUarray phArray;
  CUtexref hTexRef;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &phArray, sizeof(CUarray)) < 0 ||
      rpc_read(conn, &hTexRef, sizeof(CUtexref)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuTexRefGetArray(&phArray, hTexRef);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &phArray, sizeof(CUarray)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuTexRefGetMipmappedArray(conn_t *conn) {
  CUmipmappedArray phMipmappedArray;
  CUtexref hTexRef;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &phMipmappedArray, sizeof(CUmipmappedArray)) < 0 ||
      rpc_read(conn, &hTexRef, sizeof(CUtexref)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuTexRefGetMipmappedArray(&phMipmappedArray, hTexRef);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &phMipmappedArray, sizeof(CUmipmappedArray)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuTexRefGetAddressMode(conn_t *conn) {
  CUaddress_mode pam;
  CUtexref hTexRef;
  int dim;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pam, sizeof(CUaddress_mode)) < 0 ||
      rpc_read(conn, &hTexRef, sizeof(CUtexref)) < 0 ||
      rpc_read(conn, &dim, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuTexRefGetAddressMode(&pam, hTexRef, dim);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pam, sizeof(CUaddress_mode)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuTexRefGetFilterMode(conn_t *conn) {
  CUfilter_mode pfm;
  CUtexref hTexRef;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pfm, sizeof(CUfilter_mode)) < 0 ||
      rpc_read(conn, &hTexRef, sizeof(CUtexref)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuTexRefGetFilterMode(&pfm, hTexRef);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pfm, sizeof(CUfilter_mode)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuTexRefGetFormat(conn_t *conn) {
  CUarray_format pFormat;
  int pNumChannels;
  CUtexref hTexRef;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pFormat, sizeof(CUarray_format)) < 0 ||
      rpc_read(conn, &pNumChannels, sizeof(int)) < 0 ||
      rpc_read(conn, &hTexRef, sizeof(CUtexref)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuTexRefGetFormat(&pFormat, &pNumChannels, hTexRef);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pFormat, sizeof(CUarray_format)) < 0 ||
      rpc_write(conn, &pNumChannels, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuTexRefGetMipmapFilterMode(conn_t *conn) {
  CUfilter_mode pfm;
  CUtexref hTexRef;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pfm, sizeof(CUfilter_mode)) < 0 ||
      rpc_read(conn, &hTexRef, sizeof(CUtexref)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuTexRefGetMipmapFilterMode(&pfm, hTexRef);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pfm, sizeof(CUfilter_mode)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuTexRefGetMipmapLevelBias(conn_t *conn) {
  float pbias;
  CUtexref hTexRef;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pbias, sizeof(float)) < 0 ||
      rpc_read(conn, &hTexRef, sizeof(CUtexref)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuTexRefGetMipmapLevelBias(&pbias, hTexRef);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pbias, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuTexRefGetMipmapLevelClamp(conn_t *conn) {
  float pminMipmapLevelClamp;
  float pmaxMipmapLevelClamp;
  CUtexref hTexRef;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pminMipmapLevelClamp, sizeof(float)) < 0 ||
      rpc_read(conn, &pmaxMipmapLevelClamp, sizeof(float)) < 0 ||
      rpc_read(conn, &hTexRef, sizeof(CUtexref)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuTexRefGetMipmapLevelClamp(
      &pminMipmapLevelClamp, &pmaxMipmapLevelClamp, hTexRef);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pminMipmapLevelClamp, sizeof(float)) < 0 ||
      rpc_write(conn, &pmaxMipmapLevelClamp, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuTexRefGetMaxAnisotropy(conn_t *conn) {
  int pmaxAniso;
  CUtexref hTexRef;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pmaxAniso, sizeof(int)) < 0 ||
      rpc_read(conn, &hTexRef, sizeof(CUtexref)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuTexRefGetMaxAnisotropy(&pmaxAniso, hTexRef);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pmaxAniso, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuTexRefGetBorderColor(conn_t *conn) {
  float pBorderColor;
  CUtexref hTexRef;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pBorderColor, sizeof(float)) < 0 ||
      rpc_read(conn, &hTexRef, sizeof(CUtexref)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuTexRefGetBorderColor(&pBorderColor, hTexRef);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pBorderColor, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuTexRefGetFlags(conn_t *conn) {
  unsigned int pFlags;
  CUtexref hTexRef;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pFlags, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &hTexRef, sizeof(CUtexref)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuTexRefGetFlags(&pFlags, hTexRef);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pFlags, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuTexRefCreate(conn_t *conn) {
  CUtexref pTexRef;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pTexRef, sizeof(CUtexref)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuTexRefCreate(&pTexRef);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pTexRef, sizeof(CUtexref)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuTexRefDestroy(conn_t *conn) {
  CUtexref hTexRef;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hTexRef, sizeof(CUtexref)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuTexRefDestroy(hTexRef);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuSurfRefSetArray(conn_t *conn) {
  CUsurfref hSurfRef;
  CUarray hArray;
  unsigned int Flags;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &hSurfRef, sizeof(CUsurfref)) < 0 ||
      rpc_read(conn, &hArray, sizeof(CUarray)) < 0 ||
      rpc_read(conn, &Flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuSurfRefSetArray(hSurfRef, hArray, Flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuSurfRefGetArray(conn_t *conn) {
  CUarray phArray;
  CUsurfref hSurfRef;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &phArray, sizeof(CUarray)) < 0 ||
      rpc_read(conn, &hSurfRef, sizeof(CUsurfref)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuSurfRefGetArray(&phArray, hSurfRef);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &phArray, sizeof(CUarray)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuTexObjectCreate(conn_t *conn) {
  CUtexObject pTexObject;
  const CUDA_RESOURCE_DESC *pResDesc;
  const CUDA_TEXTURE_DESC *pTexDesc;
  const CUDA_RESOURCE_VIEW_DESC *pResViewDesc;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pTexObject, sizeof(CUtexObject)) < 0 ||
      rpc_read(conn, &pResDesc, sizeof(const CUDA_RESOURCE_DESC *)) < 0 ||
      rpc_read(conn, &pTexDesc, sizeof(const CUDA_TEXTURE_DESC *)) < 0 ||
      rpc_read(conn, &pResViewDesc, sizeof(const CUDA_RESOURCE_VIEW_DESC *)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuTexObjectCreate(&pTexObject, pResDesc, pTexDesc, pResViewDesc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pTexObject, sizeof(CUtexObject)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuTexObjectDestroy(conn_t *conn) {
  CUtexObject texObject;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &texObject, sizeof(CUtexObject)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuTexObjectDestroy(texObject);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuTexObjectGetResourceDesc(conn_t *conn) {
  CUDA_RESOURCE_DESC pResDesc;
  CUtexObject texObject;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pResDesc, sizeof(CUDA_RESOURCE_DESC)) < 0 ||
      rpc_read(conn, &texObject, sizeof(CUtexObject)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuTexObjectGetResourceDesc(&pResDesc, texObject);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pResDesc, sizeof(CUDA_RESOURCE_DESC)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuTexObjectGetTextureDesc(conn_t *conn) {
  CUDA_TEXTURE_DESC pTexDesc;
  CUtexObject texObject;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pTexDesc, sizeof(CUDA_TEXTURE_DESC)) < 0 ||
      rpc_read(conn, &texObject, sizeof(CUtexObject)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuTexObjectGetTextureDesc(&pTexDesc, texObject);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pTexDesc, sizeof(CUDA_TEXTURE_DESC)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuTexObjectGetResourceViewDesc(conn_t *conn) {
  CUDA_RESOURCE_VIEW_DESC pResViewDesc;
  CUtexObject texObject;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pResViewDesc, sizeof(CUDA_RESOURCE_VIEW_DESC)) < 0 ||
      rpc_read(conn, &texObject, sizeof(CUtexObject)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuTexObjectGetResourceViewDesc(&pResViewDesc, texObject);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pResViewDesc, sizeof(CUDA_RESOURCE_VIEW_DESC)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuSurfObjectCreate(conn_t *conn) {
  CUsurfObject pSurfObject;
  const CUDA_RESOURCE_DESC *pResDesc;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pSurfObject, sizeof(CUsurfObject)) < 0 ||
      rpc_read(conn, &pResDesc, sizeof(const CUDA_RESOURCE_DESC *)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuSurfObjectCreate(&pSurfObject, pResDesc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pSurfObject, sizeof(CUsurfObject)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuSurfObjectDestroy(conn_t *conn) {
  CUsurfObject surfObject;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &surfObject, sizeof(CUsurfObject)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuSurfObjectDestroy(surfObject);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuSurfObjectGetResourceDesc(conn_t *conn) {
  CUDA_RESOURCE_DESC pResDesc;
  CUsurfObject surfObject;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pResDesc, sizeof(CUDA_RESOURCE_DESC)) < 0 ||
      rpc_read(conn, &surfObject, sizeof(CUsurfObject)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuSurfObjectGetResourceDesc(&pResDesc, surfObject);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pResDesc, sizeof(CUDA_RESOURCE_DESC)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuDeviceCanAccessPeer(conn_t *conn) {
  int canAccessPeer;
  CUdevice dev;
  CUdevice peerDev;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &canAccessPeer, sizeof(int)) < 0 ||
      rpc_read(conn, &dev, sizeof(CUdevice)) < 0 ||
      rpc_read(conn, &peerDev, sizeof(CUdevice)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuDeviceCanAccessPeer(&canAccessPeer, dev, peerDev);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &canAccessPeer, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuCtxEnablePeerAccess(conn_t *conn) {
  CUcontext peerContext;
  unsigned int Flags;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &peerContext, sizeof(CUcontext)) < 0 ||
      rpc_read(conn, &Flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuCtxEnablePeerAccess(peerContext, Flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuCtxDisablePeerAccess(conn_t *conn) {
  CUcontext peerContext;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &peerContext, sizeof(CUcontext)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuCtxDisablePeerAccess(peerContext);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuDeviceGetP2PAttribute(conn_t *conn) {
  int value;
  CUdevice_P2PAttribute attrib;
  CUdevice srcDevice;
  CUdevice dstDevice;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &value, sizeof(int)) < 0 ||
      rpc_read(conn, &attrib, sizeof(CUdevice_P2PAttribute)) < 0 ||
      rpc_read(conn, &srcDevice, sizeof(CUdevice)) < 0 ||
      rpc_read(conn, &dstDevice, sizeof(CUdevice)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuDeviceGetP2PAttribute(&value, attrib, srcDevice, dstDevice);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &value, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphicsUnregisterResource(conn_t *conn) {
  CUgraphicsResource resource;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &resource, sizeof(CUgraphicsResource)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphicsUnregisterResource(resource);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphicsSubResourceGetMappedArray(conn_t *conn) {
  CUarray pArray;
  CUgraphicsResource resource;
  unsigned int arrayIndex;
  unsigned int mipLevel;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pArray, sizeof(CUarray)) < 0 ||
      rpc_read(conn, &resource, sizeof(CUgraphicsResource)) < 0 ||
      rpc_read(conn, &arrayIndex, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &mipLevel, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphicsSubResourceGetMappedArray(
      &pArray, resource, arrayIndex, mipLevel);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pArray, sizeof(CUarray)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphicsResourceGetMappedMipmappedArray(conn_t *conn) {
  CUmipmappedArray pMipmappedArray;
  CUgraphicsResource resource;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pMipmappedArray, sizeof(CUmipmappedArray)) < 0 ||
      rpc_read(conn, &resource, sizeof(CUgraphicsResource)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuGraphicsResourceGetMappedMipmappedArray(&pMipmappedArray, resource);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pMipmappedArray, sizeof(CUmipmappedArray)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphicsResourceGetMappedPointer_v2(conn_t *conn) {
  CUdeviceptr pDevPtr;
  size_t pSize;
  CUgraphicsResource resource;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &pDevPtr, sizeof(CUdeviceptr)) < 0 ||
      rpc_read(conn, &pSize, sizeof(size_t)) < 0 ||
      rpc_read(conn, &resource, sizeof(CUgraphicsResource)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cuGraphicsResourceGetMappedPointer_v2(&pDevPtr, &pSize, resource);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pDevPtr, sizeof(CUdeviceptr)) < 0 ||
      rpc_write(conn, &pSize, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphicsResourceSetMapFlags_v2(conn_t *conn) {
  CUgraphicsResource resource;
  unsigned int flags;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &resource, sizeof(CUgraphicsResource)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphicsResourceSetMapFlags_v2(resource, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphicsMapResources(conn_t *conn) {
  unsigned int count;
  CUgraphicsResource resources;
  CUstream hStream;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &count, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &resources, sizeof(CUgraphicsResource)) < 0 ||
      rpc_read(conn, &hStream, sizeof(CUstream)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphicsMapResources(count, &resources, hStream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &resources, sizeof(CUgraphicsResource)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cuGraphicsUnmapResources(conn_t *conn) {
  unsigned int count;
  CUgraphicsResource resources;
  CUstream hStream;
  int request_id;
  CUresult scuda_intercept_result;
  if (rpc_read(conn, &count, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &resources, sizeof(CUgraphicsResource)) < 0 ||
      rpc_read(conn, &hStream, sizeof(CUstream)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cuGraphicsUnmapResources(count, &resources, hStream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &resources, sizeof(CUgraphicsResource)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(CUresult)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaDeviceReset(conn_t *conn) {
  int request_id;
  cudaError_t scuda_intercept_result;
  if (false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaDeviceReset();

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaDeviceSynchronize(conn_t *conn) {
  int request_id;
  cudaError_t scuda_intercept_result;
  if (false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaDeviceSynchronize();

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaDeviceSetLimit(conn_t *conn) {
  enum cudaLimit limit;
  size_t value;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &limit, sizeof(enum cudaLimit)) < 0 ||
      rpc_read(conn, &value, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaDeviceSetLimit(limit, value);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaDeviceGetLimit(conn_t *conn) {
  size_t pValue;
  enum cudaLimit limit;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pValue, sizeof(size_t)) < 0 ||
      rpc_read(conn, &limit, sizeof(enum cudaLimit)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaDeviceGetLimit(&pValue, limit);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pValue, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaDeviceGetTexture1DLinearMaxWidth(conn_t *conn) {
  size_t maxWidthInElements;
  const struct cudaChannelFormatDesc *fmtDesc;
  int device;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &maxWidthInElements, sizeof(size_t)) < 0 ||
      rpc_read(conn, &fmtDesc, sizeof(const struct cudaChannelFormatDesc *)) <
          0 ||
      rpc_read(conn, &device, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaDeviceGetTexture1DLinearMaxWidth(
      &maxWidthInElements, fmtDesc, device);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &maxWidthInElements, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaDeviceGetCacheConfig(conn_t *conn) {
  enum cudaFuncCache pCacheConfig;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pCacheConfig, sizeof(enum cudaFuncCache)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaDeviceGetCacheConfig(&pCacheConfig);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pCacheConfig, sizeof(enum cudaFuncCache)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaDeviceGetStreamPriorityRange(conn_t *conn) {
  int leastPriority;
  int greatestPriority;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &leastPriority, sizeof(int)) < 0 ||
      rpc_read(conn, &greatestPriority, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaDeviceGetStreamPriorityRange(&leastPriority, &greatestPriority);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &leastPriority, sizeof(int)) < 0 ||
      rpc_write(conn, &greatestPriority, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaDeviceSetCacheConfig(conn_t *conn) {
  enum cudaFuncCache cacheConfig;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &cacheConfig, sizeof(enum cudaFuncCache)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaDeviceSetCacheConfig(cacheConfig);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaDeviceGetSharedMemConfig(conn_t *conn) {
  enum cudaSharedMemConfig pConfig;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pConfig, sizeof(enum cudaSharedMemConfig)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaDeviceGetSharedMemConfig(&pConfig);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pConfig, sizeof(enum cudaSharedMemConfig)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaDeviceSetSharedMemConfig(conn_t *conn) {
  enum cudaSharedMemConfig config;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &config, sizeof(enum cudaSharedMemConfig)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaDeviceSetSharedMemConfig(config);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaDeviceGetByPCIBusId(conn_t *conn) {
  int device;
  const char *pciBusId;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(int)) < 0 ||
      rpc_read(conn, &pciBusId, sizeof(const char *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaDeviceGetByPCIBusId(&device, pciBusId);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &device, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaDeviceGetPCIBusId(conn_t *conn) {
  char pciBusId;
  int len;
  int device;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pciBusId, sizeof(char)) < 0 ||
      rpc_read(conn, &len, sizeof(int)) < 0 ||
      rpc_read(conn, &device, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaDeviceGetPCIBusId(&pciBusId, len, device);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pciBusId, sizeof(char)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaIpcGetEventHandle(conn_t *conn) {
  cudaIpcEventHandle_t handle;
  cudaEvent_t event;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cudaIpcEventHandle_t)) < 0 ||
      rpc_read(conn, &event, sizeof(cudaEvent_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaIpcGetEventHandle(&handle, event);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &handle, sizeof(cudaIpcEventHandle_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaIpcOpenEventHandle(conn_t *conn) {
  cudaEvent_t event;
  cudaIpcEventHandle_t handle;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &event, sizeof(cudaEvent_t)) < 0 ||
      rpc_read(conn, &handle, sizeof(cudaIpcEventHandle_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaIpcOpenEventHandle(&event, handle);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &event, sizeof(cudaEvent_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaIpcOpenMemHandle(conn_t *conn) {
  void *devPtr;
  cudaIpcMemHandle_t handle;
  unsigned int flags;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &devPtr, sizeof(void *)) < 0 ||
      rpc_read(conn, &handle, sizeof(cudaIpcMemHandle_t)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaIpcOpenMemHandle(&devPtr, handle, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &devPtr, sizeof(void *)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaDeviceFlushGPUDirectRDMAWrites(conn_t *conn) {
  enum cudaFlushGPUDirectRDMAWritesTarget target;
  enum cudaFlushGPUDirectRDMAWritesScope scope;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &target, sizeof(enum cudaFlushGPUDirectRDMAWritesTarget)) <
          0 ||
      rpc_read(conn, &scope, sizeof(enum cudaFlushGPUDirectRDMAWritesScope)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaDeviceFlushGPUDirectRDMAWrites(target, scope);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaThreadExit(conn_t *conn) {
  int request_id;
  cudaError_t scuda_intercept_result;
  if (false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaThreadExit();

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaThreadSynchronize(conn_t *conn) {
  int request_id;
  cudaError_t scuda_intercept_result;
  if (false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaThreadSynchronize();

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaThreadSetLimit(conn_t *conn) {
  enum cudaLimit limit;
  size_t value;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &limit, sizeof(enum cudaLimit)) < 0 ||
      rpc_read(conn, &value, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaThreadSetLimit(limit, value);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaThreadGetLimit(conn_t *conn) {
  size_t pValue;
  enum cudaLimit limit;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pValue, sizeof(size_t)) < 0 ||
      rpc_read(conn, &limit, sizeof(enum cudaLimit)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaThreadGetLimit(&pValue, limit);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pValue, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaThreadGetCacheConfig(conn_t *conn) {
  enum cudaFuncCache pCacheConfig;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pCacheConfig, sizeof(enum cudaFuncCache)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaThreadGetCacheConfig(&pCacheConfig);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pCacheConfig, sizeof(enum cudaFuncCache)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaThreadSetCacheConfig(conn_t *conn) {
  enum cudaFuncCache cacheConfig;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &cacheConfig, sizeof(enum cudaFuncCache)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaThreadSetCacheConfig(cacheConfig);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGetLastError(conn_t *conn) {
  int request_id;
  cudaError_t scuda_intercept_result;
  if (false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGetLastError();

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaPeekAtLastError(conn_t *conn) {
  int request_id;
  cudaError_t scuda_intercept_result;
  if (false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaPeekAtLastError();

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGetDeviceCount(conn_t *conn) {
  int count;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGetDeviceCount(&count);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &count, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGetDeviceProperties_v2(conn_t *conn) {
  struct cudaDeviceProp prop;
  int device;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGetDeviceProperties_v2(&prop, device);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &prop, sizeof(struct cudaDeviceProp)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaDeviceGetAttribute(conn_t *conn) {
  int value;
  enum cudaDeviceAttr attr;
  int device;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &value, sizeof(int)) < 0 ||
      rpc_read(conn, &attr, sizeof(enum cudaDeviceAttr)) < 0 ||
      rpc_read(conn, &device, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaDeviceGetAttribute(&value, attr, device);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &value, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaDeviceGetDefaultMemPool(conn_t *conn) {
  cudaMemPool_t memPool;
  int device;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &memPool, sizeof(cudaMemPool_t)) < 0 ||
      rpc_read(conn, &device, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaDeviceGetDefaultMemPool(&memPool, device);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &memPool, sizeof(cudaMemPool_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaDeviceSetMemPool(conn_t *conn) {
  int device;
  cudaMemPool_t memPool;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(int)) < 0 ||
      rpc_read(conn, &memPool, sizeof(cudaMemPool_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaDeviceSetMemPool(device, memPool);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaDeviceGetMemPool(conn_t *conn) {
  cudaMemPool_t memPool;
  int device;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &memPool, sizeof(cudaMemPool_t)) < 0 ||
      rpc_read(conn, &device, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaDeviceGetMemPool(&memPool, device);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &memPool, sizeof(cudaMemPool_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaDeviceGetP2PAttribute(conn_t *conn) {
  int value;
  enum cudaDeviceP2PAttr attr;
  int srcDevice;
  int dstDevice;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &value, sizeof(int)) < 0 ||
      rpc_read(conn, &attr, sizeof(enum cudaDeviceP2PAttr)) < 0 ||
      rpc_read(conn, &srcDevice, sizeof(int)) < 0 ||
      rpc_read(conn, &dstDevice, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaDeviceGetP2PAttribute(&value, attr, srcDevice, dstDevice);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &value, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaChooseDevice(conn_t *conn) {
  int device;
  const struct cudaDeviceProp *prop;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(int)) < 0 ||
      rpc_read(conn, &prop, sizeof(const struct cudaDeviceProp *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaChooseDevice(&device, prop);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &device, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaInitDevice(conn_t *conn) {
  int device;
  unsigned int deviceFlags;
  unsigned int flags;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(int)) < 0 ||
      rpc_read(conn, &deviceFlags, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaInitDevice(device, deviceFlags, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaSetDevice(conn_t *conn) {
  int device;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaSetDevice(device);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGetDevice(conn_t *conn) {
  int device;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGetDevice(&device);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &device, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaSetValidDevices(conn_t *conn) {
  int device_arr;
  int len;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &device_arr, sizeof(int)) < 0 ||
      rpc_read(conn, &len, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaSetValidDevices(&device_arr, len);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &device_arr, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaSetDeviceFlags(conn_t *conn) {
  unsigned int flags;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaSetDeviceFlags(flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGetDeviceFlags(conn_t *conn) {
  unsigned int flags;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGetDeviceFlags(&flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &flags, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaStreamCreate(conn_t *conn) {
  cudaStream_t pStream;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pStream, sizeof(cudaStream_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaStreamCreate(&pStream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pStream, sizeof(cudaStream_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaStreamCreateWithFlags(conn_t *conn) {
  cudaStream_t pStream;
  unsigned int flags;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pStream, sizeof(cudaStream_t)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaStreamCreateWithFlags(&pStream, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pStream, sizeof(cudaStream_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaStreamCreateWithPriority(conn_t *conn) {
  cudaStream_t pStream;
  unsigned int flags;
  int priority;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pStream, sizeof(cudaStream_t)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &priority, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaStreamCreateWithPriority(&pStream, flags, priority);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pStream, sizeof(cudaStream_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaStreamGetPriority(conn_t *conn) {
  cudaStream_t hStream;
  int priority;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &hStream, sizeof(cudaStream_t)) < 0 ||
      rpc_read(conn, &priority, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaStreamGetPriority(hStream, &priority);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &priority, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaStreamGetFlags(conn_t *conn) {
  cudaStream_t hStream;
  unsigned int flags;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &hStream, sizeof(cudaStream_t)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaStreamGetFlags(hStream, &flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &flags, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaStreamGetId(conn_t *conn) {
  cudaStream_t hStream;
  unsigned long long streamId;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &hStream, sizeof(cudaStream_t)) < 0 ||
      rpc_read(conn, &streamId, sizeof(unsigned long long)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaStreamGetId(hStream, &streamId);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &streamId, sizeof(unsigned long long)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaCtxResetPersistingL2Cache(conn_t *conn) {
  int request_id;
  cudaError_t scuda_intercept_result;
  if (false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaCtxResetPersistingL2Cache();

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaStreamCopyAttributes(conn_t *conn) {
  cudaStream_t dst;
  cudaStream_t src;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &dst, sizeof(cudaStream_t)) < 0 ||
      rpc_read(conn, &src, sizeof(cudaStream_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaStreamCopyAttributes(dst, src);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaStreamGetAttribute(conn_t *conn) {
  cudaStream_t hStream;
  cudaLaunchAttributeID attr;
  cudaLaunchAttributeValue value_out;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &hStream, sizeof(cudaStream_t)) < 0 ||
      rpc_read(conn, &attr, sizeof(cudaLaunchAttributeID)) < 0 ||
      rpc_read(conn, &value_out, sizeof(cudaLaunchAttributeValue)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaStreamGetAttribute(hStream, attr, &value_out);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &value_out, sizeof(cudaLaunchAttributeValue)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaStreamSetAttribute(conn_t *conn) {
  cudaStream_t hStream;
  cudaLaunchAttributeID attr;
  const cudaLaunchAttributeValue *value;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &hStream, sizeof(cudaStream_t)) < 0 ||
      rpc_read(conn, &attr, sizeof(cudaLaunchAttributeID)) < 0 ||
      rpc_read(conn, &value, sizeof(const cudaLaunchAttributeValue *)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaStreamSetAttribute(hStream, attr, value);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaStreamDestroy(conn_t *conn) {
  cudaStream_t stream;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &stream, sizeof(cudaStream_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaStreamDestroy(stream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaStreamWaitEvent(conn_t *conn) {
  cudaStream_t stream;
  cudaEvent_t event;
  unsigned int flags;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &stream, sizeof(cudaStream_t)) < 0 ||
      rpc_read(conn, &event, sizeof(cudaEvent_t)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaStreamWaitEvent(stream, event, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaStreamSynchronize(conn_t *conn) {
  cudaStream_t stream;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &stream, sizeof(cudaStream_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaStreamSynchronize(stream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaStreamQuery(conn_t *conn) {
  cudaStream_t stream;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &stream, sizeof(cudaStream_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaStreamQuery(stream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaStreamBeginCapture(conn_t *conn) {
  cudaStream_t stream;
  enum cudaStreamCaptureMode mode;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &stream, sizeof(cudaStream_t)) < 0 ||
      rpc_read(conn, &mode, sizeof(enum cudaStreamCaptureMode)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaStreamBeginCapture(stream, mode);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaThreadExchangeStreamCaptureMode(conn_t *conn) {
  enum cudaStreamCaptureMode mode;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &mode, sizeof(enum cudaStreamCaptureMode)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaThreadExchangeStreamCaptureMode(&mode);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &mode, sizeof(enum cudaStreamCaptureMode)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaStreamEndCapture(conn_t *conn) {
  cudaStream_t stream;
  cudaGraph_t pGraph;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &stream, sizeof(cudaStream_t)) < 0 ||
      rpc_read(conn, &pGraph, sizeof(cudaGraph_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaStreamEndCapture(stream, &pGraph);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pGraph, sizeof(cudaGraph_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaStreamIsCapturing(conn_t *conn) {
  cudaStream_t stream;
  enum cudaStreamCaptureStatus pCaptureStatus;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &stream, sizeof(cudaStream_t)) < 0 ||
      rpc_read(conn, &pCaptureStatus, sizeof(enum cudaStreamCaptureStatus)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaStreamIsCapturing(stream, &pCaptureStatus);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pCaptureStatus, sizeof(enum cudaStreamCaptureStatus)) <
          0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaStreamGetCaptureInfo_v2(conn_t *conn) {
  cudaStream_t stream;
  enum cudaStreamCaptureStatus captureStatus_out;
  unsigned long long id_out;
  cudaGraph_t graph_out;
  size_t numDependencies_out;
  const cudaGraphNode_t **dependencies_out;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &stream, sizeof(cudaStream_t)) < 0 || false)
    goto ERROR_0;
  dependencies_out = (const cudaGraphNode_t **)malloc(
      numDependencies_out * sizeof(const cudaGraphNode_t *));
  if (false)
    goto ERROR_1;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_1;
  scuda_intercept_result = cudaStreamGetCaptureInfo_v2(
      stream, &captureStatus_out, &id_out, &graph_out, dependencies_out,
      &numDependencies_out);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &captureStatus_out,
                sizeof(enum cudaStreamCaptureStatus)) < 0 ||
      rpc_write(conn, &id_out, sizeof(unsigned long long)) < 0 ||
      rpc_write(conn, &graph_out, sizeof(cudaGraph_t)) < 0 ||
      rpc_write(conn, &numDependencies_out, sizeof(size_t)) < 0 ||
      rpc_write(conn, dependencies_out,
                numDependencies_out * sizeof(const cudaGraphNode_t *)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_1;

  return 0;
ERROR_1:
  free((void *)dependencies_out);
ERROR_0:
  return -1;
}

int handle_cudaStreamUpdateCaptureDependencies(conn_t *conn) {
  cudaStream_t stream;
  size_t numDependencies;
  cudaGraphNode_t *dependencies;
  unsigned int flags;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &stream, sizeof(cudaStream_t)) < 0 ||
      rpc_read(conn, &numDependencies, sizeof(size_t)) < 0 ||
      rpc_read(conn, dependencies, numDependencies * sizeof(cudaGraphNode_t)) <
          0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaStreamUpdateCaptureDependencies(
      stream, dependencies, numDependencies, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaEventCreate(conn_t *conn) {
  cudaEvent_t event;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaEventCreate(&event);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &event, sizeof(cudaEvent_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaEventCreateWithFlags(conn_t *conn) {
  cudaEvent_t event;
  unsigned int flags;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaEventCreateWithFlags(&event, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &event, sizeof(cudaEvent_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaEventRecord(conn_t *conn) {
  cudaEvent_t event;
  cudaStream_t stream;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &event, sizeof(cudaEvent_t)) < 0 ||
      rpc_read(conn, &stream, sizeof(cudaStream_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaEventRecord(event, stream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaEventRecordWithFlags(conn_t *conn) {
  cudaEvent_t event;
  cudaStream_t stream;
  unsigned int flags;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &event, sizeof(cudaEvent_t)) < 0 ||
      rpc_read(conn, &stream, sizeof(cudaStream_t)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaEventRecordWithFlags(event, stream, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaEventQuery(conn_t *conn) {
  cudaEvent_t event;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &event, sizeof(cudaEvent_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaEventQuery(event);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaEventSynchronize(conn_t *conn) {
  cudaEvent_t event;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &event, sizeof(cudaEvent_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaEventSynchronize(event);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaEventDestroy(conn_t *conn) {
  cudaEvent_t event;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &event, sizeof(cudaEvent_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaEventDestroy(event);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaEventElapsedTime(conn_t *conn) {
  float ms;
  cudaEvent_t start;
  cudaEvent_t end;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &start, sizeof(cudaEvent_t)) < 0 ||
      rpc_read(conn, &end, sizeof(cudaEvent_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaEventElapsedTime(&ms, start, end);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &ms, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaExternalMemoryGetMappedBuffer(conn_t *conn) {
  void *devPtr;
  cudaExternalMemory_t extMem;
  const struct cudaExternalMemoryBufferDesc *bufferDesc;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &devPtr, sizeof(void *)) < 0 ||
      rpc_read(conn, &extMem, sizeof(cudaExternalMemory_t)) < 0 ||
      rpc_read(conn, &bufferDesc,
               sizeof(const struct cudaExternalMemoryBufferDesc *)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaExternalMemoryGetMappedBuffer(&devPtr, extMem, bufferDesc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &devPtr, sizeof(void *)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaExternalMemoryGetMappedMipmappedArray(conn_t *conn) {
  cudaMipmappedArray_t mipmap;
  cudaExternalMemory_t extMem;
  const struct cudaExternalMemoryMipmappedArrayDesc *mipmapDesc;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &mipmap, sizeof(cudaMipmappedArray_t)) < 0 ||
      rpc_read(conn, &extMem, sizeof(cudaExternalMemory_t)) < 0 ||
      rpc_read(conn, &mipmapDesc,
               sizeof(const struct cudaExternalMemoryMipmappedArrayDesc *)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaExternalMemoryGetMappedMipmappedArray(&mipmap, extMem, mipmapDesc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &mipmap, sizeof(cudaMipmappedArray_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaDestroyExternalMemory(conn_t *conn) {
  cudaExternalMemory_t extMem;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &extMem, sizeof(cudaExternalMemory_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaDestroyExternalMemory(extMem);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaImportExternalSemaphore(conn_t *conn) {
  cudaExternalSemaphore_t extSem_out;
  const struct cudaExternalSemaphoreHandleDesc *semHandleDesc;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &extSem_out, sizeof(cudaExternalSemaphore_t)) < 0 ||
      rpc_read(conn, &semHandleDesc,
               sizeof(const struct cudaExternalSemaphoreHandleDesc *)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaImportExternalSemaphore(&extSem_out, semHandleDesc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &extSem_out, sizeof(cudaExternalSemaphore_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaSignalExternalSemaphoresAsync_v2(conn_t *conn) {
  const cudaExternalSemaphore_t *extSemArray;
  const struct cudaExternalSemaphoreSignalParams *paramsArray;
  unsigned int numExtSems;
  cudaStream_t stream;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &extSemArray, sizeof(const cudaExternalSemaphore_t *)) <
          0 ||
      rpc_read(conn, &paramsArray,
               sizeof(const struct cudaExternalSemaphoreSignalParams *)) < 0 ||
      rpc_read(conn, &numExtSems, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &stream, sizeof(cudaStream_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaSignalExternalSemaphoresAsync_v2(
      extSemArray, paramsArray, numExtSems, stream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaWaitExternalSemaphoresAsync_v2(conn_t *conn) {
  const cudaExternalSemaphore_t *extSemArray;
  const struct cudaExternalSemaphoreWaitParams *paramsArray;
  unsigned int numExtSems;
  cudaStream_t stream;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &extSemArray, sizeof(const cudaExternalSemaphore_t *)) <
          0 ||
      rpc_read(conn, &paramsArray,
               sizeof(const struct cudaExternalSemaphoreWaitParams *)) < 0 ||
      rpc_read(conn, &numExtSems, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &stream, sizeof(cudaStream_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaWaitExternalSemaphoresAsync_v2(
      extSemArray, paramsArray, numExtSems, stream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaDestroyExternalSemaphore(conn_t *conn) {
  cudaExternalSemaphore_t extSem;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &extSem, sizeof(cudaExternalSemaphore_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaDestroyExternalSemaphore(extSem);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaLaunchKernelExC(conn_t *conn) {
  const cudaLaunchConfig_t *config;
  const void *func;
  void *args;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &config, sizeof(const cudaLaunchConfig_t *)) < 0 ||
      rpc_read(conn, &func, sizeof(const void *)) < 0 ||
      rpc_read(conn, &args, sizeof(void *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaLaunchKernelExC(config, func, &args);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &args, sizeof(void *)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaLaunchCooperativeKernel(conn_t *conn) {
  const void *func;
  dim3 gridDim;
  dim3 blockDim;
  void *args;
  size_t sharedMem;
  cudaStream_t stream;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &func, sizeof(const void *)) < 0 ||
      rpc_read(conn, &gridDim, sizeof(dim3)) < 0 ||
      rpc_read(conn, &blockDim, sizeof(dim3)) < 0 ||
      rpc_read(conn, &args, sizeof(void *)) < 0 ||
      rpc_read(conn, &sharedMem, sizeof(size_t)) < 0 ||
      rpc_read(conn, &stream, sizeof(cudaStream_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaLaunchCooperativeKernel(
      func, gridDim, blockDim, &args, sharedMem, stream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &args, sizeof(void *)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaLaunchCooperativeKernelMultiDevice(conn_t *conn) {
  struct cudaLaunchParams launchParamsList;
  unsigned int numDevices;
  unsigned int flags;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &launchParamsList, sizeof(struct cudaLaunchParams)) < 0 ||
      rpc_read(conn, &numDevices, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaLaunchCooperativeKernelMultiDevice(
      &launchParamsList, numDevices, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &launchParamsList, sizeof(struct cudaLaunchParams)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaFuncSetCacheConfig(conn_t *conn) {
  const void *func;
  enum cudaFuncCache cacheConfig;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &func, sizeof(const void *)) < 0 ||
      rpc_read(conn, &cacheConfig, sizeof(enum cudaFuncCache)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaFuncSetCacheConfig(func, cacheConfig);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaFuncSetSharedMemConfig(conn_t *conn) {
  const void *func;
  enum cudaSharedMemConfig config;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &func, sizeof(const void *)) < 0 ||
      rpc_read(conn, &config, sizeof(enum cudaSharedMemConfig)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaFuncSetSharedMemConfig(func, config);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaFuncGetAttributes(conn_t *conn) {
  struct cudaFuncAttributes attr;
  const void *func;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &attr, sizeof(struct cudaFuncAttributes)) < 0 ||
      rpc_read(conn, &func, sizeof(const void *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaFuncGetAttributes(&attr, func);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &attr, sizeof(struct cudaFuncAttributes)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaFuncSetAttribute(conn_t *conn) {
  const void *func;
  enum cudaFuncAttribute attr;
  int value;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &func, sizeof(const void *)) < 0 ||
      rpc_read(conn, &attr, sizeof(enum cudaFuncAttribute)) < 0 ||
      rpc_read(conn, &value, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaFuncSetAttribute(func, attr, value);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaSetDoubleForDevice(conn_t *conn) {
  double d;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &d, sizeof(double)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaSetDoubleForDevice(&d);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &d, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaSetDoubleForHost(conn_t *conn) {
  double d;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &d, sizeof(double)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaSetDoubleForHost(&d);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &d, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaOccupancyMaxActiveBlocksPerMultiprocessor(conn_t *conn) {
  int numBlocks;
  const void *func;
  int blockSize;
  size_t dynamicSMemSize;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &numBlocks, sizeof(int)) < 0 ||
      rpc_read(conn, &func, sizeof(const void *)) < 0 ||
      rpc_read(conn, &blockSize, sizeof(int)) < 0 ||
      rpc_read(conn, &dynamicSMemSize, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaOccupancyMaxActiveBlocksPerMultiprocessor(
      &numBlocks, func, blockSize, dynamicSMemSize);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &numBlocks, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaOccupancyAvailableDynamicSMemPerBlock(conn_t *conn) {
  size_t dynamicSmemSize;
  const void *func;
  int numBlocks;
  int blockSize;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &dynamicSmemSize, sizeof(size_t)) < 0 ||
      rpc_read(conn, &func, sizeof(const void *)) < 0 ||
      rpc_read(conn, &numBlocks, sizeof(int)) < 0 ||
      rpc_read(conn, &blockSize, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaOccupancyAvailableDynamicSMemPerBlock(
      &dynamicSmemSize, func, numBlocks, blockSize);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &dynamicSmemSize, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
    conn_t *conn) {
  int numBlocks;
  const void *func;
  int blockSize;
  size_t dynamicSMemSize;
  unsigned int flags;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &numBlocks, sizeof(int)) < 0 ||
      rpc_read(conn, &func, sizeof(const void *)) < 0 ||
      rpc_read(conn, &blockSize, sizeof(int)) < 0 ||
      rpc_read(conn, &dynamicSMemSize, sizeof(size_t)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
          &numBlocks, func, blockSize, dynamicSMemSize, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &numBlocks, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaOccupancyMaxPotentialClusterSize(conn_t *conn) {
  int clusterSize;
  const void *func;
  const cudaLaunchConfig_t *launchConfig;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &clusterSize, sizeof(int)) < 0 ||
      rpc_read(conn, &func, sizeof(const void *)) < 0 ||
      rpc_read(conn, &launchConfig, sizeof(const cudaLaunchConfig_t *)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaOccupancyMaxPotentialClusterSize(&clusterSize, func, launchConfig);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &clusterSize, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaOccupancyMaxActiveClusters(conn_t *conn) {
  int numClusters;
  const void *func;
  const cudaLaunchConfig_t *launchConfig;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &numClusters, sizeof(int)) < 0 ||
      rpc_read(conn, &func, sizeof(const void *)) < 0 ||
      rpc_read(conn, &launchConfig, sizeof(const cudaLaunchConfig_t *)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaOccupancyMaxActiveClusters(&numClusters, func, launchConfig);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &numClusters, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMalloc(conn_t *conn) {
  void *devPtr;
  size_t size;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &size, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaMalloc(&devPtr, size);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &devPtr, sizeof(void *)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMallocHost(conn_t *conn) {
  void *ptr;
  size_t size;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &ptr, sizeof(void *)) < 0 ||
      rpc_read(conn, &size, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaMallocHost(&ptr, size);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &ptr, sizeof(void *)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMallocPitch(conn_t *conn) {
  void *devPtr;
  size_t pitch;
  size_t width;
  size_t height;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &devPtr, sizeof(void *)) < 0 ||
      rpc_read(conn, &pitch, sizeof(size_t)) < 0 ||
      rpc_read(conn, &width, sizeof(size_t)) < 0 ||
      rpc_read(conn, &height, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaMallocPitch(&devPtr, &pitch, width, height);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &devPtr, sizeof(void *)) < 0 ||
      rpc_write(conn, &pitch, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMallocArray(conn_t *conn) {
  cudaArray_t array;
  const struct cudaChannelFormatDesc *desc;
  size_t width;
  size_t height;
  unsigned int flags;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &array, sizeof(cudaArray_t)) < 0 ||
      rpc_read(conn, &desc, sizeof(const struct cudaChannelFormatDesc *)) < 0 ||
      rpc_read(conn, &width, sizeof(size_t)) < 0 ||
      rpc_read(conn, &height, sizeof(size_t)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaMallocArray(&array, desc, width, height, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &array, sizeof(cudaArray_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaFreeHost(conn_t *conn) {
  void *ptr;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &ptr, sizeof(void *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaFreeHost(ptr);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaFreeArray(conn_t *conn) {
  cudaArray_t array;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &array, sizeof(cudaArray_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaFreeArray(array);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaFreeMipmappedArray(conn_t *conn) {
  cudaMipmappedArray_t mipmappedArray;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &mipmappedArray, sizeof(cudaMipmappedArray_t)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaFreeMipmappedArray(mipmappedArray);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaHostAlloc(conn_t *conn) {
  void *pHost;
  size_t size;
  unsigned int flags;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pHost, sizeof(void *)) < 0 ||
      rpc_read(conn, &size, sizeof(size_t)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaHostAlloc(&pHost, size, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pHost, sizeof(void *)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMalloc3D(conn_t *conn) {
  struct cudaPitchedPtr pitchedDevPtr;
  struct cudaExtent extent;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pitchedDevPtr, sizeof(struct cudaPitchedPtr)) < 0 ||
      rpc_read(conn, &extent, sizeof(struct cudaExtent)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaMalloc3D(&pitchedDevPtr, extent);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pitchedDevPtr, sizeof(struct cudaPitchedPtr)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMalloc3DArray(conn_t *conn) {
  cudaArray_t array;
  const struct cudaChannelFormatDesc *desc;
  struct cudaExtent extent;
  unsigned int flags;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &array, sizeof(cudaArray_t)) < 0 ||
      rpc_read(conn, &desc, sizeof(const struct cudaChannelFormatDesc *)) < 0 ||
      rpc_read(conn, &extent, sizeof(struct cudaExtent)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaMalloc3DArray(&array, desc, extent, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &array, sizeof(cudaArray_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMallocMipmappedArray(conn_t *conn) {
  cudaMipmappedArray_t mipmappedArray;
  const struct cudaChannelFormatDesc *desc;
  struct cudaExtent extent;
  unsigned int numLevels;
  unsigned int flags;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &mipmappedArray, sizeof(cudaMipmappedArray_t)) < 0 ||
      rpc_read(conn, &desc, sizeof(const struct cudaChannelFormatDesc *)) < 0 ||
      rpc_read(conn, &extent, sizeof(struct cudaExtent)) < 0 ||
      rpc_read(conn, &numLevels, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaMallocMipmappedArray(&mipmappedArray, desc, extent, numLevels, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &mipmappedArray, sizeof(cudaMipmappedArray_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGetMipmappedArrayLevel(conn_t *conn) {
  cudaArray_t levelArray;
  cudaMipmappedArray_const_t mipmappedArray;
  unsigned int level;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &levelArray, sizeof(cudaArray_t)) < 0 ||
      rpc_read(conn, &mipmappedArray, sizeof(cudaMipmappedArray_const_t)) < 0 ||
      rpc_read(conn, &level, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaGetMipmappedArrayLevel(&levelArray, mipmappedArray, level);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &levelArray, sizeof(cudaArray_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMemcpy3D(conn_t *conn) {
  const struct cudaMemcpy3DParms *p;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &p, sizeof(const struct cudaMemcpy3DParms *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaMemcpy3D(p);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMemcpy3DPeer(conn_t *conn) {
  const struct cudaMemcpy3DPeerParms *p;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &p, sizeof(const struct cudaMemcpy3DPeerParms *)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaMemcpy3DPeer(p);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMemcpy3DAsync(conn_t *conn) {
  const struct cudaMemcpy3DParms *p;
  cudaStream_t stream;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &p, sizeof(const struct cudaMemcpy3DParms *)) < 0 ||
      rpc_read(conn, &stream, sizeof(cudaStream_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaMemcpy3DAsync(p, stream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMemcpy3DPeerAsync(conn_t *conn) {
  const struct cudaMemcpy3DPeerParms *p;
  cudaStream_t stream;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &p, sizeof(const struct cudaMemcpy3DPeerParms *)) < 0 ||
      rpc_read(conn, &stream, sizeof(cudaStream_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaMemcpy3DPeerAsync(p, stream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMemGetInfo(conn_t *conn) {
  size_t free;
  size_t total;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &free, sizeof(size_t)) < 0 ||
      rpc_read(conn, &total, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaMemGetInfo(&free, &total);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &free, sizeof(size_t)) < 0 ||
      rpc_write(conn, &total, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaArrayGetInfo(conn_t *conn) {
  struct cudaChannelFormatDesc desc;
  struct cudaExtent extent;
  unsigned int flags;
  cudaArray_t array;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &desc, sizeof(struct cudaChannelFormatDesc)) < 0 ||
      rpc_read(conn, &extent, sizeof(struct cudaExtent)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &array, sizeof(cudaArray_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaArrayGetInfo(&desc, &extent, &flags, array);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &desc, sizeof(struct cudaChannelFormatDesc)) < 0 ||
      rpc_write(conn, &extent, sizeof(struct cudaExtent)) < 0 ||
      rpc_write(conn, &flags, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaArrayGetPlane(conn_t *conn) {
  cudaArray_t pPlaneArray;
  cudaArray_t hArray;
  unsigned int planeIdx;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pPlaneArray, sizeof(cudaArray_t)) < 0 ||
      rpc_read(conn, &hArray, sizeof(cudaArray_t)) < 0 ||
      rpc_read(conn, &planeIdx, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaArrayGetPlane(&pPlaneArray, hArray, planeIdx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pPlaneArray, sizeof(cudaArray_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaArrayGetMemoryRequirements(conn_t *conn) {
  struct cudaArrayMemoryRequirements memoryRequirements;
  cudaArray_t array;
  int device;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &memoryRequirements,
               sizeof(struct cudaArrayMemoryRequirements)) < 0 ||
      rpc_read(conn, &array, sizeof(cudaArray_t)) < 0 ||
      rpc_read(conn, &device, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaArrayGetMemoryRequirements(&memoryRequirements, array, device);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &memoryRequirements,
                sizeof(struct cudaArrayMemoryRequirements)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMipmappedArrayGetMemoryRequirements(conn_t *conn) {
  struct cudaArrayMemoryRequirements memoryRequirements;
  cudaMipmappedArray_t mipmap;
  int device;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &memoryRequirements,
               sizeof(struct cudaArrayMemoryRequirements)) < 0 ||
      rpc_read(conn, &mipmap, sizeof(cudaMipmappedArray_t)) < 0 ||
      rpc_read(conn, &device, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaMipmappedArrayGetMemoryRequirements(
      &memoryRequirements, mipmap, device);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &memoryRequirements,
                sizeof(struct cudaArrayMemoryRequirements)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaArrayGetSparseProperties(conn_t *conn) {
  struct cudaArraySparseProperties sparseProperties;
  cudaArray_t array;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &sparseProperties,
               sizeof(struct cudaArraySparseProperties)) < 0 ||
      rpc_read(conn, &array, sizeof(cudaArray_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaArrayGetSparseProperties(&sparseProperties, array);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &sparseProperties,
                sizeof(struct cudaArraySparseProperties)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMipmappedArrayGetSparseProperties(conn_t *conn) {
  struct cudaArraySparseProperties sparseProperties;
  cudaMipmappedArray_t mipmap;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &sparseProperties,
               sizeof(struct cudaArraySparseProperties)) < 0 ||
      rpc_read(conn, &mipmap, sizeof(cudaMipmappedArray_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaMipmappedArrayGetSparseProperties(&sparseProperties, mipmap);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &sparseProperties,
                sizeof(struct cudaArraySparseProperties)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMemcpy2DToArray(conn_t *conn) {
  cudaArray_t dst;
  size_t wOffset;
  size_t hOffset;
  const void *src;
  size_t spitch;
  size_t width;
  size_t height;
  enum cudaMemcpyKind kind;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &dst, sizeof(cudaArray_t)) < 0 ||
      rpc_read(conn, &wOffset, sizeof(size_t)) < 0 ||
      rpc_read(conn, &hOffset, sizeof(size_t)) < 0 ||
      rpc_read(conn, &src, sizeof(const void *)) < 0 ||
      rpc_read(conn, &spitch, sizeof(size_t)) < 0 ||
      rpc_read(conn, &width, sizeof(size_t)) < 0 ||
      rpc_read(conn, &height, sizeof(size_t)) < 0 ||
      rpc_read(conn, &kind, sizeof(enum cudaMemcpyKind)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaMemcpy2DToArray(dst, wOffset, hOffset, src,
                                               spitch, width, height, kind);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMemcpy2DArrayToArray(conn_t *conn) {
  cudaArray_t dst;
  size_t wOffsetDst;
  size_t hOffsetDst;
  cudaArray_const_t src;
  size_t wOffsetSrc;
  size_t hOffsetSrc;
  size_t width;
  size_t height;
  enum cudaMemcpyKind kind;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &dst, sizeof(cudaArray_t)) < 0 ||
      rpc_read(conn, &wOffsetDst, sizeof(size_t)) < 0 ||
      rpc_read(conn, &hOffsetDst, sizeof(size_t)) < 0 ||
      rpc_read(conn, &src, sizeof(cudaArray_const_t)) < 0 ||
      rpc_read(conn, &wOffsetSrc, sizeof(size_t)) < 0 ||
      rpc_read(conn, &hOffsetSrc, sizeof(size_t)) < 0 ||
      rpc_read(conn, &width, sizeof(size_t)) < 0 ||
      rpc_read(conn, &height, sizeof(size_t)) < 0 ||
      rpc_read(conn, &kind, sizeof(enum cudaMemcpyKind)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaMemcpy2DArrayToArray(dst, wOffsetDst, hOffsetDst, src, wOffsetSrc,
                               hOffsetSrc, width, height, kind);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMemcpyToSymbol(conn_t *conn) {
  const void *symbol;
  const void *src;
  size_t count;
  size_t offset;
  enum cudaMemcpyKind kind;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &symbol, sizeof(const void *)) < 0 ||
      rpc_read(conn, &src, sizeof(const void *)) < 0 ||
      rpc_read(conn, &count, sizeof(size_t)) < 0 ||
      rpc_read(conn, &offset, sizeof(size_t)) < 0 ||
      rpc_read(conn, &kind, sizeof(enum cudaMemcpyKind)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaMemcpyToSymbol(symbol, src, count, offset, kind);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMemcpy2DToArrayAsync(conn_t *conn) {
  cudaArray_t dst;
  size_t wOffset;
  size_t hOffset;
  const void *src;
  size_t spitch;
  size_t width;
  size_t height;
  enum cudaMemcpyKind kind;
  cudaStream_t stream;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &dst, sizeof(cudaArray_t)) < 0 ||
      rpc_read(conn, &wOffset, sizeof(size_t)) < 0 ||
      rpc_read(conn, &hOffset, sizeof(size_t)) < 0 ||
      rpc_read(conn, &src, sizeof(const void *)) < 0 ||
      rpc_read(conn, &spitch, sizeof(size_t)) < 0 ||
      rpc_read(conn, &width, sizeof(size_t)) < 0 ||
      rpc_read(conn, &height, sizeof(size_t)) < 0 ||
      rpc_read(conn, &kind, sizeof(enum cudaMemcpyKind)) < 0 ||
      rpc_read(conn, &stream, sizeof(cudaStream_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaMemcpy2DToArrayAsync(
      dst, wOffset, hOffset, src, spitch, width, height, kind, stream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMemcpyToSymbolAsync(conn_t *conn) {
  const void *symbol;
  const void *src;
  size_t count;
  size_t offset;
  enum cudaMemcpyKind kind;
  cudaStream_t stream;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &symbol, sizeof(const void *)) < 0 ||
      rpc_read(conn, &src, sizeof(const void *)) < 0 ||
      rpc_read(conn, &count, sizeof(size_t)) < 0 ||
      rpc_read(conn, &offset, sizeof(size_t)) < 0 ||
      rpc_read(conn, &kind, sizeof(enum cudaMemcpyKind)) < 0 ||
      rpc_read(conn, &stream, sizeof(cudaStream_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaMemcpyToSymbolAsync(symbol, src, count, offset, kind, stream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMemset(conn_t *conn) {
  void *devPtr;
  int value;
  size_t count;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &devPtr, sizeof(void *)) < 0 ||
      rpc_read(conn, &value, sizeof(int)) < 0 ||
      rpc_read(conn, &count, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaMemset(devPtr, value, count);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMemset2D(conn_t *conn) {
  void *devPtr;
  size_t pitch;
  int value;
  size_t width;
  size_t height;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &devPtr, sizeof(void *)) < 0 ||
      rpc_read(conn, &pitch, sizeof(size_t)) < 0 ||
      rpc_read(conn, &value, sizeof(int)) < 0 ||
      rpc_read(conn, &width, sizeof(size_t)) < 0 ||
      rpc_read(conn, &height, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaMemset2D(devPtr, pitch, value, width, height);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMemset3D(conn_t *conn) {
  struct cudaPitchedPtr pitchedDevPtr;
  int value;
  struct cudaExtent extent;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pitchedDevPtr, sizeof(struct cudaPitchedPtr)) < 0 ||
      rpc_read(conn, &value, sizeof(int)) < 0 ||
      rpc_read(conn, &extent, sizeof(struct cudaExtent)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaMemset3D(pitchedDevPtr, value, extent);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMemsetAsync(conn_t *conn) {
  void *devPtr;
  int value;
  size_t count;
  cudaStream_t stream;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &devPtr, sizeof(void *)) < 0 ||
      rpc_read(conn, &value, sizeof(int)) < 0 ||
      rpc_read(conn, &count, sizeof(size_t)) < 0 ||
      rpc_read(conn, &stream, sizeof(cudaStream_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaMemsetAsync(devPtr, value, count, stream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMemset2DAsync(conn_t *conn) {
  void *devPtr;
  size_t pitch;
  int value;
  size_t width;
  size_t height;
  cudaStream_t stream;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &devPtr, sizeof(void *)) < 0 ||
      rpc_read(conn, &pitch, sizeof(size_t)) < 0 ||
      rpc_read(conn, &value, sizeof(int)) < 0 ||
      rpc_read(conn, &width, sizeof(size_t)) < 0 ||
      rpc_read(conn, &height, sizeof(size_t)) < 0 ||
      rpc_read(conn, &stream, sizeof(cudaStream_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaMemset2DAsync(devPtr, pitch, value, width, height, stream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMemset3DAsync(conn_t *conn) {
  struct cudaPitchedPtr pitchedDevPtr;
  int value;
  struct cudaExtent extent;
  cudaStream_t stream;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pitchedDevPtr, sizeof(struct cudaPitchedPtr)) < 0 ||
      rpc_read(conn, &value, sizeof(int)) < 0 ||
      rpc_read(conn, &extent, sizeof(struct cudaExtent)) < 0 ||
      rpc_read(conn, &stream, sizeof(cudaStream_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaMemset3DAsync(pitchedDevPtr, value, extent, stream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGetSymbolAddress(conn_t *conn) {
  void *devPtr;
  const void *symbol;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &devPtr, sizeof(void *)) < 0 ||
      rpc_read(conn, &symbol, sizeof(const void *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGetSymbolAddress(&devPtr, symbol);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &devPtr, sizeof(void *)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGetSymbolSize(conn_t *conn) {
  size_t size;
  const void *symbol;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &size, sizeof(size_t)) < 0 ||
      rpc_read(conn, &symbol, sizeof(const void *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGetSymbolSize(&size, symbol);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &size, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMemPrefetchAsync(conn_t *conn) {
  const void *devPtr;
  size_t count;
  int dstDevice;
  cudaStream_t stream;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &devPtr, sizeof(const void *)) < 0 ||
      rpc_read(conn, &count, sizeof(size_t)) < 0 ||
      rpc_read(conn, &dstDevice, sizeof(int)) < 0 ||
      rpc_read(conn, &stream, sizeof(cudaStream_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaMemPrefetchAsync(devPtr, count, dstDevice, stream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMemAdvise(conn_t *conn) {
  const void *devPtr;
  size_t count;
  enum cudaMemoryAdvise advice;
  int device;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &devPtr, sizeof(const void *)) < 0 ||
      rpc_read(conn, &count, sizeof(size_t)) < 0 ||
      rpc_read(conn, &advice, sizeof(enum cudaMemoryAdvise)) < 0 ||
      rpc_read(conn, &device, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaMemAdvise(devPtr, count, advice, device);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMemRangeGetAttributes(conn_t *conn) {
  void *data;
  size_t dataSizes;
  enum cudaMemRangeAttribute attributes;
  size_t numAttributes;
  const void *devPtr;
  size_t count;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &data, sizeof(void *)) < 0 ||
      rpc_read(conn, &dataSizes, sizeof(size_t)) < 0 ||
      rpc_read(conn, &attributes, sizeof(enum cudaMemRangeAttribute)) < 0 ||
      rpc_read(conn, &numAttributes, sizeof(size_t)) < 0 ||
      rpc_read(conn, &devPtr, sizeof(const void *)) < 0 ||
      rpc_read(conn, &count, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaMemRangeGetAttributes(
      &data, &dataSizes, &attributes, numAttributes, devPtr, count);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &data, sizeof(void *)) < 0 ||
      rpc_write(conn, &dataSizes, sizeof(size_t)) < 0 ||
      rpc_write(conn, &attributes, sizeof(enum cudaMemRangeAttribute)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMemcpyToArray(conn_t *conn) {
  cudaArray_t dst;
  size_t wOffset;
  size_t hOffset;
  const void *src;
  size_t count;
  enum cudaMemcpyKind kind;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &dst, sizeof(cudaArray_t)) < 0 ||
      rpc_read(conn, &wOffset, sizeof(size_t)) < 0 ||
      rpc_read(conn, &hOffset, sizeof(size_t)) < 0 ||
      rpc_read(conn, &src, sizeof(const void *)) < 0 ||
      rpc_read(conn, &count, sizeof(size_t)) < 0 ||
      rpc_read(conn, &kind, sizeof(enum cudaMemcpyKind)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaMemcpyToArray(dst, wOffset, hOffset, src, count, kind);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMemcpyArrayToArray(conn_t *conn) {
  cudaArray_t dst;
  size_t wOffsetDst;
  size_t hOffsetDst;
  cudaArray_const_t src;
  size_t wOffsetSrc;
  size_t hOffsetSrc;
  size_t count;
  enum cudaMemcpyKind kind;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &dst, sizeof(cudaArray_t)) < 0 ||
      rpc_read(conn, &wOffsetDst, sizeof(size_t)) < 0 ||
      rpc_read(conn, &hOffsetDst, sizeof(size_t)) < 0 ||
      rpc_read(conn, &src, sizeof(cudaArray_const_t)) < 0 ||
      rpc_read(conn, &wOffsetSrc, sizeof(size_t)) < 0 ||
      rpc_read(conn, &hOffsetSrc, sizeof(size_t)) < 0 ||
      rpc_read(conn, &count, sizeof(size_t)) < 0 ||
      rpc_read(conn, &kind, sizeof(enum cudaMemcpyKind)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaMemcpyArrayToArray(
      dst, wOffsetDst, hOffsetDst, src, wOffsetSrc, hOffsetSrc, count, kind);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMemcpyToArrayAsync(conn_t *conn) {
  cudaArray_t dst;
  size_t wOffset;
  size_t hOffset;
  const void *src;
  size_t count;
  enum cudaMemcpyKind kind;
  cudaStream_t stream;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &dst, sizeof(cudaArray_t)) < 0 ||
      rpc_read(conn, &wOffset, sizeof(size_t)) < 0 ||
      rpc_read(conn, &hOffset, sizeof(size_t)) < 0 ||
      rpc_read(conn, &src, sizeof(const void *)) < 0 ||
      rpc_read(conn, &count, sizeof(size_t)) < 0 ||
      rpc_read(conn, &kind, sizeof(enum cudaMemcpyKind)) < 0 ||
      rpc_read(conn, &stream, sizeof(cudaStream_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaMemcpyToArrayAsync(dst, wOffset, hOffset, src, count, kind, stream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMallocAsync(conn_t *conn) {
  void *devPtr;
  size_t size;
  cudaStream_t hStream;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &devPtr, sizeof(void *)) < 0 ||
      rpc_read(conn, &size, sizeof(size_t)) < 0 ||
      rpc_read(conn, &hStream, sizeof(cudaStream_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaMallocAsync(&devPtr, size, hStream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &devPtr, sizeof(void *)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMemPoolTrimTo(conn_t *conn) {
  cudaMemPool_t memPool;
  size_t minBytesToKeep;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &memPool, sizeof(cudaMemPool_t)) < 0 ||
      rpc_read(conn, &minBytesToKeep, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaMemPoolTrimTo(memPool, minBytesToKeep);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMemPoolSetAccess(conn_t *conn) {
  cudaMemPool_t memPool;
  const struct cudaMemAccessDesc *descList;
  size_t count;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &memPool, sizeof(cudaMemPool_t)) < 0 ||
      rpc_read(conn, &descList, sizeof(const struct cudaMemAccessDesc *)) < 0 ||
      rpc_read(conn, &count, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaMemPoolSetAccess(memPool, descList, count);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMemPoolGetAccess(conn_t *conn) {
  enum cudaMemAccessFlags flags;
  cudaMemPool_t memPool;
  struct cudaMemLocation location;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &flags, sizeof(enum cudaMemAccessFlags)) < 0 ||
      rpc_read(conn, &memPool, sizeof(cudaMemPool_t)) < 0 ||
      rpc_read(conn, &location, sizeof(struct cudaMemLocation)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaMemPoolGetAccess(&flags, memPool, &location);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &flags, sizeof(enum cudaMemAccessFlags)) < 0 ||
      rpc_write(conn, &location, sizeof(struct cudaMemLocation)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMemPoolCreate(conn_t *conn) {
  cudaMemPool_t memPool;
  const struct cudaMemPoolProps *poolProps;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &memPool, sizeof(cudaMemPool_t)) < 0 ||
      rpc_read(conn, &poolProps, sizeof(const struct cudaMemPoolProps *)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaMemPoolCreate(&memPool, poolProps);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &memPool, sizeof(cudaMemPool_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMemPoolDestroy(conn_t *conn) {
  cudaMemPool_t memPool;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &memPool, sizeof(cudaMemPool_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaMemPoolDestroy(memPool);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMallocFromPoolAsync(conn_t *conn) {
  void *ptr;
  size_t size;
  cudaMemPool_t memPool;
  cudaStream_t stream;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &ptr, sizeof(void *)) < 0 ||
      rpc_read(conn, &size, sizeof(size_t)) < 0 ||
      rpc_read(conn, &memPool, sizeof(cudaMemPool_t)) < 0 ||
      rpc_read(conn, &stream, sizeof(cudaStream_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaMallocFromPoolAsync(&ptr, size, memPool, stream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &ptr, sizeof(void *)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaMemPoolImportPointer(conn_t *conn) {
  void *ptr;
  cudaMemPool_t memPool;
  struct cudaMemPoolPtrExportData exportData;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &ptr, sizeof(void *)) < 0 ||
      rpc_read(conn, &memPool, sizeof(cudaMemPool_t)) < 0 ||
      rpc_read(conn, &exportData, sizeof(struct cudaMemPoolPtrExportData)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaMemPoolImportPointer(&ptr, memPool, &exportData);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &ptr, sizeof(void *)) < 0 ||
      rpc_write(conn, &exportData, sizeof(struct cudaMemPoolPtrExportData)) <
          0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaPointerGetAttributes(conn_t *conn) {
  struct cudaPointerAttributes attributes;
  const void *ptr;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &attributes, sizeof(struct cudaPointerAttributes)) < 0 ||
      rpc_read(conn, &ptr, sizeof(const void *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaPointerGetAttributes(&attributes, ptr);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &attributes, sizeof(struct cudaPointerAttributes)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaDeviceCanAccessPeer(conn_t *conn) {
  int canAccessPeer;
  int device;
  int peerDevice;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &canAccessPeer, sizeof(int)) < 0 ||
      rpc_read(conn, &device, sizeof(int)) < 0 ||
      rpc_read(conn, &peerDevice, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaDeviceCanAccessPeer(&canAccessPeer, device, peerDevice);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &canAccessPeer, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaDeviceEnablePeerAccess(conn_t *conn) {
  int peerDevice;
  unsigned int flags;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &peerDevice, sizeof(int)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaDeviceEnablePeerAccess(peerDevice, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaDeviceDisablePeerAccess(conn_t *conn) {
  int peerDevice;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &peerDevice, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaDeviceDisablePeerAccess(peerDevice);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphicsUnregisterResource(conn_t *conn) {
  cudaGraphicsResource_t resource;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &resource, sizeof(cudaGraphicsResource_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphicsUnregisterResource(resource);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphicsResourceSetMapFlags(conn_t *conn) {
  cudaGraphicsResource_t resource;
  unsigned int flags;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &resource, sizeof(cudaGraphicsResource_t)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphicsResourceSetMapFlags(resource, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphicsMapResources(conn_t *conn) {
  int count;
  cudaGraphicsResource_t resources;
  cudaStream_t stream;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &count, sizeof(int)) < 0 ||
      rpc_read(conn, &resources, sizeof(cudaGraphicsResource_t)) < 0 ||
      rpc_read(conn, &stream, sizeof(cudaStream_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphicsMapResources(count, &resources, stream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &resources, sizeof(cudaGraphicsResource_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphicsUnmapResources(conn_t *conn) {
  int count;
  cudaGraphicsResource_t resources;
  cudaStream_t stream;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &count, sizeof(int)) < 0 ||
      rpc_read(conn, &resources, sizeof(cudaGraphicsResource_t)) < 0 ||
      rpc_read(conn, &stream, sizeof(cudaStream_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaGraphicsUnmapResources(count, &resources, stream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &resources, sizeof(cudaGraphicsResource_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphicsResourceGetMappedPointer(conn_t *conn) {
  void *devPtr;
  size_t size;
  cudaGraphicsResource_t resource;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &devPtr, sizeof(void *)) < 0 ||
      rpc_read(conn, &size, sizeof(size_t)) < 0 ||
      rpc_read(conn, &resource, sizeof(cudaGraphicsResource_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaGraphicsResourceGetMappedPointer(&devPtr, &size, resource);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &devPtr, sizeof(void *)) < 0 ||
      rpc_write(conn, &size, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphicsSubResourceGetMappedArray(conn_t *conn) {
  cudaArray_t array;
  cudaGraphicsResource_t resource;
  unsigned int arrayIndex;
  unsigned int mipLevel;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &array, sizeof(cudaArray_t)) < 0 ||
      rpc_read(conn, &resource, sizeof(cudaGraphicsResource_t)) < 0 ||
      rpc_read(conn, &arrayIndex, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &mipLevel, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphicsSubResourceGetMappedArray(
      &array, resource, arrayIndex, mipLevel);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &array, sizeof(cudaArray_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphicsResourceGetMappedMipmappedArray(conn_t *conn) {
  cudaMipmappedArray_t mipmappedArray;
  cudaGraphicsResource_t resource;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &mipmappedArray, sizeof(cudaMipmappedArray_t)) < 0 ||
      rpc_read(conn, &resource, sizeof(cudaGraphicsResource_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaGraphicsResourceGetMappedMipmappedArray(&mipmappedArray, resource);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &mipmappedArray, sizeof(cudaMipmappedArray_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGetChannelDesc(conn_t *conn) {
  struct cudaChannelFormatDesc desc;
  cudaArray_const_t array;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &desc, sizeof(struct cudaChannelFormatDesc)) < 0 ||
      rpc_read(conn, &array, sizeof(cudaArray_const_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGetChannelDesc(&desc, array);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &desc, sizeof(struct cudaChannelFormatDesc)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaCreateTextureObject(conn_t *conn) {
  cudaTextureObject_t pTexObject;
  const struct cudaResourceDesc *pResDesc;
  const struct cudaTextureDesc *pTexDesc;
  const struct cudaResourceViewDesc *pResViewDesc;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pTexObject, sizeof(cudaTextureObject_t)) < 0 ||
      rpc_read(conn, &pResDesc, sizeof(const struct cudaResourceDesc *)) < 0 ||
      rpc_read(conn, &pTexDesc, sizeof(const struct cudaTextureDesc *)) < 0 ||
      rpc_read(conn, &pResViewDesc,
               sizeof(const struct cudaResourceViewDesc *)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaCreateTextureObject(&pTexObject, pResDesc, pTexDesc, pResViewDesc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pTexObject, sizeof(cudaTextureObject_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaDestroyTextureObject(conn_t *conn) {
  cudaTextureObject_t texObject;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &texObject, sizeof(cudaTextureObject_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaDestroyTextureObject(texObject);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGetTextureObjectResourceDesc(conn_t *conn) {
  struct cudaResourceDesc pResDesc;
  cudaTextureObject_t texObject;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pResDesc, sizeof(struct cudaResourceDesc)) < 0 ||
      rpc_read(conn, &texObject, sizeof(cudaTextureObject_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaGetTextureObjectResourceDesc(&pResDesc, texObject);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pResDesc, sizeof(struct cudaResourceDesc)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGetTextureObjectTextureDesc(conn_t *conn) {
  struct cudaTextureDesc pTexDesc;
  cudaTextureObject_t texObject;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pTexDesc, sizeof(struct cudaTextureDesc)) < 0 ||
      rpc_read(conn, &texObject, sizeof(cudaTextureObject_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaGetTextureObjectTextureDesc(&pTexDesc, texObject);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pTexDesc, sizeof(struct cudaTextureDesc)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGetTextureObjectResourceViewDesc(conn_t *conn) {
  struct cudaResourceViewDesc pResViewDesc;
  cudaTextureObject_t texObject;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pResViewDesc, sizeof(struct cudaResourceViewDesc)) < 0 ||
      rpc_read(conn, &texObject, sizeof(cudaTextureObject_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaGetTextureObjectResourceViewDesc(&pResViewDesc, texObject);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pResViewDesc, sizeof(struct cudaResourceViewDesc)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaCreateSurfaceObject(conn_t *conn) {
  cudaSurfaceObject_t pSurfObject;
  const struct cudaResourceDesc *pResDesc;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pSurfObject, sizeof(cudaSurfaceObject_t)) < 0 ||
      rpc_read(conn, &pResDesc, sizeof(const struct cudaResourceDesc *)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaCreateSurfaceObject(&pSurfObject, pResDesc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pSurfObject, sizeof(cudaSurfaceObject_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaDestroySurfaceObject(conn_t *conn) {
  cudaSurfaceObject_t surfObject;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &surfObject, sizeof(cudaSurfaceObject_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaDestroySurfaceObject(surfObject);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGetSurfaceObjectResourceDesc(conn_t *conn) {
  struct cudaResourceDesc pResDesc;
  cudaSurfaceObject_t surfObject;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pResDesc, sizeof(struct cudaResourceDesc)) < 0 ||
      rpc_read(conn, &surfObject, sizeof(cudaSurfaceObject_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaGetSurfaceObjectResourceDesc(&pResDesc, surfObject);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pResDesc, sizeof(struct cudaResourceDesc)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaDriverGetVersion(conn_t *conn) {
  int driverVersion;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &driverVersion, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaDriverGetVersion(&driverVersion);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &driverVersion, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaRuntimeGetVersion(conn_t *conn) {
  int runtimeVersion;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &runtimeVersion, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaRuntimeGetVersion(&runtimeVersion);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &runtimeVersion, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphCreate(conn_t *conn) {
  cudaGraph_t pGraph;
  unsigned int flags;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pGraph, sizeof(cudaGraph_t)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphCreate(&pGraph, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pGraph, sizeof(cudaGraph_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphAddKernelNode(conn_t *conn) {
  cudaGraphNode_t pGraphNode;
  cudaGraph_t graph;
  const cudaGraphNode_t *pDependencies;
  size_t numDependencies;
  const struct cudaKernelNodeParams *pNodeParams;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pGraphNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &graph, sizeof(cudaGraph_t)) < 0 ||
      rpc_read(conn, &pDependencies, sizeof(const cudaGraphNode_t *)) < 0 ||
      rpc_read(conn, &numDependencies, sizeof(size_t)) < 0 ||
      rpc_read(conn, &pNodeParams,
               sizeof(const struct cudaKernelNodeParams *)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphAddKernelNode(
      &pGraphNode, graph, pDependencies, numDependencies, pNodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pGraphNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphKernelNodeGetParams(conn_t *conn) {
  cudaGraphNode_t node;
  struct cudaKernelNodeParams pNodeParams;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &node, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &pNodeParams, sizeof(struct cudaKernelNodeParams)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphKernelNodeGetParams(node, &pNodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pNodeParams, sizeof(struct cudaKernelNodeParams)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphKernelNodeSetParams(conn_t *conn) {
  cudaGraphNode_t node;
  const struct cudaKernelNodeParams *pNodeParams;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &node, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &pNodeParams,
               sizeof(const struct cudaKernelNodeParams *)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphKernelNodeSetParams(node, pNodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphKernelNodeCopyAttributes(conn_t *conn) {
  cudaGraphNode_t hSrc;
  cudaGraphNode_t hDst;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &hSrc, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &hDst, sizeof(cudaGraphNode_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphKernelNodeCopyAttributes(hSrc, hDst);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphKernelNodeGetAttribute(conn_t *conn) {
  cudaGraphNode_t hNode;
  cudaLaunchAttributeID attr;
  cudaLaunchAttributeValue value_out;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &hNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &attr, sizeof(cudaLaunchAttributeID)) < 0 ||
      rpc_read(conn, &value_out, sizeof(cudaLaunchAttributeValue)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaGraphKernelNodeGetAttribute(hNode, attr, &value_out);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &value_out, sizeof(cudaLaunchAttributeValue)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphKernelNodeSetAttribute(conn_t *conn) {
  cudaGraphNode_t hNode;
  cudaLaunchAttributeID attr;
  const cudaLaunchAttributeValue *value;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &hNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &attr, sizeof(cudaLaunchAttributeID)) < 0 ||
      rpc_read(conn, &value, sizeof(const cudaLaunchAttributeValue *)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphKernelNodeSetAttribute(hNode, attr, value);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphAddMemcpyNode(conn_t *conn) {
  cudaGraphNode_t pGraphNode;
  cudaGraph_t graph;
  const cudaGraphNode_t *pDependencies;
  size_t numDependencies;
  const struct cudaMemcpy3DParms *pCopyParams;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pGraphNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &graph, sizeof(cudaGraph_t)) < 0 ||
      rpc_read(conn, &pDependencies, sizeof(const cudaGraphNode_t *)) < 0 ||
      rpc_read(conn, &numDependencies, sizeof(size_t)) < 0 ||
      rpc_read(conn, &pCopyParams, sizeof(const struct cudaMemcpy3DParms *)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphAddMemcpyNode(
      &pGraphNode, graph, pDependencies, numDependencies, pCopyParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pGraphNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphAddMemcpyNodeToSymbol(conn_t *conn) {
  cudaGraphNode_t pGraphNode;
  cudaGraph_t graph;
  const cudaGraphNode_t *pDependencies;
  size_t numDependencies;
  const void *symbol;
  const void *src;
  size_t count;
  size_t offset;
  enum cudaMemcpyKind kind;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pGraphNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &graph, sizeof(cudaGraph_t)) < 0 ||
      rpc_read(conn, &pDependencies, sizeof(const cudaGraphNode_t *)) < 0 ||
      rpc_read(conn, &numDependencies, sizeof(size_t)) < 0 ||
      rpc_read(conn, &symbol, sizeof(const void *)) < 0 ||
      rpc_read(conn, &src, sizeof(const void *)) < 0 ||
      rpc_read(conn, &count, sizeof(size_t)) < 0 ||
      rpc_read(conn, &offset, sizeof(size_t)) < 0 ||
      rpc_read(conn, &kind, sizeof(enum cudaMemcpyKind)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphAddMemcpyNodeToSymbol(
      &pGraphNode, graph, pDependencies, numDependencies, symbol, src, count,
      offset, kind);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pGraphNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphMemcpyNodeGetParams(conn_t *conn) {
  cudaGraphNode_t node;
  struct cudaMemcpy3DParms pNodeParams;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &node, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &pNodeParams, sizeof(struct cudaMemcpy3DParms)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphMemcpyNodeGetParams(node, &pNodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pNodeParams, sizeof(struct cudaMemcpy3DParms)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphMemcpyNodeSetParams(conn_t *conn) {
  cudaGraphNode_t node;
  const struct cudaMemcpy3DParms *pNodeParams;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &node, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &pNodeParams, sizeof(const struct cudaMemcpy3DParms *)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphMemcpyNodeSetParams(node, pNodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphMemcpyNodeSetParamsToSymbol(conn_t *conn) {
  cudaGraphNode_t node;
  const void *symbol;
  const void *src;
  size_t count;
  size_t offset;
  enum cudaMemcpyKind kind;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &node, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &symbol, sizeof(const void *)) < 0 ||
      rpc_read(conn, &src, sizeof(const void *)) < 0 ||
      rpc_read(conn, &count, sizeof(size_t)) < 0 ||
      rpc_read(conn, &offset, sizeof(size_t)) < 0 ||
      rpc_read(conn, &kind, sizeof(enum cudaMemcpyKind)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphMemcpyNodeSetParamsToSymbol(
      node, symbol, src, count, offset, kind);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphAddMemsetNode(conn_t *conn) {
  cudaGraphNode_t pGraphNode;
  cudaGraph_t graph;
  const cudaGraphNode_t *pDependencies;
  size_t numDependencies;
  const struct cudaMemsetParams *pMemsetParams;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pGraphNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &graph, sizeof(cudaGraph_t)) < 0 ||
      rpc_read(conn, &pDependencies, sizeof(const cudaGraphNode_t *)) < 0 ||
      rpc_read(conn, &numDependencies, sizeof(size_t)) < 0 ||
      rpc_read(conn, &pMemsetParams, sizeof(const struct cudaMemsetParams *)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphAddMemsetNode(
      &pGraphNode, graph, pDependencies, numDependencies, pMemsetParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pGraphNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphMemsetNodeGetParams(conn_t *conn) {
  cudaGraphNode_t node;
  struct cudaMemsetParams pNodeParams;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &node, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &pNodeParams, sizeof(struct cudaMemsetParams)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphMemsetNodeGetParams(node, &pNodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pNodeParams, sizeof(struct cudaMemsetParams)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphMemsetNodeSetParams(conn_t *conn) {
  cudaGraphNode_t node;
  const struct cudaMemsetParams *pNodeParams;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &node, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &pNodeParams, sizeof(const struct cudaMemsetParams *)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphMemsetNodeSetParams(node, pNodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphAddHostNode(conn_t *conn) {
  cudaGraphNode_t pGraphNode;
  cudaGraph_t graph;
  const cudaGraphNode_t *pDependencies;
  size_t numDependencies;
  const struct cudaHostNodeParams *pNodeParams;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pGraphNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &graph, sizeof(cudaGraph_t)) < 0 ||
      rpc_read(conn, &pDependencies, sizeof(const cudaGraphNode_t *)) < 0 ||
      rpc_read(conn, &numDependencies, sizeof(size_t)) < 0 ||
      rpc_read(conn, &pNodeParams, sizeof(const struct cudaHostNodeParams *)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphAddHostNode(
      &pGraphNode, graph, pDependencies, numDependencies, pNodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pGraphNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphHostNodeGetParams(conn_t *conn) {
  cudaGraphNode_t node;
  struct cudaHostNodeParams pNodeParams;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &node, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &pNodeParams, sizeof(struct cudaHostNodeParams)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphHostNodeGetParams(node, &pNodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pNodeParams, sizeof(struct cudaHostNodeParams)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphHostNodeSetParams(conn_t *conn) {
  cudaGraphNode_t node;
  const struct cudaHostNodeParams *pNodeParams;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &node, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &pNodeParams, sizeof(const struct cudaHostNodeParams *)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphHostNodeSetParams(node, pNodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphAddChildGraphNode(conn_t *conn) {
  cudaGraphNode_t pGraphNode;
  cudaGraph_t graph;
  const cudaGraphNode_t *pDependencies;
  size_t numDependencies;
  cudaGraph_t childGraph;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pGraphNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &graph, sizeof(cudaGraph_t)) < 0 ||
      rpc_read(conn, &pDependencies, sizeof(const cudaGraphNode_t *)) < 0 ||
      rpc_read(conn, &numDependencies, sizeof(size_t)) < 0 ||
      rpc_read(conn, &childGraph, sizeof(cudaGraph_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphAddChildGraphNode(
      &pGraphNode, graph, pDependencies, numDependencies, childGraph);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pGraphNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphChildGraphNodeGetGraph(conn_t *conn) {
  cudaGraphNode_t node;
  cudaGraph_t pGraph;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &node, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &pGraph, sizeof(cudaGraph_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphChildGraphNodeGetGraph(node, &pGraph);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pGraph, sizeof(cudaGraph_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphAddEmptyNode(conn_t *conn) {
  cudaGraphNode_t pGraphNode;
  cudaGraph_t graph;
  const cudaGraphNode_t *pDependencies;
  size_t numDependencies;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pGraphNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &graph, sizeof(cudaGraph_t)) < 0 ||
      rpc_read(conn, &pDependencies, sizeof(const cudaGraphNode_t *)) < 0 ||
      rpc_read(conn, &numDependencies, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaGraphAddEmptyNode(&pGraphNode, graph, pDependencies, numDependencies);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pGraphNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphAddEventRecordNode(conn_t *conn) {
  cudaGraphNode_t pGraphNode;
  cudaGraph_t graph;
  const cudaGraphNode_t *pDependencies;
  size_t numDependencies;
  cudaEvent_t event;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pGraphNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &graph, sizeof(cudaGraph_t)) < 0 ||
      rpc_read(conn, &pDependencies, sizeof(const cudaGraphNode_t *)) < 0 ||
      rpc_read(conn, &numDependencies, sizeof(size_t)) < 0 ||
      rpc_read(conn, &event, sizeof(cudaEvent_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphAddEventRecordNode(
      &pGraphNode, graph, pDependencies, numDependencies, event);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pGraphNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphEventRecordNodeGetEvent(conn_t *conn) {
  cudaGraphNode_t node;
  cudaEvent_t event_out;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &node, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &event_out, sizeof(cudaEvent_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphEventRecordNodeGetEvent(node, &event_out);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &event_out, sizeof(cudaEvent_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphEventRecordNodeSetEvent(conn_t *conn) {
  cudaGraphNode_t node;
  cudaEvent_t event;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &node, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &event, sizeof(cudaEvent_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphEventRecordNodeSetEvent(node, event);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphAddEventWaitNode(conn_t *conn) {
  cudaGraphNode_t pGraphNode;
  cudaGraph_t graph;
  const cudaGraphNode_t *pDependencies;
  size_t numDependencies;
  cudaEvent_t event;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pGraphNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &graph, sizeof(cudaGraph_t)) < 0 ||
      rpc_read(conn, &pDependencies, sizeof(const cudaGraphNode_t *)) < 0 ||
      rpc_read(conn, &numDependencies, sizeof(size_t)) < 0 ||
      rpc_read(conn, &event, sizeof(cudaEvent_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphAddEventWaitNode(
      &pGraphNode, graph, pDependencies, numDependencies, event);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pGraphNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphEventWaitNodeGetEvent(conn_t *conn) {
  cudaGraphNode_t node;
  cudaEvent_t event_out;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &node, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &event_out, sizeof(cudaEvent_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphEventWaitNodeGetEvent(node, &event_out);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &event_out, sizeof(cudaEvent_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphEventWaitNodeSetEvent(conn_t *conn) {
  cudaGraphNode_t node;
  cudaEvent_t event;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &node, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &event, sizeof(cudaEvent_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphEventWaitNodeSetEvent(node, event);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphAddExternalSemaphoresSignalNode(conn_t *conn) {
  cudaGraphNode_t pGraphNode;
  cudaGraph_t graph;
  const cudaGraphNode_t *pDependencies;
  size_t numDependencies;
  const struct cudaExternalSemaphoreSignalNodeParams *nodeParams;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pGraphNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &graph, sizeof(cudaGraph_t)) < 0 ||
      rpc_read(conn, &pDependencies, sizeof(const cudaGraphNode_t *)) < 0 ||
      rpc_read(conn, &numDependencies, sizeof(size_t)) < 0 ||
      rpc_read(conn, &nodeParams,
               sizeof(const struct cudaExternalSemaphoreSignalNodeParams *)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphAddExternalSemaphoresSignalNode(
      &pGraphNode, graph, pDependencies, numDependencies, nodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pGraphNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphExternalSemaphoresSignalNodeGetParams(conn_t *conn) {
  cudaGraphNode_t hNode;
  struct cudaExternalSemaphoreSignalNodeParams params_out;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &hNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &params_out,
               sizeof(struct cudaExternalSemaphoreSignalNodeParams)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaGraphExternalSemaphoresSignalNodeGetParams(hNode, &params_out);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &params_out,
                sizeof(struct cudaExternalSemaphoreSignalNodeParams)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphExternalSemaphoresSignalNodeSetParams(conn_t *conn) {
  cudaGraphNode_t hNode;
  const struct cudaExternalSemaphoreSignalNodeParams *nodeParams;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &hNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &nodeParams,
               sizeof(const struct cudaExternalSemaphoreSignalNodeParams *)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaGraphExternalSemaphoresSignalNodeSetParams(hNode, nodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphAddExternalSemaphoresWaitNode(conn_t *conn) {
  cudaGraphNode_t pGraphNode;
  cudaGraph_t graph;
  const cudaGraphNode_t *pDependencies;
  size_t numDependencies;
  const struct cudaExternalSemaphoreWaitNodeParams *nodeParams;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pGraphNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &graph, sizeof(cudaGraph_t)) < 0 ||
      rpc_read(conn, &pDependencies, sizeof(const cudaGraphNode_t *)) < 0 ||
      rpc_read(conn, &numDependencies, sizeof(size_t)) < 0 ||
      rpc_read(conn, &nodeParams,
               sizeof(const struct cudaExternalSemaphoreWaitNodeParams *)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphAddExternalSemaphoresWaitNode(
      &pGraphNode, graph, pDependencies, numDependencies, nodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pGraphNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphExternalSemaphoresWaitNodeGetParams(conn_t *conn) {
  cudaGraphNode_t hNode;
  struct cudaExternalSemaphoreWaitNodeParams params_out;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &hNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &params_out,
               sizeof(struct cudaExternalSemaphoreWaitNodeParams)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaGraphExternalSemaphoresWaitNodeGetParams(hNode, &params_out);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &params_out,
                sizeof(struct cudaExternalSemaphoreWaitNodeParams)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphExternalSemaphoresWaitNodeSetParams(conn_t *conn) {
  cudaGraphNode_t hNode;
  const struct cudaExternalSemaphoreWaitNodeParams *nodeParams;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &hNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &nodeParams,
               sizeof(const struct cudaExternalSemaphoreWaitNodeParams *)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaGraphExternalSemaphoresWaitNodeSetParams(hNode, nodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphAddMemAllocNode(conn_t *conn) {
  cudaGraphNode_t pGraphNode;
  cudaGraph_t graph;
  const cudaGraphNode_t *pDependencies;
  size_t numDependencies;
  struct cudaMemAllocNodeParams nodeParams;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pGraphNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &graph, sizeof(cudaGraph_t)) < 0 ||
      rpc_read(conn, &pDependencies, sizeof(const cudaGraphNode_t *)) < 0 ||
      rpc_read(conn, &numDependencies, sizeof(size_t)) < 0 ||
      rpc_read(conn, &nodeParams, sizeof(struct cudaMemAllocNodeParams)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphAddMemAllocNode(
      &pGraphNode, graph, pDependencies, numDependencies, &nodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pGraphNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_write(conn, &nodeParams, sizeof(struct cudaMemAllocNodeParams)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphMemAllocNodeGetParams(conn_t *conn) {
  cudaGraphNode_t node;
  struct cudaMemAllocNodeParams params_out;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &node, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &params_out, sizeof(struct cudaMemAllocNodeParams)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphMemAllocNodeGetParams(node, &params_out);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &params_out, sizeof(struct cudaMemAllocNodeParams)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaDeviceGraphMemTrim(conn_t *conn) {
  int device;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &device, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaDeviceGraphMemTrim(device);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphClone(conn_t *conn) {
  cudaGraph_t pGraphClone;
  cudaGraph_t originalGraph;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pGraphClone, sizeof(cudaGraph_t)) < 0 ||
      rpc_read(conn, &originalGraph, sizeof(cudaGraph_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphClone(&pGraphClone, originalGraph);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pGraphClone, sizeof(cudaGraph_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphNodeFindInClone(conn_t *conn) {
  cudaGraphNode_t pNode;
  cudaGraphNode_t originalNode;
  cudaGraph_t clonedGraph;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &originalNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &clonedGraph, sizeof(cudaGraph_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaGraphNodeFindInClone(&pNode, originalNode, clonedGraph);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphNodeGetType(conn_t *conn) {
  cudaGraphNode_t node;
  enum cudaGraphNodeType pType;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &node, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &pType, sizeof(enum cudaGraphNodeType)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphNodeGetType(node, &pType);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pType, sizeof(enum cudaGraphNodeType)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphGetNodes(conn_t *conn) {
  cudaGraph_t graph;
  cudaGraphNode_t nodes;
  size_t numNodes;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &graph, sizeof(cudaGraph_t)) < 0 ||
      rpc_read(conn, &nodes, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &numNodes, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphGetNodes(graph, &nodes, &numNodes);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &nodes, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_write(conn, &numNodes, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphGetRootNodes(conn_t *conn) {
  cudaGraph_t graph;
  cudaGraphNode_t pRootNodes;
  size_t pNumRootNodes;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &graph, sizeof(cudaGraph_t)) < 0 ||
      rpc_read(conn, &pRootNodes, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &pNumRootNodes, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaGraphGetRootNodes(graph, &pRootNodes, &pNumRootNodes);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pRootNodes, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_write(conn, &pNumRootNodes, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphGetEdges(conn_t *conn) {
  cudaGraph_t graph;
  cudaGraphNode_t from;
  cudaGraphNode_t to;
  size_t numEdges;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &graph, sizeof(cudaGraph_t)) < 0 ||
      rpc_read(conn, &from, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &to, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &numEdges, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphGetEdges(graph, &from, &to, &numEdges);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &from, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_write(conn, &to, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_write(conn, &numEdges, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphNodeGetDependencies(conn_t *conn) {
  cudaGraphNode_t node;
  cudaGraphNode_t pDependencies;
  size_t pNumDependencies;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &node, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &pDependencies, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &pNumDependencies, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaGraphNodeGetDependencies(node, &pDependencies, &pNumDependencies);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pDependencies, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_write(conn, &pNumDependencies, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphNodeGetDependentNodes(conn_t *conn) {
  cudaGraphNode_t node;
  cudaGraphNode_t pDependentNodes;
  size_t pNumDependentNodes;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &node, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &pDependentNodes, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &pNumDependentNodes, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphNodeGetDependentNodes(
      node, &pDependentNodes, &pNumDependentNodes);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pDependentNodes, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_write(conn, &pNumDependentNodes, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphAddDependencies(conn_t *conn) {
  cudaGraph_t graph;
  const cudaGraphNode_t *from;
  const cudaGraphNode_t *to;
  size_t numDependencies;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &graph, sizeof(cudaGraph_t)) < 0 ||
      rpc_read(conn, &from, sizeof(const cudaGraphNode_t *)) < 0 ||
      rpc_read(conn, &to, sizeof(const cudaGraphNode_t *)) < 0 ||
      rpc_read(conn, &numDependencies, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaGraphAddDependencies(graph, from, to, numDependencies);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphRemoveDependencies(conn_t *conn) {
  cudaGraph_t graph;
  const cudaGraphNode_t *from;
  const cudaGraphNode_t *to;
  size_t numDependencies;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &graph, sizeof(cudaGraph_t)) < 0 ||
      rpc_read(conn, &from, sizeof(const cudaGraphNode_t *)) < 0 ||
      rpc_read(conn, &to, sizeof(const cudaGraphNode_t *)) < 0 ||
      rpc_read(conn, &numDependencies, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaGraphRemoveDependencies(graph, from, to, numDependencies);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphDestroyNode(conn_t *conn) {
  cudaGraphNode_t node;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &node, sizeof(cudaGraphNode_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphDestroyNode(node);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphInstantiate(conn_t *conn) {
  cudaGraphExec_t pGraphExec;
  cudaGraph_t graph;
  unsigned long long flags;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pGraphExec, sizeof(cudaGraphExec_t)) < 0 ||
      rpc_read(conn, &graph, sizeof(cudaGraph_t)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned long long)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphInstantiate(&pGraphExec, graph, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pGraphExec, sizeof(cudaGraphExec_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphInstantiateWithFlags(conn_t *conn) {
  cudaGraphExec_t pGraphExec;
  cudaGraph_t graph;
  unsigned long long flags;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pGraphExec, sizeof(cudaGraphExec_t)) < 0 ||
      rpc_read(conn, &graph, sizeof(cudaGraph_t)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned long long)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaGraphInstantiateWithFlags(&pGraphExec, graph, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pGraphExec, sizeof(cudaGraphExec_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphInstantiateWithParams(conn_t *conn) {
  cudaGraphExec_t pGraphExec;
  cudaGraph_t graph;
  cudaGraphInstantiateParams instantiateParams;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &pGraphExec, sizeof(cudaGraphExec_t)) < 0 ||
      rpc_read(conn, &graph, sizeof(cudaGraph_t)) < 0 ||
      rpc_read(conn, &instantiateParams, sizeof(cudaGraphInstantiateParams)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaGraphInstantiateWithParams(&pGraphExec, graph, &instantiateParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &pGraphExec, sizeof(cudaGraphExec_t)) < 0 ||
      rpc_write(conn, &instantiateParams, sizeof(cudaGraphInstantiateParams)) <
          0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphExecGetFlags(conn_t *conn) {
  cudaGraphExec_t graphExec;
  unsigned long long flags;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &graphExec, sizeof(cudaGraphExec_t)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned long long)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphExecGetFlags(graphExec, &flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &flags, sizeof(unsigned long long)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphExecKernelNodeSetParams(conn_t *conn) {
  cudaGraphExec_t hGraphExec;
  cudaGraphNode_t node;
  const struct cudaKernelNodeParams *pNodeParams;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &hGraphExec, sizeof(cudaGraphExec_t)) < 0 ||
      rpc_read(conn, &node, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &pNodeParams,
               sizeof(const struct cudaKernelNodeParams *)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaGraphExecKernelNodeSetParams(hGraphExec, node, pNodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphExecMemcpyNodeSetParams(conn_t *conn) {
  cudaGraphExec_t hGraphExec;
  cudaGraphNode_t node;
  const struct cudaMemcpy3DParms *pNodeParams;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &hGraphExec, sizeof(cudaGraphExec_t)) < 0 ||
      rpc_read(conn, &node, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &pNodeParams, sizeof(const struct cudaMemcpy3DParms *)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaGraphExecMemcpyNodeSetParams(hGraphExec, node, pNodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphExecMemcpyNodeSetParamsToSymbol(conn_t *conn) {
  cudaGraphExec_t hGraphExec;
  cudaGraphNode_t node;
  const void *symbol;
  const void *src;
  size_t count;
  size_t offset;
  enum cudaMemcpyKind kind;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &hGraphExec, sizeof(cudaGraphExec_t)) < 0 ||
      rpc_read(conn, &node, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &symbol, sizeof(const void *)) < 0 ||
      rpc_read(conn, &src, sizeof(const void *)) < 0 ||
      rpc_read(conn, &count, sizeof(size_t)) < 0 ||
      rpc_read(conn, &offset, sizeof(size_t)) < 0 ||
      rpc_read(conn, &kind, sizeof(enum cudaMemcpyKind)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphExecMemcpyNodeSetParamsToSymbol(
      hGraphExec, node, symbol, src, count, offset, kind);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphExecMemsetNodeSetParams(conn_t *conn) {
  cudaGraphExec_t hGraphExec;
  cudaGraphNode_t node;
  const struct cudaMemsetParams *pNodeParams;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &hGraphExec, sizeof(cudaGraphExec_t)) < 0 ||
      rpc_read(conn, &node, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &pNodeParams, sizeof(const struct cudaMemsetParams *)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaGraphExecMemsetNodeSetParams(hGraphExec, node, pNodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphExecHostNodeSetParams(conn_t *conn) {
  cudaGraphExec_t hGraphExec;
  cudaGraphNode_t node;
  const struct cudaHostNodeParams *pNodeParams;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &hGraphExec, sizeof(cudaGraphExec_t)) < 0 ||
      rpc_read(conn, &node, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &pNodeParams, sizeof(const struct cudaHostNodeParams *)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaGraphExecHostNodeSetParams(hGraphExec, node, pNodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphExecChildGraphNodeSetParams(conn_t *conn) {
  cudaGraphExec_t hGraphExec;
  cudaGraphNode_t node;
  cudaGraph_t childGraph;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &hGraphExec, sizeof(cudaGraphExec_t)) < 0 ||
      rpc_read(conn, &node, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &childGraph, sizeof(cudaGraph_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaGraphExecChildGraphNodeSetParams(hGraphExec, node, childGraph);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphExecEventRecordNodeSetEvent(conn_t *conn) {
  cudaGraphExec_t hGraphExec;
  cudaGraphNode_t hNode;
  cudaEvent_t event;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &hGraphExec, sizeof(cudaGraphExec_t)) < 0 ||
      rpc_read(conn, &hNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &event, sizeof(cudaEvent_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaGraphExecEventRecordNodeSetEvent(hGraphExec, hNode, event);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphExecEventWaitNodeSetEvent(conn_t *conn) {
  cudaGraphExec_t hGraphExec;
  cudaGraphNode_t hNode;
  cudaEvent_t event;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &hGraphExec, sizeof(cudaGraphExec_t)) < 0 ||
      rpc_read(conn, &hNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &event, sizeof(cudaEvent_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaGraphExecEventWaitNodeSetEvent(hGraphExec, hNode, event);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphExecExternalSemaphoresSignalNodeSetParams(conn_t *conn) {
  cudaGraphExec_t hGraphExec;
  cudaGraphNode_t hNode;
  const struct cudaExternalSemaphoreSignalNodeParams *nodeParams;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &hGraphExec, sizeof(cudaGraphExec_t)) < 0 ||
      rpc_read(conn, &hNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &nodeParams,
               sizeof(const struct cudaExternalSemaphoreSignalNodeParams *)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphExecExternalSemaphoresSignalNodeSetParams(
      hGraphExec, hNode, nodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphExecExternalSemaphoresWaitNodeSetParams(conn_t *conn) {
  cudaGraphExec_t hGraphExec;
  cudaGraphNode_t hNode;
  const struct cudaExternalSemaphoreWaitNodeParams *nodeParams;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &hGraphExec, sizeof(cudaGraphExec_t)) < 0 ||
      rpc_read(conn, &hNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &nodeParams,
               sizeof(const struct cudaExternalSemaphoreWaitNodeParams *)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphExecExternalSemaphoresWaitNodeSetParams(
      hGraphExec, hNode, nodeParams);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphNodeSetEnabled(conn_t *conn) {
  cudaGraphExec_t hGraphExec;
  cudaGraphNode_t hNode;
  unsigned int isEnabled;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &hGraphExec, sizeof(cudaGraphExec_t)) < 0 ||
      rpc_read(conn, &hNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &isEnabled, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaGraphNodeSetEnabled(hGraphExec, hNode, isEnabled);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphNodeGetEnabled(conn_t *conn) {
  cudaGraphExec_t hGraphExec;
  cudaGraphNode_t hNode;
  unsigned int isEnabled;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &hGraphExec, sizeof(cudaGraphExec_t)) < 0 ||
      rpc_read(conn, &hNode, sizeof(cudaGraphNode_t)) < 0 ||
      rpc_read(conn, &isEnabled, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaGraphNodeGetEnabled(hGraphExec, hNode, &isEnabled);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &isEnabled, sizeof(unsigned int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphExecUpdate(conn_t *conn) {
  cudaGraphExec_t hGraphExec;
  cudaGraph_t hGraph;
  cudaGraphExecUpdateResultInfo resultInfo;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &hGraphExec, sizeof(cudaGraphExec_t)) < 0 ||
      rpc_read(conn, &hGraph, sizeof(cudaGraph_t)) < 0 ||
      rpc_read(conn, &resultInfo, sizeof(cudaGraphExecUpdateResultInfo)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphExecUpdate(hGraphExec, hGraph, &resultInfo);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &resultInfo, sizeof(cudaGraphExecUpdateResultInfo)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphUpload(conn_t *conn) {
  cudaGraphExec_t graphExec;
  cudaStream_t stream;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &graphExec, sizeof(cudaGraphExec_t)) < 0 ||
      rpc_read(conn, &stream, sizeof(cudaStream_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphUpload(graphExec, stream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphLaunch(conn_t *conn) {
  cudaGraphExec_t graphExec;
  cudaStream_t stream;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &graphExec, sizeof(cudaGraphExec_t)) < 0 ||
      rpc_read(conn, &stream, sizeof(cudaStream_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphLaunch(graphExec, stream);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphExecDestroy(conn_t *conn) {
  cudaGraphExec_t graphExec;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &graphExec, sizeof(cudaGraphExec_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphExecDestroy(graphExec);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphDestroy(conn_t *conn) {
  cudaGraph_t graph;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &graph, sizeof(cudaGraph_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphDestroy(graph);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphDebugDotPrint(conn_t *conn) {
  cudaGraph_t graph;
  const char *path;
  unsigned int flags;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &graph, sizeof(cudaGraph_t)) < 0 ||
      rpc_read(conn, &path, sizeof(const char *)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphDebugDotPrint(graph, path, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaUserObjectRetain(conn_t *conn) {
  cudaUserObject_t object;
  unsigned int count;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &object, sizeof(cudaUserObject_t)) < 0 ||
      rpc_read(conn, &count, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaUserObjectRetain(object, count);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaUserObjectRelease(conn_t *conn) {
  cudaUserObject_t object;
  unsigned int count;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &object, sizeof(cudaUserObject_t)) < 0 ||
      rpc_read(conn, &count, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaUserObjectRelease(object, count);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphRetainUserObject(conn_t *conn) {
  cudaGraph_t graph;
  cudaUserObject_t object;
  unsigned int count;
  unsigned int flags;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &graph, sizeof(cudaGraph_t)) < 0 ||
      rpc_read(conn, &object, sizeof(cudaUserObject_t)) < 0 ||
      rpc_read(conn, &count, sizeof(unsigned int)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaGraphRetainUserObject(graph, object, count, flags);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGraphReleaseUserObject(conn_t *conn) {
  cudaGraph_t graph;
  cudaUserObject_t object;
  unsigned int count;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &graph, sizeof(cudaGraph_t)) < 0 ||
      rpc_read(conn, &object, sizeof(cudaUserObject_t)) < 0 ||
      rpc_read(conn, &count, sizeof(unsigned int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGraphReleaseUserObject(graph, object, count);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGetDriverEntryPoint(conn_t *conn) {
  const char *symbol;
  void *funcPtr;
  unsigned long long flags;
  enum cudaDriverEntryPointQueryResult driverStatus;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &symbol, sizeof(const char *)) < 0 ||
      rpc_read(conn, &funcPtr, sizeof(void *)) < 0 ||
      rpc_read(conn, &flags, sizeof(unsigned long long)) < 0 ||
      rpc_read(conn, &driverStatus,
               sizeof(enum cudaDriverEntryPointQueryResult)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudaGetDriverEntryPoint(symbol, &funcPtr, flags, &driverStatus);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &funcPtr, sizeof(void *)) < 0 ||
      rpc_write(conn, &driverStatus,
                sizeof(enum cudaDriverEntryPointQueryResult)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGetExportTable(conn_t *conn) {
  const void *ppExportTable;
  const cudaUUID_t *pExportTableId;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &ppExportTable, sizeof(const void *)) < 0 ||
      rpc_read(conn, &pExportTableId, sizeof(const cudaUUID_t *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGetExportTable(&ppExportTable, pExportTableId);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &ppExportTable, sizeof(const void *)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudaGetFuncBySymbol(conn_t *conn) {
  cudaFunction_t functionPtr;
  const void *symbolPtr;
  int request_id;
  cudaError_t scuda_intercept_result;
  if (rpc_read(conn, &functionPtr, sizeof(cudaFunction_t)) < 0 ||
      rpc_read(conn, &symbolPtr, sizeof(const void *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudaGetFuncBySymbol(&functionPtr, symbolPtr);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &functionPtr, sizeof(cudaFunction_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudaError_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCreate_v2(conn_t *conn) {
  cublasHandle_t handle;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCreate_v2(&handle);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDestroy_v2(conn_t *conn) {
  cublasHandle_t handle;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDestroy_v2(handle);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasGetVersion_v2(conn_t *conn) {
  cublasHandle_t handle;
  int version;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &version, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasGetVersion_v2(handle, &version);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &version, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasGetProperty(conn_t *conn) {
  libraryPropertyType type;
  int value;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &type, sizeof(libraryPropertyType)) < 0 ||
      rpc_read(conn, &value, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasGetProperty(type, &value);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &value, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSetStream_v2(conn_t *conn) {
  cublasHandle_t handle;
  cudaStream_t streamId;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &streamId, sizeof(cudaStream_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSetStream_v2(handle, streamId);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasGetStream_v2(conn_t *conn) {
  cublasHandle_t handle;
  cudaStream_t streamId;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &streamId, sizeof(cudaStream_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasGetStream_v2(handle, &streamId);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &streamId, sizeof(cudaStream_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasGetPointerMode_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasPointerMode_t mode;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &mode, sizeof(cublasPointerMode_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasGetPointerMode_v2(handle, &mode);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &mode, sizeof(cublasPointerMode_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSetPointerMode_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasPointerMode_t mode;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &mode, sizeof(cublasPointerMode_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSetPointerMode_v2(handle, mode);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasGetAtomicsMode(conn_t *conn) {
  cublasHandle_t handle;
  cublasAtomicsMode_t mode;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &mode, sizeof(cublasAtomicsMode_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasGetAtomicsMode(handle, &mode);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &mode, sizeof(cublasAtomicsMode_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSetAtomicsMode(conn_t *conn) {
  cublasHandle_t handle;
  cublasAtomicsMode_t mode;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &mode, sizeof(cublasAtomicsMode_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSetAtomicsMode(handle, mode);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasGetMathMode(conn_t *conn) {
  cublasHandle_t handle;
  cublasMath_t mode;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &mode, sizeof(cublasMath_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasGetMathMode(handle, &mode);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &mode, sizeof(cublasMath_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSetMathMode(conn_t *conn) {
  cublasHandle_t handle;
  cublasMath_t mode;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &mode, sizeof(cublasMath_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSetMathMode(handle, mode);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasGetSmCountTarget(conn_t *conn) {
  cublasHandle_t handle;
  int smCountTarget;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &smCountTarget, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasGetSmCountTarget(handle, &smCountTarget);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &smCountTarget, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSetSmCountTarget(conn_t *conn) {
  cublasHandle_t handle;
  int smCountTarget;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &smCountTarget, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSetSmCountTarget(handle, smCountTarget);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasLoggerConfigure(conn_t *conn) {
  int logIsOn;
  int logToStdOut;
  int logToStdErr;
  const char *logFileName;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &logIsOn, sizeof(int)) < 0 ||
      rpc_read(conn, &logToStdOut, sizeof(int)) < 0 ||
      rpc_read(conn, &logToStdErr, sizeof(int)) < 0 ||
      rpc_read(conn, &logFileName, sizeof(const char *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasLoggerConfigure(logIsOn, logToStdOut, logToStdErr, logFileName);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSetLoggerCallback(conn_t *conn) {
  cublasLogCallback userCallback;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &userCallback, sizeof(cublasLogCallback)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSetLoggerCallback(userCallback);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasGetLoggerCallback(conn_t *conn) {
  cublasLogCallback userCallback;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &userCallback, sizeof(cublasLogCallback)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasGetLoggerCallback(&userCallback);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &userCallback, sizeof(cublasLogCallback)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSnrm2_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const float *x;
  int incx;
  float result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &result, sizeof(float)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSnrm2_v2(handle, n, x, incx, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSnrm2_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const float *x;
  int64_t incx;
  float result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &result, sizeof(float)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSnrm2_v2_64(handle, n, x, incx, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDnrm2_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const double *x;
  int incx;
  double result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &result, sizeof(double)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDnrm2_v2(handle, n, x, incx, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDnrm2_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const double *x;
  int64_t incx;
  double result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &result, sizeof(double)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDnrm2_v2_64(handle, n, x, incx, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasScnrm2_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const cuComplex *x;
  int incx;
  float result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &result, sizeof(float)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasScnrm2_v2(handle, n, x, incx, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasScnrm2_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const cuComplex *x;
  int64_t incx;
  float result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &result, sizeof(float)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasScnrm2_v2_64(handle, n, x, incx, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDznrm2_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const cuDoubleComplex *x;
  int incx;
  double result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &result, sizeof(double)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDznrm2_v2(handle, n, x, incx, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDznrm2_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const cuDoubleComplex *x;
  int64_t incx;
  double result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &result, sizeof(double)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDznrm2_v2_64(handle, n, x, incx, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSdot_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const float *x;
  int incx;
  const float *y;
  int incy;
  float result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &result, sizeof(float)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSdot_v2(handle, n, x, incx, y, incy, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSdot_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const float *x;
  int64_t incx;
  const float *y;
  int64_t incy;
  float result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &result, sizeof(float)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasSdot_v2_64(handle, n, x, incx, y, incy, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDdot_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const double *x;
  int incx;
  const double *y;
  int incy;
  double result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &result, sizeof(double)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDdot_v2(handle, n, x, incx, y, incy, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDdot_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const double *x;
  int64_t incx;
  const double *y;
  int64_t incy;
  double result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &result, sizeof(double)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDdot_v2_64(handle, n, x, incx, y, incy, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCdotu_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const cuComplex *x;
  int incx;
  const cuComplex *y;
  int incy;
  cuComplex result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &result, sizeof(cuComplex)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCdotu_v2(handle, n, x, incx, y, incy, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCdotu_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const cuComplex *x;
  int64_t incx;
  const cuComplex *y;
  int64_t incy;
  cuComplex result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &result, sizeof(cuComplex)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCdotu_v2_64(handle, n, x, incx, y, incy, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCdotc_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const cuComplex *x;
  int incx;
  const cuComplex *y;
  int incy;
  cuComplex result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &result, sizeof(cuComplex)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCdotc_v2(handle, n, x, incx, y, incy, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCdotc_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const cuComplex *x;
  int64_t incx;
  const cuComplex *y;
  int64_t incy;
  cuComplex result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &result, sizeof(cuComplex)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCdotc_v2_64(handle, n, x, incx, y, incy, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZdotu_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const cuDoubleComplex *x;
  int incx;
  const cuDoubleComplex *y;
  int incy;
  cuDoubleComplex result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &result, sizeof(cuDoubleComplex)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZdotu_v2(handle, n, x, incx, y, incy, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZdotu_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const cuDoubleComplex *x;
  int64_t incx;
  const cuDoubleComplex *y;
  int64_t incy;
  cuDoubleComplex result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &result, sizeof(cuDoubleComplex)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZdotu_v2_64(handle, n, x, incx, y, incy, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZdotc_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const cuDoubleComplex *x;
  int incx;
  const cuDoubleComplex *y;
  int incy;
  cuDoubleComplex result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &result, sizeof(cuDoubleComplex)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZdotc_v2(handle, n, x, incx, y, incy, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZdotc_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const cuDoubleComplex *x;
  int64_t incx;
  const cuDoubleComplex *y;
  int64_t incy;
  cuDoubleComplex result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &result, sizeof(cuDoubleComplex)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZdotc_v2_64(handle, n, x, incx, y, incy, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSscal_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const float *alpha;
  float x;
  int incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &x, sizeof(float)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSscal_v2(handle, n, alpha, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSscal_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const float *alpha;
  float x;
  int64_t incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &x, sizeof(float)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSscal_v2_64(handle, n, alpha, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDscal_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const double *alpha;
  double x;
  int incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &x, sizeof(double)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDscal_v2(handle, n, alpha, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDscal_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const double *alpha;
  double x;
  int64_t incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &x, sizeof(double)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDscal_v2_64(handle, n, alpha, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCscal_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const cuComplex *alpha;
  cuComplex x;
  int incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCscal_v2(handle, n, alpha, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCscal_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const cuComplex *alpha;
  cuComplex x;
  int64_t incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCscal_v2_64(handle, n, alpha, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCsscal_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const float *alpha;
  cuComplex x;
  int incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCsscal_v2(handle, n, alpha, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCsscal_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const float *alpha;
  cuComplex x;
  int64_t incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCsscal_v2_64(handle, n, alpha, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZscal_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const cuDoubleComplex *alpha;
  cuDoubleComplex x;
  int incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZscal_v2(handle, n, alpha, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZscal_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const cuDoubleComplex *alpha;
  cuDoubleComplex x;
  int64_t incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZscal_v2_64(handle, n, alpha, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZdscal_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const double *alpha;
  cuDoubleComplex x;
  int incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZdscal_v2(handle, n, alpha, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZdscal_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const double *alpha;
  cuDoubleComplex x;
  int64_t incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZdscal_v2_64(handle, n, alpha, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSaxpy_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const float *alpha;
  const float *x;
  int incx;
  float y;
  int incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &x, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(float)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSaxpy_v2(handle, n, alpha, x, incx, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSaxpy_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const float *alpha;
  const float *x;
  int64_t incx;
  float y;
  int64_t incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &x, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(float)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasSaxpy_v2_64(handle, n, alpha, x, incx, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDaxpy_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const double *alpha;
  const double *x;
  int incx;
  double y;
  int incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &x, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(double)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDaxpy_v2(handle, n, alpha, x, incx, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDaxpy_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const double *alpha;
  const double *x;
  int64_t incx;
  double y;
  int64_t incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &x, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(double)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDaxpy_v2_64(handle, n, alpha, x, incx, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCaxpy_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const cuComplex *alpha;
  const cuComplex *x;
  int incx;
  cuComplex y;
  int incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCaxpy_v2(handle, n, alpha, x, incx, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCaxpy_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const cuComplex *alpha;
  const cuComplex *x;
  int64_t incx;
  cuComplex y;
  int64_t incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCaxpy_v2_64(handle, n, alpha, x, incx, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZaxpy_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *x;
  int incx;
  cuDoubleComplex y;
  int incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZaxpy_v2(handle, n, alpha, x, incx, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZaxpy_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *x;
  int64_t incx;
  cuDoubleComplex y;
  int64_t incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZaxpy_v2_64(handle, n, alpha, x, incx, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasScopy_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const float *x;
  int incx;
  float y;
  int incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(float)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasScopy_v2(handle, n, x, incx, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasScopy_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const float *x;
  int64_t incx;
  float y;
  int64_t incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(float)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasScopy_v2_64(handle, n, x, incx, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDcopy_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const double *x;
  int incx;
  double y;
  int incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(double)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDcopy_v2(handle, n, x, incx, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDcopy_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const double *x;
  int64_t incx;
  double y;
  int64_t incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(double)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDcopy_v2_64(handle, n, x, incx, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCcopy_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const cuComplex *x;
  int incx;
  cuComplex y;
  int incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCcopy_v2(handle, n, x, incx, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCcopy_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const cuComplex *x;
  int64_t incx;
  cuComplex y;
  int64_t incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCcopy_v2_64(handle, n, x, incx, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZcopy_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const cuDoubleComplex *x;
  int incx;
  cuDoubleComplex y;
  int incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZcopy_v2(handle, n, x, incx, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZcopy_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const cuDoubleComplex *x;
  int64_t incx;
  cuDoubleComplex y;
  int64_t incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZcopy_v2_64(handle, n, x, incx, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSswap_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  float x;
  int incx;
  float y;
  int incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(float)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(float)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSswap_v2(handle, n, &x, incx, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(float)) < 0 ||
      rpc_write(conn, &y, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSswap_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  float x;
  int64_t incx;
  float y;
  int64_t incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(float)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(float)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSswap_v2_64(handle, n, &x, incx, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(float)) < 0 ||
      rpc_write(conn, &y, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDswap_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  double x;
  int incx;
  double y;
  int incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(double)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(double)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDswap_v2(handle, n, &x, incx, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(double)) < 0 ||
      rpc_write(conn, &y, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDswap_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  double x;
  int64_t incx;
  double y;
  int64_t incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(double)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(double)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDswap_v2_64(handle, n, &x, incx, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(double)) < 0 ||
      rpc_write(conn, &y, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCswap_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  cuComplex x;
  int incx;
  cuComplex y;
  int incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCswap_v2(handle, n, &x, incx, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCswap_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  cuComplex x;
  int64_t incx;
  cuComplex y;
  int64_t incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCswap_v2_64(handle, n, &x, incx, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZswap_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  cuDoubleComplex x;
  int incx;
  cuDoubleComplex y;
  int incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZswap_v2(handle, n, &x, incx, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZswap_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  cuDoubleComplex x;
  int64_t incx;
  cuDoubleComplex y;
  int64_t incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZswap_v2_64(handle, n, &x, incx, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasIsamax_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const float *x;
  int incx;
  int result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &result, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasIsamax_v2(handle, n, x, incx, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasIsamax_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const float *x;
  int64_t incx;
  int64_t result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &result, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasIsamax_v2_64(handle, n, x, incx, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(int64_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasIdamax_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const double *x;
  int incx;
  int result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &result, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasIdamax_v2(handle, n, x, incx, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasIdamax_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const double *x;
  int64_t incx;
  int64_t result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &result, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasIdamax_v2_64(handle, n, x, incx, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(int64_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasIcamax_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const cuComplex *x;
  int incx;
  int result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &result, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasIcamax_v2(handle, n, x, incx, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasIcamax_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const cuComplex *x;
  int64_t incx;
  int64_t result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &result, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasIcamax_v2_64(handle, n, x, incx, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(int64_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasIzamax_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const cuDoubleComplex *x;
  int incx;
  int result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &result, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasIzamax_v2(handle, n, x, incx, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasIzamax_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const cuDoubleComplex *x;
  int64_t incx;
  int64_t result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &result, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasIzamax_v2_64(handle, n, x, incx, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(int64_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasIamaxEx(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const void *x;
  cudaDataType xType;
  int incx;
  int result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const void *)) < 0 ||
      rpc_read(conn, &xType, sizeof(cudaDataType)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &result, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasIamaxEx(handle, n, x, xType, incx, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasIamaxEx_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const void *x;
  cudaDataType xType;
  int64_t incx;
  int64_t result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const void *)) < 0 ||
      rpc_read(conn, &xType, sizeof(cudaDataType)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &result, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasIamaxEx_64(handle, n, x, xType, incx, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(int64_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasIsamin_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const float *x;
  int incx;
  int result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &result, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasIsamin_v2(handle, n, x, incx, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasIsamin_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const float *x;
  int64_t incx;
  int64_t result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &result, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasIsamin_v2_64(handle, n, x, incx, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(int64_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasIdamin_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const double *x;
  int incx;
  int result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &result, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasIdamin_v2(handle, n, x, incx, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasIdamin_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const double *x;
  int64_t incx;
  int64_t result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &result, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasIdamin_v2_64(handle, n, x, incx, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(int64_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasIcamin_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const cuComplex *x;
  int incx;
  int result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &result, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasIcamin_v2(handle, n, x, incx, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasIcamin_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const cuComplex *x;
  int64_t incx;
  int64_t result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &result, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasIcamin_v2_64(handle, n, x, incx, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(int64_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasIzamin_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const cuDoubleComplex *x;
  int incx;
  int result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &result, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasIzamin_v2(handle, n, x, incx, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasIzamin_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const cuDoubleComplex *x;
  int64_t incx;
  int64_t result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &result, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasIzamin_v2_64(handle, n, x, incx, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(int64_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasIaminEx(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const void *x;
  cudaDataType xType;
  int incx;
  int result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const void *)) < 0 ||
      rpc_read(conn, &xType, sizeof(cudaDataType)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &result, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasIaminEx(handle, n, x, xType, incx, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasIaminEx_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const void *x;
  cudaDataType xType;
  int64_t incx;
  int64_t result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const void *)) < 0 ||
      rpc_read(conn, &xType, sizeof(cudaDataType)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &result, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasIaminEx_64(handle, n, x, xType, incx, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(int64_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSasum_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const float *x;
  int incx;
  float result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &result, sizeof(float)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSasum_v2(handle, n, x, incx, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSasum_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const float *x;
  int64_t incx;
  float result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &result, sizeof(float)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSasum_v2_64(handle, n, x, incx, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDasum_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const double *x;
  int incx;
  double result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &result, sizeof(double)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDasum_v2(handle, n, x, incx, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDasum_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const double *x;
  int64_t incx;
  double result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &result, sizeof(double)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDasum_v2_64(handle, n, x, incx, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasScasum_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const cuComplex *x;
  int incx;
  float result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &result, sizeof(float)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasScasum_v2(handle, n, x, incx, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasScasum_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const cuComplex *x;
  int64_t incx;
  float result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &result, sizeof(float)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasScasum_v2_64(handle, n, x, incx, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDzasum_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  const cuDoubleComplex *x;
  int incx;
  double result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &result, sizeof(double)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDzasum_v2(handle, n, x, incx, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDzasum_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  const cuDoubleComplex *x;
  int64_t incx;
  double result;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &result, sizeof(double)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDzasum_v2_64(handle, n, x, incx, &result);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &result, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSrot_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  float x;
  int incx;
  float y;
  int incy;
  const float *c;
  const float *s;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(float)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(float)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &c, sizeof(const float *)) < 0 ||
      rpc_read(conn, &s, sizeof(const float *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSrot_v2(handle, n, &x, incx, &y, incy, c, s);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(float)) < 0 ||
      rpc_write(conn, &y, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSrot_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  float x;
  int64_t incx;
  float y;
  int64_t incy;
  const float *c;
  const float *s;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(float)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(float)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &c, sizeof(const float *)) < 0 ||
      rpc_read(conn, &s, sizeof(const float *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasSrot_v2_64(handle, n, &x, incx, &y, incy, c, s);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(float)) < 0 ||
      rpc_write(conn, &y, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDrot_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  double x;
  int incx;
  double y;
  int incy;
  const double *c;
  const double *s;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(double)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(double)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &c, sizeof(const double *)) < 0 ||
      rpc_read(conn, &s, sizeof(const double *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDrot_v2(handle, n, &x, incx, &y, incy, c, s);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(double)) < 0 ||
      rpc_write(conn, &y, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDrot_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  double x;
  int64_t incx;
  double y;
  int64_t incy;
  const double *c;
  const double *s;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(double)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(double)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &c, sizeof(const double *)) < 0 ||
      rpc_read(conn, &s, sizeof(const double *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDrot_v2_64(handle, n, &x, incx, &y, incy, c, s);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(double)) < 0 ||
      rpc_write(conn, &y, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCrot_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  cuComplex x;
  int incx;
  cuComplex y;
  int incy;
  const float *c;
  const cuComplex *s;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &c, sizeof(const float *)) < 0 ||
      rpc_read(conn, &s, sizeof(const cuComplex *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCrot_v2(handle, n, &x, incx, &y, incy, c, s);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCrot_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  cuComplex x;
  int64_t incx;
  cuComplex y;
  int64_t incy;
  const float *c;
  const cuComplex *s;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &c, sizeof(const float *)) < 0 ||
      rpc_read(conn, &s, sizeof(const cuComplex *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCrot_v2_64(handle, n, &x, incx, &y, incy, c, s);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCsrot_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  cuComplex x;
  int incx;
  cuComplex y;
  int incy;
  const float *c;
  const float *s;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &c, sizeof(const float *)) < 0 ||
      rpc_read(conn, &s, sizeof(const float *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCsrot_v2(handle, n, &x, incx, &y, incy, c, s);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCsrot_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  cuComplex x;
  int64_t incx;
  cuComplex y;
  int64_t incy;
  const float *c;
  const float *s;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &c, sizeof(const float *)) < 0 ||
      rpc_read(conn, &s, sizeof(const float *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCsrot_v2_64(handle, n, &x, incx, &y, incy, c, s);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZrot_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  cuDoubleComplex x;
  int incx;
  cuDoubleComplex y;
  int incy;
  const double *c;
  const cuDoubleComplex *s;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &c, sizeof(const double *)) < 0 ||
      rpc_read(conn, &s, sizeof(const cuDoubleComplex *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZrot_v2(handle, n, &x, incx, &y, incy, c, s);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZrot_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  cuDoubleComplex x;
  int64_t incx;
  cuDoubleComplex y;
  int64_t incy;
  const double *c;
  const cuDoubleComplex *s;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &c, sizeof(const double *)) < 0 ||
      rpc_read(conn, &s, sizeof(const cuDoubleComplex *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZrot_v2_64(handle, n, &x, incx, &y, incy, c, s);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZdrot_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  cuDoubleComplex x;
  int incx;
  cuDoubleComplex y;
  int incy;
  const double *c;
  const double *s;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &c, sizeof(const double *)) < 0 ||
      rpc_read(conn, &s, sizeof(const double *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZdrot_v2(handle, n, &x, incx, &y, incy, c, s);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZdrot_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  cuDoubleComplex x;
  int64_t incx;
  cuDoubleComplex y;
  int64_t incy;
  const double *c;
  const double *s;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &c, sizeof(const double *)) < 0 ||
      rpc_read(conn, &s, sizeof(const double *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZdrot_v2_64(handle, n, &x, incx, &y, incy, c, s);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSrotg_v2(conn_t *conn) {
  cublasHandle_t handle;
  float a;
  float b;
  float c;
  float s;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &a, sizeof(float)) < 0 ||
      rpc_read(conn, &b, sizeof(float)) < 0 ||
      rpc_read(conn, &c, sizeof(float)) < 0 ||
      rpc_read(conn, &s, sizeof(float)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSrotg_v2(handle, &a, &b, &c, &s);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &a, sizeof(float)) < 0 ||
      rpc_write(conn, &b, sizeof(float)) < 0 ||
      rpc_write(conn, &c, sizeof(float)) < 0 ||
      rpc_write(conn, &s, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDrotg_v2(conn_t *conn) {
  cublasHandle_t handle;
  double a;
  double b;
  double c;
  double s;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &a, sizeof(double)) < 0 ||
      rpc_read(conn, &b, sizeof(double)) < 0 ||
      rpc_read(conn, &c, sizeof(double)) < 0 ||
      rpc_read(conn, &s, sizeof(double)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDrotg_v2(handle, &a, &b, &c, &s);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &a, sizeof(double)) < 0 ||
      rpc_write(conn, &b, sizeof(double)) < 0 ||
      rpc_write(conn, &c, sizeof(double)) < 0 ||
      rpc_write(conn, &s, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCrotg_v2(conn_t *conn) {
  cublasHandle_t handle;
  cuComplex a;
  cuComplex b;
  float c;
  cuComplex s;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &a, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &b, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &c, sizeof(float)) < 0 ||
      rpc_read(conn, &s, sizeof(cuComplex)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCrotg_v2(handle, &a, &b, &c, &s);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &a, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &b, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &c, sizeof(float)) < 0 ||
      rpc_write(conn, &s, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZrotg_v2(conn_t *conn) {
  cublasHandle_t handle;
  cuDoubleComplex a;
  cuDoubleComplex b;
  double c;
  cuDoubleComplex s;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &a, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &b, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &c, sizeof(double)) < 0 ||
      rpc_read(conn, &s, sizeof(cuDoubleComplex)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZrotg_v2(handle, &a, &b, &c, &s);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &a, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &b, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &c, sizeof(double)) < 0 ||
      rpc_write(conn, &s, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSrotm_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  float x;
  int incx;
  float y;
  int incy;
  const float *param;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(float)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(float)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &param, sizeof(const float *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSrotm_v2(handle, n, &x, incx, &y, incy, param);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(float)) < 0 ||
      rpc_write(conn, &y, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSrotm_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  float x;
  int64_t incx;
  float y;
  int64_t incy;
  const float *param;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(float)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(float)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &param, sizeof(const float *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasSrotm_v2_64(handle, n, &x, incx, &y, incy, param);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(float)) < 0 ||
      rpc_write(conn, &y, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDrotm_v2(conn_t *conn) {
  cublasHandle_t handle;
  int n;
  double x;
  int incx;
  double y;
  int incy;
  const double *param;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(double)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(double)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &param, sizeof(const double *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDrotm_v2(handle, n, &x, incx, &y, incy, param);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(double)) < 0 ||
      rpc_write(conn, &y, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDrotm_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t n;
  double x;
  int64_t incx;
  double y;
  int64_t incy;
  const double *param;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(double)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(double)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &param, sizeof(const double *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDrotm_v2_64(handle, n, &x, incx, &y, incy, param);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(double)) < 0 ||
      rpc_write(conn, &y, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSrotmg_v2(conn_t *conn) {
  cublasHandle_t handle;
  float d1;
  float d2;
  float x1;
  const float *y1;
  float param;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &d1, sizeof(float)) < 0 ||
      rpc_read(conn, &d2, sizeof(float)) < 0 ||
      rpc_read(conn, &x1, sizeof(float)) < 0 ||
      rpc_read(conn, &y1, sizeof(const float *)) < 0 ||
      rpc_read(conn, &param, sizeof(float)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSrotmg_v2(handle, &d1, &d2, &x1, y1, &param);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &d1, sizeof(float)) < 0 ||
      rpc_write(conn, &d2, sizeof(float)) < 0 ||
      rpc_write(conn, &x1, sizeof(float)) < 0 ||
      rpc_write(conn, &param, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDrotmg_v2(conn_t *conn) {
  cublasHandle_t handle;
  double d1;
  double d2;
  double x1;
  const double *y1;
  double param;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &d1, sizeof(double)) < 0 ||
      rpc_read(conn, &d2, sizeof(double)) < 0 ||
      rpc_read(conn, &x1, sizeof(double)) < 0 ||
      rpc_read(conn, &y1, sizeof(const double *)) < 0 ||
      rpc_read(conn, &param, sizeof(double)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDrotmg_v2(handle, &d1, &d2, &x1, y1, &param);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &d1, sizeof(double)) < 0 ||
      rpc_write(conn, &d2, sizeof(double)) < 0 ||
      rpc_write(conn, &x1, sizeof(double)) < 0 ||
      rpc_write(conn, &param, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSgemv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t trans;
  int m;
  int n;
  const float *alpha;
  const float *A;
  int lda;
  const float *x;
  int incx;
  const float *beta;
  float y;
  int incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &y, sizeof(float)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSgemv_v2(handle, trans, m, n, alpha, A, lda, x,
                                          incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSgemv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t trans;
  int64_t m;
  int64_t n;
  const float *alpha;
  const float *A;
  int64_t lda;
  const float *x;
  int64_t incx;
  const float *beta;
  float y;
  int64_t incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &y, sizeof(float)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSgemv_v2_64(handle, trans, m, n, alpha, A, lda,
                                             x, incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDgemv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t trans;
  int m;
  int n;
  const double *alpha;
  const double *A;
  int lda;
  const double *x;
  int incx;
  const double *beta;
  double y;
  int incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const double *)) < 0 ||
      rpc_read(conn, &y, sizeof(double)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDgemv_v2(handle, trans, m, n, alpha, A, lda, x,
                                          incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDgemv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t trans;
  int64_t m;
  int64_t n;
  const double *alpha;
  const double *A;
  int64_t lda;
  const double *x;
  int64_t incx;
  const double *beta;
  double y;
  int64_t incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const double *)) < 0 ||
      rpc_read(conn, &y, sizeof(double)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDgemv_v2_64(handle, trans, m, n, alpha, A, lda,
                                             x, incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCgemv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t trans;
  int m;
  int n;
  const cuComplex *alpha;
  const cuComplex *A;
  int lda;
  const cuComplex *x;
  int incx;
  const cuComplex *beta;
  cuComplex y;
  int incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCgemv_v2(handle, trans, m, n, alpha, A, lda, x,
                                          incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCgemv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t trans;
  int64_t m;
  int64_t n;
  const cuComplex *alpha;
  const cuComplex *A;
  int64_t lda;
  const cuComplex *x;
  int64_t incx;
  const cuComplex *beta;
  cuComplex y;
  int64_t incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCgemv_v2_64(handle, trans, m, n, alpha, A, lda,
                                             x, incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZgemv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t trans;
  int m;
  int n;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *A;
  int lda;
  const cuDoubleComplex *x;
  int incx;
  const cuDoubleComplex *beta;
  cuDoubleComplex y;
  int incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZgemv_v2(handle, trans, m, n, alpha, A, lda, x,
                                          incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZgemv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t trans;
  int64_t m;
  int64_t n;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *A;
  int64_t lda;
  const cuDoubleComplex *x;
  int64_t incx;
  const cuDoubleComplex *beta;
  cuDoubleComplex y;
  int64_t incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZgemv_v2_64(handle, trans, m, n, alpha, A, lda,
                                             x, incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSgbmv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t trans;
  int m;
  int n;
  int kl;
  int ku;
  const float *alpha;
  const float *A;
  int lda;
  const float *x;
  int incx;
  const float *beta;
  float y;
  int incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &kl, sizeof(int)) < 0 ||
      rpc_read(conn, &ku, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &y, sizeof(float)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSgbmv_v2(handle, trans, m, n, kl, ku, alpha, A,
                                          lda, x, incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSgbmv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t trans;
  int64_t m;
  int64_t n;
  int64_t kl;
  int64_t ku;
  const float *alpha;
  const float *A;
  int64_t lda;
  const float *x;
  int64_t incx;
  const float *beta;
  float y;
  int64_t incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &kl, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &ku, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &y, sizeof(float)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSgbmv_v2_64(handle, trans, m, n, kl, ku, alpha,
                                             A, lda, x, incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDgbmv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t trans;
  int m;
  int n;
  int kl;
  int ku;
  const double *alpha;
  const double *A;
  int lda;
  const double *x;
  int incx;
  const double *beta;
  double y;
  int incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &kl, sizeof(int)) < 0 ||
      rpc_read(conn, &ku, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const double *)) < 0 ||
      rpc_read(conn, &y, sizeof(double)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDgbmv_v2(handle, trans, m, n, kl, ku, alpha, A,
                                          lda, x, incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDgbmv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t trans;
  int64_t m;
  int64_t n;
  int64_t kl;
  int64_t ku;
  const double *alpha;
  const double *A;
  int64_t lda;
  const double *x;
  int64_t incx;
  const double *beta;
  double y;
  int64_t incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &kl, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &ku, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const double *)) < 0 ||
      rpc_read(conn, &y, sizeof(double)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDgbmv_v2_64(handle, trans, m, n, kl, ku, alpha,
                                             A, lda, x, incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCgbmv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t trans;
  int m;
  int n;
  int kl;
  int ku;
  const cuComplex *alpha;
  const cuComplex *A;
  int lda;
  const cuComplex *x;
  int incx;
  const cuComplex *beta;
  cuComplex y;
  int incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &kl, sizeof(int)) < 0 ||
      rpc_read(conn, &ku, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCgbmv_v2(handle, trans, m, n, kl, ku, alpha, A,
                                          lda, x, incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCgbmv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t trans;
  int64_t m;
  int64_t n;
  int64_t kl;
  int64_t ku;
  const cuComplex *alpha;
  const cuComplex *A;
  int64_t lda;
  const cuComplex *x;
  int64_t incx;
  const cuComplex *beta;
  cuComplex y;
  int64_t incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &kl, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &ku, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCgbmv_v2_64(handle, trans, m, n, kl, ku, alpha,
                                             A, lda, x, incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZgbmv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t trans;
  int m;
  int n;
  int kl;
  int ku;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *A;
  int lda;
  const cuDoubleComplex *x;
  int incx;
  const cuDoubleComplex *beta;
  cuDoubleComplex y;
  int incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &kl, sizeof(int)) < 0 ||
      rpc_read(conn, &ku, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZgbmv_v2(handle, trans, m, n, kl, ku, alpha, A,
                                          lda, x, incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZgbmv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t trans;
  int64_t m;
  int64_t n;
  int64_t kl;
  int64_t ku;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *A;
  int64_t lda;
  const cuDoubleComplex *x;
  int64_t incx;
  const cuDoubleComplex *beta;
  cuDoubleComplex y;
  int64_t incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &kl, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &ku, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZgbmv_v2_64(handle, trans, m, n, kl, ku, alpha,
                                             A, lda, x, incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasStrmv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int n;
  const float *A;
  int lda;
  float x;
  int incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(float)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasStrmv_v2(handle, uplo, trans, diag, n, A, lda, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasStrmv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int64_t n;
  const float *A;
  int64_t lda;
  float x;
  int64_t incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(float)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasStrmv_v2_64(handle, uplo, trans, diag, n, A, lda, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDtrmv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int n;
  const double *A;
  int lda;
  double x;
  int incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(double)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDtrmv_v2(handle, uplo, trans, diag, n, A, lda, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDtrmv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int64_t n;
  const double *A;
  int64_t lda;
  double x;
  int64_t incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(double)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDtrmv_v2_64(handle, uplo, trans, diag, n, A, lda, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCtrmv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int n;
  const cuComplex *A;
  int lda;
  cuComplex x;
  int incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCtrmv_v2(handle, uplo, trans, diag, n, A, lda, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCtrmv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int64_t n;
  const cuComplex *A;
  int64_t lda;
  cuComplex x;
  int64_t incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCtrmv_v2_64(handle, uplo, trans, diag, n, A, lda, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZtrmv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int n;
  const cuDoubleComplex *A;
  int lda;
  cuDoubleComplex x;
  int incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZtrmv_v2(handle, uplo, trans, diag, n, A, lda, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZtrmv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int64_t n;
  const cuDoubleComplex *A;
  int64_t lda;
  cuDoubleComplex x;
  int64_t incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZtrmv_v2_64(handle, uplo, trans, diag, n, A, lda, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasStbmv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int n;
  int k;
  const float *A;
  int lda;
  float x;
  int incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(float)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasStbmv_v2(handle, uplo, trans, diag, n, k, A, lda, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasStbmv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int64_t n;
  int64_t k;
  const float *A;
  int64_t lda;
  float x;
  int64_t incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(float)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasStbmv_v2_64(handle, uplo, trans, diag, n, k, A, lda, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDtbmv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int n;
  int k;
  const double *A;
  int lda;
  double x;
  int incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(double)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDtbmv_v2(handle, uplo, trans, diag, n, k, A, lda, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDtbmv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int64_t n;
  int64_t k;
  const double *A;
  int64_t lda;
  double x;
  int64_t incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(double)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDtbmv_v2_64(handle, uplo, trans, diag, n, k, A, lda, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCtbmv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int n;
  int k;
  const cuComplex *A;
  int lda;
  cuComplex x;
  int incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCtbmv_v2(handle, uplo, trans, diag, n, k, A, lda, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCtbmv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int64_t n;
  int64_t k;
  const cuComplex *A;
  int64_t lda;
  cuComplex x;
  int64_t incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCtbmv_v2_64(handle, uplo, trans, diag, n, k, A, lda, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZtbmv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int n;
  int k;
  const cuDoubleComplex *A;
  int lda;
  cuDoubleComplex x;
  int incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZtbmv_v2(handle, uplo, trans, diag, n, k, A, lda, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZtbmv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int64_t n;
  int64_t k;
  const cuDoubleComplex *A;
  int64_t lda;
  cuDoubleComplex x;
  int64_t incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZtbmv_v2_64(handle, uplo, trans, diag, n, k, A, lda, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasStpmv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int n;
  const float *AP;
  float x;
  int incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &AP, sizeof(const float *)) < 0 ||
      rpc_read(conn, &x, sizeof(float)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasStpmv_v2(handle, uplo, trans, diag, n, AP, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasStpmv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int64_t n;
  const float *AP;
  float x;
  int64_t incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &AP, sizeof(const float *)) < 0 ||
      rpc_read(conn, &x, sizeof(float)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasStpmv_v2_64(handle, uplo, trans, diag, n, AP, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDtpmv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int n;
  const double *AP;
  double x;
  int incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &AP, sizeof(const double *)) < 0 ||
      rpc_read(conn, &x, sizeof(double)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDtpmv_v2(handle, uplo, trans, diag, n, AP, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDtpmv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int64_t n;
  const double *AP;
  double x;
  int64_t incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &AP, sizeof(const double *)) < 0 ||
      rpc_read(conn, &x, sizeof(double)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDtpmv_v2_64(handle, uplo, trans, diag, n, AP, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCtpmv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int n;
  const cuComplex *AP;
  cuComplex x;
  int incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &AP, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCtpmv_v2(handle, uplo, trans, diag, n, AP, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCtpmv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int64_t n;
  const cuComplex *AP;
  cuComplex x;
  int64_t incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &AP, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCtpmv_v2_64(handle, uplo, trans, diag, n, AP, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZtpmv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int n;
  const cuDoubleComplex *AP;
  cuDoubleComplex x;
  int incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &AP, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZtpmv_v2(handle, uplo, trans, diag, n, AP, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZtpmv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int64_t n;
  const cuDoubleComplex *AP;
  cuDoubleComplex x;
  int64_t incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &AP, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZtpmv_v2_64(handle, uplo, trans, diag, n, AP, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasStrsv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int n;
  const float *A;
  int lda;
  float x;
  int incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(float)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasStrsv_v2(handle, uplo, trans, diag, n, A, lda, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasStrsv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int64_t n;
  const float *A;
  int64_t lda;
  float x;
  int64_t incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(float)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasStrsv_v2_64(handle, uplo, trans, diag, n, A, lda, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDtrsv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int n;
  const double *A;
  int lda;
  double x;
  int incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(double)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDtrsv_v2(handle, uplo, trans, diag, n, A, lda, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDtrsv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int64_t n;
  const double *A;
  int64_t lda;
  double x;
  int64_t incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(double)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDtrsv_v2_64(handle, uplo, trans, diag, n, A, lda, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCtrsv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int n;
  const cuComplex *A;
  int lda;
  cuComplex x;
  int incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCtrsv_v2(handle, uplo, trans, diag, n, A, lda, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCtrsv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int64_t n;
  const cuComplex *A;
  int64_t lda;
  cuComplex x;
  int64_t incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCtrsv_v2_64(handle, uplo, trans, diag, n, A, lda, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZtrsv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int n;
  const cuDoubleComplex *A;
  int lda;
  cuDoubleComplex x;
  int incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZtrsv_v2(handle, uplo, trans, diag, n, A, lda, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZtrsv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int64_t n;
  const cuDoubleComplex *A;
  int64_t lda;
  cuDoubleComplex x;
  int64_t incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZtrsv_v2_64(handle, uplo, trans, diag, n, A, lda, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasStpsv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int n;
  const float *AP;
  float x;
  int incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &AP, sizeof(const float *)) < 0 ||
      rpc_read(conn, &x, sizeof(float)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasStpsv_v2(handle, uplo, trans, diag, n, AP, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasStpsv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int64_t n;
  const float *AP;
  float x;
  int64_t incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &AP, sizeof(const float *)) < 0 ||
      rpc_read(conn, &x, sizeof(float)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasStpsv_v2_64(handle, uplo, trans, diag, n, AP, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDtpsv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int n;
  const double *AP;
  double x;
  int incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &AP, sizeof(const double *)) < 0 ||
      rpc_read(conn, &x, sizeof(double)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDtpsv_v2(handle, uplo, trans, diag, n, AP, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDtpsv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int64_t n;
  const double *AP;
  double x;
  int64_t incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &AP, sizeof(const double *)) < 0 ||
      rpc_read(conn, &x, sizeof(double)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDtpsv_v2_64(handle, uplo, trans, diag, n, AP, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCtpsv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int n;
  const cuComplex *AP;
  cuComplex x;
  int incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &AP, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCtpsv_v2(handle, uplo, trans, diag, n, AP, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCtpsv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int64_t n;
  const cuComplex *AP;
  cuComplex x;
  int64_t incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &AP, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCtpsv_v2_64(handle, uplo, trans, diag, n, AP, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZtpsv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int n;
  const cuDoubleComplex *AP;
  cuDoubleComplex x;
  int incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &AP, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZtpsv_v2(handle, uplo, trans, diag, n, AP, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZtpsv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int64_t n;
  const cuDoubleComplex *AP;
  cuDoubleComplex x;
  int64_t incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &AP, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZtpsv_v2_64(handle, uplo, trans, diag, n, AP, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasStbsv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int n;
  int k;
  const float *A;
  int lda;
  float x;
  int incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(float)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasStbsv_v2(handle, uplo, trans, diag, n, k, A, lda, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasStbsv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int64_t n;
  int64_t k;
  const float *A;
  int64_t lda;
  float x;
  int64_t incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(float)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasStbsv_v2_64(handle, uplo, trans, diag, n, k, A, lda, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDtbsv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int n;
  int k;
  const double *A;
  int lda;
  double x;
  int incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(double)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDtbsv_v2(handle, uplo, trans, diag, n, k, A, lda, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDtbsv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int64_t n;
  int64_t k;
  const double *A;
  int64_t lda;
  double x;
  int64_t incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(double)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDtbsv_v2_64(handle, uplo, trans, diag, n, k, A, lda, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCtbsv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int n;
  int k;
  const cuComplex *A;
  int lda;
  cuComplex x;
  int incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCtbsv_v2(handle, uplo, trans, diag, n, k, A, lda, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCtbsv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int64_t n;
  int64_t k;
  const cuComplex *A;
  int64_t lda;
  cuComplex x;
  int64_t incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCtbsv_v2_64(handle, uplo, trans, diag, n, k, A, lda, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZtbsv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int n;
  int k;
  const cuDoubleComplex *A;
  int lda;
  cuDoubleComplex x;
  int incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZtbsv_v2(handle, uplo, trans, diag, n, k, A, lda, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZtbsv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int64_t n;
  int64_t k;
  const cuDoubleComplex *A;
  int64_t lda;
  cuDoubleComplex x;
  int64_t incx;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZtbsv_v2_64(handle, uplo, trans, diag, n, k, A, lda, &x, incx);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &x, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSsymv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  const float *alpha;
  const float *A;
  int lda;
  const float *x;
  int incx;
  const float *beta;
  float y;
  int incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &y, sizeof(float)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasSsymv_v2(handle, uplo, n, alpha, A, lda, x, incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSsymv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int64_t n;
  const float *alpha;
  const float *A;
  int64_t lda;
  const float *x;
  int64_t incx;
  const float *beta;
  float y;
  int64_t incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &y, sizeof(float)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSsymv_v2_64(handle, uplo, n, alpha, A, lda, x,
                                             incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDsymv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  const double *alpha;
  const double *A;
  int lda;
  const double *x;
  int incx;
  const double *beta;
  double y;
  int incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const double *)) < 0 ||
      rpc_read(conn, &y, sizeof(double)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDsymv_v2(handle, uplo, n, alpha, A, lda, x, incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDsymv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int64_t n;
  const double *alpha;
  const double *A;
  int64_t lda;
  const double *x;
  int64_t incx;
  const double *beta;
  double y;
  int64_t incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const double *)) < 0 ||
      rpc_read(conn, &y, sizeof(double)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDsymv_v2_64(handle, uplo, n, alpha, A, lda, x,
                                             incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCsymv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  const cuComplex *alpha;
  const cuComplex *A;
  int lda;
  const cuComplex *x;
  int incx;
  const cuComplex *beta;
  cuComplex y;
  int incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCsymv_v2(handle, uplo, n, alpha, A, lda, x, incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCsymv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int64_t n;
  const cuComplex *alpha;
  const cuComplex *A;
  int64_t lda;
  const cuComplex *x;
  int64_t incx;
  const cuComplex *beta;
  cuComplex y;
  int64_t incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCsymv_v2_64(handle, uplo, n, alpha, A, lda, x,
                                             incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZsymv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *A;
  int lda;
  const cuDoubleComplex *x;
  int incx;
  const cuDoubleComplex *beta;
  cuDoubleComplex y;
  int incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZsymv_v2(handle, uplo, n, alpha, A, lda, x, incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZsymv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int64_t n;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *A;
  int64_t lda;
  const cuDoubleComplex *x;
  int64_t incx;
  const cuDoubleComplex *beta;
  cuDoubleComplex y;
  int64_t incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZsymv_v2_64(handle, uplo, n, alpha, A, lda, x,
                                             incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasChemv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  const cuComplex *alpha;
  const cuComplex *A;
  int lda;
  const cuComplex *x;
  int incx;
  const cuComplex *beta;
  cuComplex y;
  int incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasChemv_v2(handle, uplo, n, alpha, A, lda, x, incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasChemv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int64_t n;
  const cuComplex *alpha;
  const cuComplex *A;
  int64_t lda;
  const cuComplex *x;
  int64_t incx;
  const cuComplex *beta;
  cuComplex y;
  int64_t incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasChemv_v2_64(handle, uplo, n, alpha, A, lda, x,
                                             incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZhemv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *A;
  int lda;
  const cuDoubleComplex *x;
  int incx;
  const cuDoubleComplex *beta;
  cuDoubleComplex y;
  int incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZhemv_v2(handle, uplo, n, alpha, A, lda, x, incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZhemv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int64_t n;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *A;
  int64_t lda;
  const cuDoubleComplex *x;
  int64_t incx;
  const cuDoubleComplex *beta;
  cuDoubleComplex y;
  int64_t incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZhemv_v2_64(handle, uplo, n, alpha, A, lda, x,
                                             incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSsbmv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  int k;
  const float *alpha;
  const float *A;
  int lda;
  const float *x;
  int incx;
  const float *beta;
  float y;
  int incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &y, sizeof(float)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSsbmv_v2(handle, uplo, n, k, alpha, A, lda, x,
                                          incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSsbmv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int64_t n;
  int64_t k;
  const float *alpha;
  const float *A;
  int64_t lda;
  const float *x;
  int64_t incx;
  const float *beta;
  float y;
  int64_t incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &y, sizeof(float)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSsbmv_v2_64(handle, uplo, n, k, alpha, A, lda,
                                             x, incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDsbmv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  int k;
  const double *alpha;
  const double *A;
  int lda;
  const double *x;
  int incx;
  const double *beta;
  double y;
  int incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const double *)) < 0 ||
      rpc_read(conn, &y, sizeof(double)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDsbmv_v2(handle, uplo, n, k, alpha, A, lda, x,
                                          incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDsbmv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int64_t n;
  int64_t k;
  const double *alpha;
  const double *A;
  int64_t lda;
  const double *x;
  int64_t incx;
  const double *beta;
  double y;
  int64_t incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const double *)) < 0 ||
      rpc_read(conn, &y, sizeof(double)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDsbmv_v2_64(handle, uplo, n, k, alpha, A, lda,
                                             x, incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasChbmv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  int k;
  const cuComplex *alpha;
  const cuComplex *A;
  int lda;
  const cuComplex *x;
  int incx;
  const cuComplex *beta;
  cuComplex y;
  int incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasChbmv_v2(handle, uplo, n, k, alpha, A, lda, x,
                                          incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasChbmv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int64_t n;
  int64_t k;
  const cuComplex *alpha;
  const cuComplex *A;
  int64_t lda;
  const cuComplex *x;
  int64_t incx;
  const cuComplex *beta;
  cuComplex y;
  int64_t incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasChbmv_v2_64(handle, uplo, n, k, alpha, A, lda,
                                             x, incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZhbmv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  int k;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *A;
  int lda;
  const cuDoubleComplex *x;
  int incx;
  const cuDoubleComplex *beta;
  cuDoubleComplex y;
  int incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZhbmv_v2(handle, uplo, n, k, alpha, A, lda, x,
                                          incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZhbmv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int64_t n;
  int64_t k;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *A;
  int64_t lda;
  const cuDoubleComplex *x;
  int64_t incx;
  const cuDoubleComplex *beta;
  cuDoubleComplex y;
  int64_t incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZhbmv_v2_64(handle, uplo, n, k, alpha, A, lda,
                                             x, incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSspmv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  const float *alpha;
  const float *AP;
  const float *x;
  int incx;
  const float *beta;
  float y;
  int incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &AP, sizeof(const float *)) < 0 ||
      rpc_read(conn, &x, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &y, sizeof(float)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasSspmv_v2(handle, uplo, n, alpha, AP, x, incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSspmv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int64_t n;
  const float *alpha;
  const float *AP;
  const float *x;
  int64_t incx;
  const float *beta;
  float y;
  int64_t incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &AP, sizeof(const float *)) < 0 ||
      rpc_read(conn, &x, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &y, sizeof(float)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasSspmv_v2_64(handle, uplo, n, alpha, AP, x, incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDspmv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  const double *alpha;
  const double *AP;
  const double *x;
  int incx;
  const double *beta;
  double y;
  int incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &AP, sizeof(const double *)) < 0 ||
      rpc_read(conn, &x, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const double *)) < 0 ||
      rpc_read(conn, &y, sizeof(double)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDspmv_v2(handle, uplo, n, alpha, AP, x, incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDspmv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int64_t n;
  const double *alpha;
  const double *AP;
  const double *x;
  int64_t incx;
  const double *beta;
  double y;
  int64_t incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &AP, sizeof(const double *)) < 0 ||
      rpc_read(conn, &x, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const double *)) < 0 ||
      rpc_read(conn, &y, sizeof(double)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDspmv_v2_64(handle, uplo, n, alpha, AP, x, incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasChpmv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  const cuComplex *alpha;
  const cuComplex *AP;
  const cuComplex *x;
  int incx;
  const cuComplex *beta;
  cuComplex y;
  int incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &AP, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasChpmv_v2(handle, uplo, n, alpha, AP, x, incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasChpmv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int64_t n;
  const cuComplex *alpha;
  const cuComplex *AP;
  const cuComplex *x;
  int64_t incx;
  const cuComplex *beta;
  cuComplex y;
  int64_t incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &AP, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasChpmv_v2_64(handle, uplo, n, alpha, AP, x, incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZhpmv_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *AP;
  const cuDoubleComplex *x;
  int incx;
  const cuDoubleComplex *beta;
  cuDoubleComplex y;
  int incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &AP, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZhpmv_v2(handle, uplo, n, alpha, AP, x, incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZhpmv_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int64_t n;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *AP;
  const cuDoubleComplex *x;
  int64_t incx;
  const cuDoubleComplex *beta;
  cuDoubleComplex y;
  int64_t incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &AP, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZhpmv_v2_64(handle, uplo, n, alpha, AP, x, incx, beta, &y, incy);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSger_v2(conn_t *conn) {
  cublasHandle_t handle;
  int m;
  int n;
  const float *alpha;
  const float *x;
  int incx;
  const float *y;
  int incy;
  float A;
  int lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &x, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(float)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasSger_v2(handle, m, n, alpha, x, incx, y, incy, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSger_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t m;
  int64_t n;
  const float *alpha;
  const float *x;
  int64_t incx;
  const float *y;
  int64_t incy;
  float A;
  int64_t lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &x, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(float)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasSger_v2_64(handle, m, n, alpha, x, incx, y, incy, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDger_v2(conn_t *conn) {
  cublasHandle_t handle;
  int m;
  int n;
  const double *alpha;
  const double *x;
  int incx;
  const double *y;
  int incy;
  double A;
  int lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &x, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(double)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDger_v2(handle, m, n, alpha, x, incx, y, incy, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDger_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t m;
  int64_t n;
  const double *alpha;
  const double *x;
  int64_t incx;
  const double *y;
  int64_t incy;
  double A;
  int64_t lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &x, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(double)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDger_v2_64(handle, m, n, alpha, x, incx, y, incy, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCgeru_v2(conn_t *conn) {
  cublasHandle_t handle;
  int m;
  int n;
  const cuComplex *alpha;
  const cuComplex *x;
  int incx;
  const cuComplex *y;
  int incy;
  cuComplex A;
  int lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCgeru_v2(handle, m, n, alpha, x, incx, y, incy, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCgeru_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t m;
  int64_t n;
  const cuComplex *alpha;
  const cuComplex *x;
  int64_t incx;
  const cuComplex *y;
  int64_t incy;
  cuComplex A;
  int64_t lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCgeru_v2_64(handle, m, n, alpha, x, incx, y, incy, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCgerc_v2(conn_t *conn) {
  cublasHandle_t handle;
  int m;
  int n;
  const cuComplex *alpha;
  const cuComplex *x;
  int incx;
  const cuComplex *y;
  int incy;
  cuComplex A;
  int lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCgerc_v2(handle, m, n, alpha, x, incx, y, incy, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCgerc_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t m;
  int64_t n;
  const cuComplex *alpha;
  const cuComplex *x;
  int64_t incx;
  const cuComplex *y;
  int64_t incy;
  cuComplex A;
  int64_t lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCgerc_v2_64(handle, m, n, alpha, x, incx, y, incy, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZgeru_v2(conn_t *conn) {
  cublasHandle_t handle;
  int m;
  int n;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *x;
  int incx;
  const cuDoubleComplex *y;
  int incy;
  cuDoubleComplex A;
  int lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZgeru_v2(handle, m, n, alpha, x, incx, y, incy, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZgeru_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t m;
  int64_t n;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *x;
  int64_t incx;
  const cuDoubleComplex *y;
  int64_t incy;
  cuDoubleComplex A;
  int64_t lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZgeru_v2_64(handle, m, n, alpha, x, incx, y, incy, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZgerc_v2(conn_t *conn) {
  cublasHandle_t handle;
  int m;
  int n;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *x;
  int incx;
  const cuDoubleComplex *y;
  int incy;
  cuDoubleComplex A;
  int lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZgerc_v2(handle, m, n, alpha, x, incx, y, incy, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZgerc_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  int64_t m;
  int64_t n;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *x;
  int64_t incx;
  const cuDoubleComplex *y;
  int64_t incy;
  cuDoubleComplex A;
  int64_t lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZgerc_v2_64(handle, m, n, alpha, x, incx, y, incy, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSsyr_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  const float *alpha;
  const float *x;
  int incx;
  float A;
  int lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &x, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(float)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasSsyr_v2(handle, uplo, n, alpha, x, incx, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSsyr_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int64_t n;
  const float *alpha;
  const float *x;
  int64_t incx;
  float A;
  int64_t lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &x, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(float)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasSsyr_v2_64(handle, uplo, n, alpha, x, incx, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDsyr_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  const double *alpha;
  const double *x;
  int incx;
  double A;
  int lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &x, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(double)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDsyr_v2(handle, uplo, n, alpha, x, incx, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDsyr_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int64_t n;
  const double *alpha;
  const double *x;
  int64_t incx;
  double A;
  int64_t lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &x, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(double)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDsyr_v2_64(handle, uplo, n, alpha, x, incx, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCsyr_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  const cuComplex *alpha;
  const cuComplex *x;
  int incx;
  cuComplex A;
  int lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCsyr_v2(handle, uplo, n, alpha, x, incx, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCsyr_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int64_t n;
  const cuComplex *alpha;
  const cuComplex *x;
  int64_t incx;
  cuComplex A;
  int64_t lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCsyr_v2_64(handle, uplo, n, alpha, x, incx, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZsyr_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *x;
  int incx;
  cuDoubleComplex A;
  int lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZsyr_v2(handle, uplo, n, alpha, x, incx, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZsyr_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int64_t n;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *x;
  int64_t incx;
  cuDoubleComplex A;
  int64_t lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZsyr_v2_64(handle, uplo, n, alpha, x, incx, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCher_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  const float *alpha;
  const cuComplex *x;
  int incx;
  cuComplex A;
  int lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCher_v2(handle, uplo, n, alpha, x, incx, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCher_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int64_t n;
  const float *alpha;
  const cuComplex *x;
  int64_t incx;
  cuComplex A;
  int64_t lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCher_v2_64(handle, uplo, n, alpha, x, incx, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZher_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  const double *alpha;
  const cuDoubleComplex *x;
  int incx;
  cuDoubleComplex A;
  int lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZher_v2(handle, uplo, n, alpha, x, incx, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZher_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int64_t n;
  const double *alpha;
  const cuDoubleComplex *x;
  int64_t incx;
  cuDoubleComplex A;
  int64_t lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZher_v2_64(handle, uplo, n, alpha, x, incx, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSspr_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  const float *alpha;
  const float *x;
  int incx;
  float AP;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &x, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &AP, sizeof(float)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSspr_v2(handle, uplo, n, alpha, x, incx, &AP);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &AP, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSspr_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int64_t n;
  const float *alpha;
  const float *x;
  int64_t incx;
  float AP;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &x, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &AP, sizeof(float)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasSspr_v2_64(handle, uplo, n, alpha, x, incx, &AP);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &AP, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDspr_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  const double *alpha;
  const double *x;
  int incx;
  double AP;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &x, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &AP, sizeof(double)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDspr_v2(handle, uplo, n, alpha, x, incx, &AP);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &AP, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDspr_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int64_t n;
  const double *alpha;
  const double *x;
  int64_t incx;
  double AP;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &x, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &AP, sizeof(double)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDspr_v2_64(handle, uplo, n, alpha, x, incx, &AP);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &AP, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasChpr_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  const float *alpha;
  const cuComplex *x;
  int incx;
  cuComplex AP;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &AP, sizeof(cuComplex)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasChpr_v2(handle, uplo, n, alpha, x, incx, &AP);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &AP, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasChpr_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int64_t n;
  const float *alpha;
  const cuComplex *x;
  int64_t incx;
  cuComplex AP;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &AP, sizeof(cuComplex)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasChpr_v2_64(handle, uplo, n, alpha, x, incx, &AP);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &AP, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZhpr_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  const double *alpha;
  const cuDoubleComplex *x;
  int incx;
  cuDoubleComplex AP;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &AP, sizeof(cuDoubleComplex)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZhpr_v2(handle, uplo, n, alpha, x, incx, &AP);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &AP, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZhpr_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int64_t n;
  const double *alpha;
  const cuDoubleComplex *x;
  int64_t incx;
  cuDoubleComplex AP;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &AP, sizeof(cuDoubleComplex)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZhpr_v2_64(handle, uplo, n, alpha, x, incx, &AP);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &AP, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSsyr2_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  const float *alpha;
  const float *x;
  int incx;
  const float *y;
  int incy;
  float A;
  int lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &x, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(float)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasSsyr2_v2(handle, uplo, n, alpha, x, incx, y, incy, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSsyr2_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int64_t n;
  const float *alpha;
  const float *x;
  int64_t incx;
  const float *y;
  int64_t incy;
  float A;
  int64_t lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &x, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(float)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasSsyr2_v2_64(handle, uplo, n, alpha, x, incx, y, incy, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDsyr2_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  const double *alpha;
  const double *x;
  int incx;
  const double *y;
  int incy;
  double A;
  int lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &x, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(double)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDsyr2_v2(handle, uplo, n, alpha, x, incx, y, incy, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDsyr2_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int64_t n;
  const double *alpha;
  const double *x;
  int64_t incx;
  const double *y;
  int64_t incy;
  double A;
  int64_t lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &x, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(double)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDsyr2_v2_64(handle, uplo, n, alpha, x, incx, y, incy, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCsyr2_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  const cuComplex *alpha;
  const cuComplex *x;
  int incx;
  const cuComplex *y;
  int incy;
  cuComplex A;
  int lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCsyr2_v2(handle, uplo, n, alpha, x, incx, y, incy, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCsyr2_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int64_t n;
  const cuComplex *alpha;
  const cuComplex *x;
  int64_t incx;
  const cuComplex *y;
  int64_t incy;
  cuComplex A;
  int64_t lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCsyr2_v2_64(handle, uplo, n, alpha, x, incx, y, incy, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZsyr2_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *x;
  int incx;
  const cuDoubleComplex *y;
  int incy;
  cuDoubleComplex A;
  int lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZsyr2_v2(handle, uplo, n, alpha, x, incx, y, incy, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZsyr2_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int64_t n;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *x;
  int64_t incx;
  const cuDoubleComplex *y;
  int64_t incy;
  cuDoubleComplex A;
  int64_t lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZsyr2_v2_64(handle, uplo, n, alpha, x, incx, y, incy, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCher2_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  const cuComplex *alpha;
  const cuComplex *x;
  int incx;
  const cuComplex *y;
  int incy;
  cuComplex A;
  int lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCher2_v2(handle, uplo, n, alpha, x, incx, y, incy, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCher2_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int64_t n;
  const cuComplex *alpha;
  const cuComplex *x;
  int64_t incx;
  const cuComplex *y;
  int64_t incy;
  cuComplex A;
  int64_t lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCher2_v2_64(handle, uplo, n, alpha, x, incx, y, incy, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZher2_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *x;
  int incx;
  const cuDoubleComplex *y;
  int incy;
  cuDoubleComplex A;
  int lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZher2_v2(handle, uplo, n, alpha, x, incx, y, incy, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZher2_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int64_t n;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *x;
  int64_t incx;
  const cuDoubleComplex *y;
  int64_t incy;
  cuDoubleComplex A;
  int64_t lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZher2_v2_64(handle, uplo, n, alpha, x, incx, y, incy, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSspr2_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  const float *alpha;
  const float *x;
  int incx;
  const float *y;
  int incy;
  float AP;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &x, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &AP, sizeof(float)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasSspr2_v2(handle, uplo, n, alpha, x, incx, y, incy, &AP);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &AP, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSspr2_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int64_t n;
  const float *alpha;
  const float *x;
  int64_t incx;
  const float *y;
  int64_t incy;
  float AP;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &x, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &AP, sizeof(float)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasSspr2_v2_64(handle, uplo, n, alpha, x, incx, y, incy, &AP);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &AP, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDspr2_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  const double *alpha;
  const double *x;
  int incx;
  const double *y;
  int incy;
  double AP;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &x, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &AP, sizeof(double)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDspr2_v2(handle, uplo, n, alpha, x, incx, y, incy, &AP);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &AP, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDspr2_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int64_t n;
  const double *alpha;
  const double *x;
  int64_t incx;
  const double *y;
  int64_t incy;
  double AP;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &x, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &AP, sizeof(double)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDspr2_v2_64(handle, uplo, n, alpha, x, incx, y, incy, &AP);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &AP, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasChpr2_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  const cuComplex *alpha;
  const cuComplex *x;
  int incx;
  const cuComplex *y;
  int incy;
  cuComplex AP;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &AP, sizeof(cuComplex)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasChpr2_v2(handle, uplo, n, alpha, x, incx, y, incy, &AP);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &AP, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasChpr2_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int64_t n;
  const cuComplex *alpha;
  const cuComplex *x;
  int64_t incx;
  const cuComplex *y;
  int64_t incy;
  cuComplex AP;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &AP, sizeof(cuComplex)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasChpr2_v2_64(handle, uplo, n, alpha, x, incx, y, incy, &AP);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &AP, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZhpr2_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *x;
  int incx;
  const cuDoubleComplex *y;
  int incy;
  cuDoubleComplex AP;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &y, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &AP, sizeof(cuDoubleComplex)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZhpr2_v2(handle, uplo, n, alpha, x, incx, y, incy, &AP);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &AP, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZhpr2_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int64_t n;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *x;
  int64_t incx;
  const cuDoubleComplex *y;
  int64_t incy;
  cuDoubleComplex AP;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &y, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &AP, sizeof(cuDoubleComplex)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZhpr2_v2_64(handle, uplo, n, alpha, x, incx, y, incy, &AP);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &AP, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSgemvBatched(conn_t *conn) {
  int batchCount;
  cublasHandle_t handle;
  cublasOperation_t trans;
  int m;
  int n;
  const float *alpha;
  const float **Aarray = nullptr;
  int lda;
  const float **xarray = nullptr;
  int incx;
  const float *beta;
  float **yarray = nullptr;
  int incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchCount, sizeof(int)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &Aarray, sizeof(const float *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &xarray, sizeof(const float *const *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &yarray, sizeof(float *const *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasSgemvBatched(handle, trans, m, n, alpha, Aarray, lda, xarray, incx,
                         beta, yarray, incy, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasTSTgemvBatched(conn_t *conn) {
  int batchCount;
  cublasHandle_t handle;
  cublasOperation_t trans;
  int m;
  int n;
  const float *alpha;
  const __nv_bfloat16 **Aarray = nullptr;
  int lda;
  const __nv_bfloat16 **xarray = nullptr;
  int incx;
  const float *beta;
  __nv_bfloat16 **yarray = nullptr;
  int incy;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchCount, sizeof(int)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &Aarray, sizeof(const __nv_bfloat16 *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &xarray, sizeof(const __nv_bfloat16 *const *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &yarray, sizeof(__nv_bfloat16 *const *)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasTSTgemvBatched(handle, trans, m, n, alpha, Aarray, lda, xarray,
                           incx, beta, yarray, incy, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSgemvStridedBatched(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t trans;
  int m;
  int n;
  const float *alpha;
  const float *A;
  int lda;
  long long int strideA;
  const float *x;
  int incx;
  long long int stridex;
  const float *beta;
  float y;
  int incy;
  long long int stridey;
  int batchCount;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &strideA, sizeof(long long int)) < 0 ||
      rpc_read(conn, &x, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &stridex, sizeof(long long int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &y, sizeof(float)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &stridey, sizeof(long long int)) < 0 ||
      rpc_read(conn, &batchCount, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSgemvStridedBatched(
      handle, trans, m, n, alpha, A, lda, strideA, x, incx, stridex, beta, &y,
      incy, stridey, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSgemvStridedBatched_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t trans;
  int64_t m;
  int64_t n;
  const float *alpha;
  const float *A;
  int64_t lda;
  long long int strideA;
  const float *x;
  int64_t incx;
  long long int stridex;
  const float *beta;
  float y;
  int64_t incy;
  long long int stridey;
  int64_t batchCount;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &strideA, sizeof(long long int)) < 0 ||
      rpc_read(conn, &x, sizeof(const float *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &stridex, sizeof(long long int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &y, sizeof(float)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &stridey, sizeof(long long int)) < 0 ||
      rpc_read(conn, &batchCount, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSgemvStridedBatched_64(
      handle, trans, m, n, alpha, A, lda, strideA, x, incx, stridex, beta, &y,
      incy, stridey, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDgemvStridedBatched(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t trans;
  int m;
  int n;
  const double *alpha;
  const double *A;
  int lda;
  long long int strideA;
  const double *x;
  int incx;
  long long int stridex;
  const double *beta;
  double y;
  int incy;
  long long int stridey;
  int batchCount;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &strideA, sizeof(long long int)) < 0 ||
      rpc_read(conn, &x, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &stridex, sizeof(long long int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const double *)) < 0 ||
      rpc_read(conn, &y, sizeof(double)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &stridey, sizeof(long long int)) < 0 ||
      rpc_read(conn, &batchCount, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDgemvStridedBatched(
      handle, trans, m, n, alpha, A, lda, strideA, x, incx, stridex, beta, &y,
      incy, stridey, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDgemvStridedBatched_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t trans;
  int64_t m;
  int64_t n;
  const double *alpha;
  const double *A;
  int64_t lda;
  long long int strideA;
  const double *x;
  int64_t incx;
  long long int stridex;
  const double *beta;
  double y;
  int64_t incy;
  long long int stridey;
  int64_t batchCount;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &strideA, sizeof(long long int)) < 0 ||
      rpc_read(conn, &x, sizeof(const double *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &stridex, sizeof(long long int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const double *)) < 0 ||
      rpc_read(conn, &y, sizeof(double)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &stridey, sizeof(long long int)) < 0 ||
      rpc_read(conn, &batchCount, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDgemvStridedBatched_64(
      handle, trans, m, n, alpha, A, lda, strideA, x, incx, stridex, beta, &y,
      incy, stridey, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCgemvStridedBatched(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t trans;
  int m;
  int n;
  const cuComplex *alpha;
  const cuComplex *A;
  int lda;
  long long int strideA;
  const cuComplex *x;
  int incx;
  long long int stridex;
  const cuComplex *beta;
  cuComplex y;
  int incy;
  long long int stridey;
  int batchCount;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &strideA, sizeof(long long int)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &stridex, sizeof(long long int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &stridey, sizeof(long long int)) < 0 ||
      rpc_read(conn, &batchCount, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCgemvStridedBatched(
      handle, trans, m, n, alpha, A, lda, strideA, x, incx, stridex, beta, &y,
      incy, stridey, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCgemvStridedBatched_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t trans;
  int64_t m;
  int64_t n;
  const cuComplex *alpha;
  const cuComplex *A;
  int64_t lda;
  long long int strideA;
  const cuComplex *x;
  int64_t incx;
  long long int stridex;
  const cuComplex *beta;
  cuComplex y;
  int64_t incy;
  long long int stridey;
  int64_t batchCount;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &strideA, sizeof(long long int)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &stridex, sizeof(long long int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &stridey, sizeof(long long int)) < 0 ||
      rpc_read(conn, &batchCount, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCgemvStridedBatched_64(
      handle, trans, m, n, alpha, A, lda, strideA, x, incx, stridex, beta, &y,
      incy, stridey, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZgemvStridedBatched(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t trans;
  int m;
  int n;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *A;
  int lda;
  long long int strideA;
  const cuDoubleComplex *x;
  int incx;
  long long int stridex;
  const cuDoubleComplex *beta;
  cuDoubleComplex y;
  int incy;
  long long int stridey;
  int batchCount;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &strideA, sizeof(long long int)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &stridex, sizeof(long long int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &stridey, sizeof(long long int)) < 0 ||
      rpc_read(conn, &batchCount, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZgemvStridedBatched(
      handle, trans, m, n, alpha, A, lda, strideA, x, incx, stridex, beta, &y,
      incy, stridey, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZgemvStridedBatched_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t trans;
  int64_t m;
  int64_t n;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *A;
  int64_t lda;
  long long int strideA;
  const cuDoubleComplex *x;
  int64_t incx;
  long long int stridex;
  const cuDoubleComplex *beta;
  cuDoubleComplex y;
  int64_t incy;
  long long int stridey;
  int64_t batchCount;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &strideA, sizeof(long long int)) < 0 ||
      rpc_read(conn, &x, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &stridex, sizeof(long long int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &stridey, sizeof(long long int)) < 0 ||
      rpc_read(conn, &batchCount, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZgemvStridedBatched_64(
      handle, trans, m, n, alpha, A, lda, strideA, x, incx, stridex, beta, &y,
      incy, stridey, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasHSHgemvStridedBatched(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t trans;
  int m;
  int n;
  const float *alpha;
  const __half *A;
  int lda;
  long long int strideA;
  const __half *x;
  int incx;
  long long int stridex;
  const float *beta;
  __half y;
  int incy;
  long long int stridey;
  int batchCount;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &A, sizeof(const __half *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &strideA, sizeof(long long int)) < 0 ||
      rpc_read(conn, &x, sizeof(const __half *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &stridex, sizeof(long long int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &y, sizeof(__half)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &stridey, sizeof(long long int)) < 0 ||
      rpc_read(conn, &batchCount, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasHSHgemvStridedBatched(
      handle, trans, m, n, alpha, A, lda, strideA, x, incx, stridex, beta, &y,
      incy, stridey, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(__half)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasHSHgemvStridedBatched_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t trans;
  int64_t m;
  int64_t n;
  const float *alpha;
  const __half *A;
  int64_t lda;
  long long int strideA;
  const __half *x;
  int64_t incx;
  long long int stridex;
  const float *beta;
  __half y;
  int64_t incy;
  long long int stridey;
  int64_t batchCount;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &A, sizeof(const __half *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &strideA, sizeof(long long int)) < 0 ||
      rpc_read(conn, &x, sizeof(const __half *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &stridex, sizeof(long long int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &y, sizeof(__half)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &stridey, sizeof(long long int)) < 0 ||
      rpc_read(conn, &batchCount, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasHSHgemvStridedBatched_64(
      handle, trans, m, n, alpha, A, lda, strideA, x, incx, stridex, beta, &y,
      incy, stridey, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(__half)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasHSSgemvStridedBatched(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t trans;
  int m;
  int n;
  const float *alpha;
  const __half *A;
  int lda;
  long long int strideA;
  const __half *x;
  int incx;
  long long int stridex;
  const float *beta;
  float y;
  int incy;
  long long int stridey;
  int batchCount;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &A, sizeof(const __half *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &strideA, sizeof(long long int)) < 0 ||
      rpc_read(conn, &x, sizeof(const __half *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &stridex, sizeof(long long int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &y, sizeof(float)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &stridey, sizeof(long long int)) < 0 ||
      rpc_read(conn, &batchCount, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasHSSgemvStridedBatched(
      handle, trans, m, n, alpha, A, lda, strideA, x, incx, stridex, beta, &y,
      incy, stridey, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasHSSgemvStridedBatched_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t trans;
  int64_t m;
  int64_t n;
  const float *alpha;
  const __half *A;
  int64_t lda;
  long long int strideA;
  const __half *x;
  int64_t incx;
  long long int stridex;
  const float *beta;
  float y;
  int64_t incy;
  long long int stridey;
  int64_t batchCount;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &A, sizeof(const __half *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &strideA, sizeof(long long int)) < 0 ||
      rpc_read(conn, &x, sizeof(const __half *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &stridex, sizeof(long long int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &y, sizeof(float)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &stridey, sizeof(long long int)) < 0 ||
      rpc_read(conn, &batchCount, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasHSSgemvStridedBatched_64(
      handle, trans, m, n, alpha, A, lda, strideA, x, incx, stridex, beta, &y,
      incy, stridey, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasTSTgemvStridedBatched(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t trans;
  int m;
  int n;
  const float *alpha;
  const __nv_bfloat16 *A;
  int lda;
  long long int strideA;
  const __nv_bfloat16 *x;
  int incx;
  long long int stridex;
  const float *beta;
  __nv_bfloat16 y;
  int incy;
  long long int stridey;
  int batchCount;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &A, sizeof(const __nv_bfloat16 *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &strideA, sizeof(long long int)) < 0 ||
      rpc_read(conn, &x, sizeof(const __nv_bfloat16 *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &stridex, sizeof(long long int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &y, sizeof(__nv_bfloat16)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &stridey, sizeof(long long int)) < 0 ||
      rpc_read(conn, &batchCount, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasTSTgemvStridedBatched(
      handle, trans, m, n, alpha, A, lda, strideA, x, incx, stridex, beta, &y,
      incy, stridey, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(__nv_bfloat16)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasTSTgemvStridedBatched_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t trans;
  int64_t m;
  int64_t n;
  const float *alpha;
  const __nv_bfloat16 *A;
  int64_t lda;
  long long int strideA;
  const __nv_bfloat16 *x;
  int64_t incx;
  long long int stridex;
  const float *beta;
  __nv_bfloat16 y;
  int64_t incy;
  long long int stridey;
  int64_t batchCount;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &A, sizeof(const __nv_bfloat16 *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &strideA, sizeof(long long int)) < 0 ||
      rpc_read(conn, &x, sizeof(const __nv_bfloat16 *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &stridex, sizeof(long long int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &y, sizeof(__nv_bfloat16)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &stridey, sizeof(long long int)) < 0 ||
      rpc_read(conn, &batchCount, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasTSTgemvStridedBatched_64(
      handle, trans, m, n, alpha, A, lda, strideA, x, incx, stridex, beta, &y,
      incy, stridey, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(__nv_bfloat16)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasTSSgemvStridedBatched(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t trans;
  int m;
  int n;
  const float *alpha;
  const __nv_bfloat16 *A;
  int lda;
  long long int strideA;
  const __nv_bfloat16 *x;
  int incx;
  long long int stridex;
  const float *beta;
  float y;
  int incy;
  long long int stridey;
  int batchCount;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &A, sizeof(const __nv_bfloat16 *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &strideA, sizeof(long long int)) < 0 ||
      rpc_read(conn, &x, sizeof(const __nv_bfloat16 *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &stridex, sizeof(long long int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &y, sizeof(float)) < 0 ||
      rpc_read(conn, &incy, sizeof(int)) < 0 ||
      rpc_read(conn, &stridey, sizeof(long long int)) < 0 ||
      rpc_read(conn, &batchCount, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasTSSgemvStridedBatched(
      handle, trans, m, n, alpha, A, lda, strideA, x, incx, stridex, beta, &y,
      incy, stridey, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasTSSgemvStridedBatched_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t trans;
  int64_t m;
  int64_t n;
  const float *alpha;
  const __nv_bfloat16 *A;
  int64_t lda;
  long long int strideA;
  const __nv_bfloat16 *x;
  int64_t incx;
  long long int stridex;
  const float *beta;
  float y;
  int64_t incy;
  long long int stridey;
  int64_t batchCount;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &A, sizeof(const __nv_bfloat16 *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &strideA, sizeof(long long int)) < 0 ||
      rpc_read(conn, &x, sizeof(const __nv_bfloat16 *)) < 0 ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &stridex, sizeof(long long int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &y, sizeof(float)) < 0 ||
      rpc_read(conn, &incy, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &stridey, sizeof(long long int)) < 0 ||
      rpc_read(conn, &batchCount, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasTSSgemvStridedBatched_64(
      handle, trans, m, n, alpha, A, lda, strideA, x, incx, stridex, beta, &y,
      incy, stridey, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &y, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSgemm_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int m;
  int n;
  int k;
  float *alpha_null_check;
  float alpha;
  const float *A;
  int lda;
  const float *B;
  int ldb;
  float *beta_null_check;
  float beta;
  float *C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const float *)) < 0 ||
      (alpha_null_check && rpc_read(conn, &alpha, sizeof(const float)) < 0) ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(const float *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &beta_null_check, sizeof(const float *)) < 0 ||
      (beta_null_check && rpc_read(conn, &beta, sizeof(const float)) < 0) ||
      rpc_read(conn, &C, sizeof(float *)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSgemm_v2(
      handle, transa, transb, m, n, k, &alpha, A, lda, B, ldb, &beta, C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSgemm_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int64_t m;
  int64_t n;
  int64_t k;
  const float *alpha;
  const float *A;
  int64_t lda;
  const float *B;
  int64_t ldb;
  const float *beta;
  float C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &B, sizeof(const float *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &C, sizeof(float)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSgemm_v2_64(
      handle, transa, transb, m, n, k, alpha, A, lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDgemm_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int m;
  int n;
  int k;
  const double *alpha;
  const double *A;
  int lda;
  const double *B;
  int ldb;
  const double *beta;
  double C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(const double *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const double *)) < 0 ||
      rpc_read(conn, &C, sizeof(double)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDgemm_v2(handle, transa, transb, m, n, k,
                                          alpha, A, lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDgemm_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int64_t m;
  int64_t n;
  int64_t k;
  const double *alpha;
  const double *A;
  int64_t lda;
  const double *B;
  int64_t ldb;
  const double *beta;
  double C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &B, sizeof(const double *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const double *)) < 0 ||
      rpc_read(conn, &C, sizeof(double)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDgemm_v2_64(
      handle, transa, transb, m, n, k, alpha, A, lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCgemm_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int m;
  int n;
  int k;
  const cuComplex *alpha;
  const cuComplex *A;
  int lda;
  const cuComplex *B;
  int ldb;
  const cuComplex *beta;
  cuComplex C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCgemm_v2(handle, transa, transb, m, n, k,
                                          alpha, A, lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCgemm_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int64_t m;
  int64_t n;
  int64_t k;
  const cuComplex *alpha;
  const cuComplex *A;
  int64_t lda;
  const cuComplex *B;
  int64_t ldb;
  const cuComplex *beta;
  cuComplex C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCgemm_v2_64(
      handle, transa, transb, m, n, k, alpha, A, lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCgemm3m(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int m;
  int n;
  int k;
  const cuComplex *alpha;
  const cuComplex *A;
  int lda;
  const cuComplex *B;
  int ldb;
  const cuComplex *beta;
  cuComplex C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCgemm3m(handle, transa, transb, m, n, k, alpha,
                                         A, lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCgemm3m_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int64_t m;
  int64_t n;
  int64_t k;
  const cuComplex *alpha;
  const cuComplex *A;
  int64_t lda;
  const cuComplex *B;
  int64_t ldb;
  const cuComplex *beta;
  cuComplex C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCgemm3m_64(
      handle, transa, transb, m, n, k, alpha, A, lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZgemm_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int m;
  int n;
  int k;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *A;
  int lda;
  const cuDoubleComplex *B;
  int ldb;
  const cuDoubleComplex *beta;
  cuDoubleComplex C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZgemm_v2(handle, transa, transb, m, n, k,
                                          alpha, A, lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZgemm_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int64_t m;
  int64_t n;
  int64_t k;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *A;
  int64_t lda;
  const cuDoubleComplex *B;
  int64_t ldb;
  const cuDoubleComplex *beta;
  cuDoubleComplex C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZgemm_v2_64(
      handle, transa, transb, m, n, k, alpha, A, lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZgemm3m(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int m;
  int n;
  int k;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *A;
  int lda;
  const cuDoubleComplex *B;
  int ldb;
  const cuDoubleComplex *beta;
  cuDoubleComplex C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZgemm3m(handle, transa, transb, m, n, k, alpha,
                                         A, lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZgemm3m_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int64_t m;
  int64_t n;
  int64_t k;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *A;
  int64_t lda;
  const cuDoubleComplex *B;
  int64_t ldb;
  const cuDoubleComplex *beta;
  cuDoubleComplex C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZgemm3m_64(
      handle, transa, transb, m, n, k, alpha, A, lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasHgemm(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int m;
  int n;
  int k;
  const __half *alpha;
  const __half *A;
  int lda;
  const __half *B;
  int ldb;
  const __half *beta;
  __half C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const __half *)) < 0 ||
      rpc_read(conn, &A, sizeof(const __half *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(const __half *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const __half *)) < 0 ||
      rpc_read(conn, &C, sizeof(__half)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasHgemm(handle, transa, transb, m, n, k, alpha,
                                       A, lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(__half)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasHgemm_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int64_t m;
  int64_t n;
  int64_t k;
  const __half *alpha;
  const __half *A;
  int64_t lda;
  const __half *B;
  int64_t ldb;
  const __half *beta;
  __half C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const __half *)) < 0 ||
      rpc_read(conn, &A, sizeof(const __half *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &B, sizeof(const __half *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const __half *)) < 0 ||
      rpc_read(conn, &C, sizeof(__half)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasHgemm_64(handle, transa, transb, m, n, k,
                                          alpha, A, lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(__half)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSsyrk_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  int n;
  int k;
  const float *alpha;
  const float *A;
  int lda;
  const float *beta;
  float C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &C, sizeof(float)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasSsyrk_v2(handle, uplo, trans, n, k, alpha, A, lda, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSsyrk_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  int64_t n;
  int64_t k;
  const float *alpha;
  const float *A;
  int64_t lda;
  const float *beta;
  float C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &C, sizeof(float)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSsyrk_v2_64(handle, uplo, trans, n, k, alpha,
                                             A, lda, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDsyrk_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  int n;
  int k;
  const double *alpha;
  const double *A;
  int lda;
  const double *beta;
  double C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const double *)) < 0 ||
      rpc_read(conn, &C, sizeof(double)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDsyrk_v2(handle, uplo, trans, n, k, alpha, A, lda, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDsyrk_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  int64_t n;
  int64_t k;
  const double *alpha;
  const double *A;
  int64_t lda;
  const double *beta;
  double C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const double *)) < 0 ||
      rpc_read(conn, &C, sizeof(double)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDsyrk_v2_64(handle, uplo, trans, n, k, alpha,
                                             A, lda, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCsyrk_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  int n;
  int k;
  const cuComplex *alpha;
  const cuComplex *A;
  int lda;
  const cuComplex *beta;
  cuComplex C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCsyrk_v2(handle, uplo, trans, n, k, alpha, A, lda, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCsyrk_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  int64_t n;
  int64_t k;
  const cuComplex *alpha;
  const cuComplex *A;
  int64_t lda;
  const cuComplex *beta;
  cuComplex C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCsyrk_v2_64(handle, uplo, trans, n, k, alpha,
                                             A, lda, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZsyrk_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  int n;
  int k;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *A;
  int lda;
  const cuDoubleComplex *beta;
  cuDoubleComplex C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZsyrk_v2(handle, uplo, trans, n, k, alpha, A, lda, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZsyrk_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  int64_t n;
  int64_t k;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *A;
  int64_t lda;
  const cuDoubleComplex *beta;
  cuDoubleComplex C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZsyrk_v2_64(handle, uplo, trans, n, k, alpha,
                                             A, lda, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCherk_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  int n;
  int k;
  const float *alpha;
  const cuComplex *A;
  int lda;
  const float *beta;
  cuComplex C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCherk_v2(handle, uplo, trans, n, k, alpha, A, lda, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCherk_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  int64_t n;
  int64_t k;
  const float *alpha;
  const cuComplex *A;
  int64_t lda;
  const float *beta;
  cuComplex C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCherk_v2_64(handle, uplo, trans, n, k, alpha,
                                             A, lda, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZherk_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  int n;
  int k;
  const double *alpha;
  const cuDoubleComplex *A;
  int lda;
  const double *beta;
  cuDoubleComplex C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const double *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZherk_v2(handle, uplo, trans, n, k, alpha, A, lda, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZherk_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  int64_t n;
  int64_t k;
  const double *alpha;
  const cuDoubleComplex *A;
  int64_t lda;
  const double *beta;
  cuDoubleComplex C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const double *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZherk_v2_64(handle, uplo, trans, n, k, alpha,
                                             A, lda, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSsyr2k_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  int n;
  int k;
  const float *alpha;
  const float *A;
  int lda;
  const float *B;
  int ldb;
  const float *beta;
  float C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(const float *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &C, sizeof(float)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSsyr2k_v2(handle, uplo, trans, n, k, alpha, A,
                                           lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSsyr2k_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  int64_t n;
  int64_t k;
  const float *alpha;
  const float *A;
  int64_t lda;
  const float *B;
  int64_t ldb;
  const float *beta;
  float C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &B, sizeof(const float *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &C, sizeof(float)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSsyr2k_v2_64(handle, uplo, trans, n, k, alpha,
                                              A, lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDsyr2k_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  int n;
  int k;
  const double *alpha;
  const double *A;
  int lda;
  const double *B;
  int ldb;
  const double *beta;
  double C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(const double *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const double *)) < 0 ||
      rpc_read(conn, &C, sizeof(double)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDsyr2k_v2(handle, uplo, trans, n, k, alpha, A,
                                           lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDsyr2k_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  int64_t n;
  int64_t k;
  const double *alpha;
  const double *A;
  int64_t lda;
  const double *B;
  int64_t ldb;
  const double *beta;
  double C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &B, sizeof(const double *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const double *)) < 0 ||
      rpc_read(conn, &C, sizeof(double)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDsyr2k_v2_64(handle, uplo, trans, n, k, alpha,
                                              A, lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCsyr2k_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  int n;
  int k;
  const cuComplex *alpha;
  const cuComplex *A;
  int lda;
  const cuComplex *B;
  int ldb;
  const cuComplex *beta;
  cuComplex C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCsyr2k_v2(handle, uplo, trans, n, k, alpha, A,
                                           lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCsyr2k_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  int64_t n;
  int64_t k;
  const cuComplex *alpha;
  const cuComplex *A;
  int64_t lda;
  const cuComplex *B;
  int64_t ldb;
  const cuComplex *beta;
  cuComplex C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCsyr2k_v2_64(handle, uplo, trans, n, k, alpha,
                                              A, lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZsyr2k_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  int n;
  int k;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *A;
  int lda;
  const cuDoubleComplex *B;
  int ldb;
  const cuDoubleComplex *beta;
  cuDoubleComplex C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZsyr2k_v2(handle, uplo, trans, n, k, alpha, A,
                                           lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZsyr2k_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  int64_t n;
  int64_t k;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *A;
  int64_t lda;
  const cuDoubleComplex *B;
  int64_t ldb;
  const cuDoubleComplex *beta;
  cuDoubleComplex C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZsyr2k_v2_64(handle, uplo, trans, n, k, alpha,
                                              A, lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCher2k_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  int n;
  int k;
  const cuComplex *alpha;
  const cuComplex *A;
  int lda;
  const cuComplex *B;
  int ldb;
  const float *beta;
  cuComplex C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCher2k_v2(handle, uplo, trans, n, k, alpha, A,
                                           lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCher2k_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  int64_t n;
  int64_t k;
  const cuComplex *alpha;
  const cuComplex *A;
  int64_t lda;
  const cuComplex *B;
  int64_t ldb;
  const float *beta;
  cuComplex C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCher2k_v2_64(handle, uplo, trans, n, k, alpha,
                                              A, lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZher2k_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  int n;
  int k;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *A;
  int lda;
  const cuDoubleComplex *B;
  int ldb;
  const double *beta;
  cuDoubleComplex C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const double *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZher2k_v2(handle, uplo, trans, n, k, alpha, A,
                                           lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZher2k_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  int64_t n;
  int64_t k;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *A;
  int64_t lda;
  const cuDoubleComplex *B;
  int64_t ldb;
  const double *beta;
  cuDoubleComplex C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const double *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZher2k_v2_64(handle, uplo, trans, n, k, alpha,
                                              A, lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSsyrkx(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  int n;
  int k;
  const float *alpha;
  const float *A;
  int lda;
  const float *B;
  int ldb;
  const float *beta;
  float C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(const float *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &C, sizeof(float)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSsyrkx(handle, uplo, trans, n, k, alpha, A,
                                        lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSsyrkx_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  int64_t n;
  int64_t k;
  const float *alpha;
  const float *A;
  int64_t lda;
  const float *B;
  int64_t ldb;
  const float *beta;
  float C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &B, sizeof(const float *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &C, sizeof(float)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSsyrkx_64(handle, uplo, trans, n, k, alpha, A,
                                           lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDsyrkx(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  int n;
  int k;
  const double *alpha;
  const double *A;
  int lda;
  const double *B;
  int ldb;
  const double *beta;
  double C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(const double *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const double *)) < 0 ||
      rpc_read(conn, &C, sizeof(double)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDsyrkx(handle, uplo, trans, n, k, alpha, A,
                                        lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDsyrkx_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  int64_t n;
  int64_t k;
  const double *alpha;
  const double *A;
  int64_t lda;
  const double *B;
  int64_t ldb;
  const double *beta;
  double C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &B, sizeof(const double *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const double *)) < 0 ||
      rpc_read(conn, &C, sizeof(double)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDsyrkx_64(handle, uplo, trans, n, k, alpha, A,
                                           lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCsyrkx(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  int n;
  int k;
  const cuComplex *alpha;
  const cuComplex *A;
  int lda;
  const cuComplex *B;
  int ldb;
  const cuComplex *beta;
  cuComplex C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCsyrkx(handle, uplo, trans, n, k, alpha, A,
                                        lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCsyrkx_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  int64_t n;
  int64_t k;
  const cuComplex *alpha;
  const cuComplex *A;
  int64_t lda;
  const cuComplex *B;
  int64_t ldb;
  const cuComplex *beta;
  cuComplex C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCsyrkx_64(handle, uplo, trans, n, k, alpha, A,
                                           lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZsyrkx(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  int n;
  int k;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *A;
  int lda;
  const cuDoubleComplex *B;
  int ldb;
  const cuDoubleComplex *beta;
  cuDoubleComplex C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZsyrkx(handle, uplo, trans, n, k, alpha, A,
                                        lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZsyrkx_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  int64_t n;
  int64_t k;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *A;
  int64_t lda;
  const cuDoubleComplex *B;
  int64_t ldb;
  const cuDoubleComplex *beta;
  cuDoubleComplex C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZsyrkx_64(handle, uplo, trans, n, k, alpha, A,
                                           lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCherkx(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  int n;
  int k;
  const cuComplex *alpha;
  const cuComplex *A;
  int lda;
  const cuComplex *B;
  int ldb;
  const float *beta;
  cuComplex C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCherkx(handle, uplo, trans, n, k, alpha, A,
                                        lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCherkx_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  int64_t n;
  int64_t k;
  const cuComplex *alpha;
  const cuComplex *A;
  int64_t lda;
  const cuComplex *B;
  int64_t ldb;
  const float *beta;
  cuComplex C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCherkx_64(handle, uplo, trans, n, k, alpha, A,
                                           lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZherkx(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  int n;
  int k;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *A;
  int lda;
  const cuDoubleComplex *B;
  int ldb;
  const double *beta;
  cuDoubleComplex C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const double *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZherkx(handle, uplo, trans, n, k, alpha, A,
                                        lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZherkx_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  int64_t n;
  int64_t k;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *A;
  int64_t lda;
  const cuDoubleComplex *B;
  int64_t ldb;
  const double *beta;
  cuDoubleComplex C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const double *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZherkx_64(handle, uplo, trans, n, k, alpha, A,
                                           lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSsymm_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasSideMode_t side;
  cublasFillMode_t uplo;
  int m;
  int n;
  const float *alpha;
  const float *A;
  int lda;
  const float *B;
  int ldb;
  const float *beta;
  float C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &side, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(const float *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &C, sizeof(float)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSsymm_v2(handle, side, uplo, m, n, alpha, A,
                                          lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSsymm_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasSideMode_t side;
  cublasFillMode_t uplo;
  int64_t m;
  int64_t n;
  const float *alpha;
  const float *A;
  int64_t lda;
  const float *B;
  int64_t ldb;
  const float *beta;
  float C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &side, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &B, sizeof(const float *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &C, sizeof(float)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSsymm_v2_64(handle, side, uplo, m, n, alpha, A,
                                             lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDsymm_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasSideMode_t side;
  cublasFillMode_t uplo;
  int m;
  int n;
  const double *alpha;
  const double *A;
  int lda;
  const double *B;
  int ldb;
  const double *beta;
  double C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &side, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(const double *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const double *)) < 0 ||
      rpc_read(conn, &C, sizeof(double)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDsymm_v2(handle, side, uplo, m, n, alpha, A,
                                          lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDsymm_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasSideMode_t side;
  cublasFillMode_t uplo;
  int64_t m;
  int64_t n;
  const double *alpha;
  const double *A;
  int64_t lda;
  const double *B;
  int64_t ldb;
  const double *beta;
  double C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &side, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &B, sizeof(const double *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const double *)) < 0 ||
      rpc_read(conn, &C, sizeof(double)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDsymm_v2_64(handle, side, uplo, m, n, alpha, A,
                                             lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCsymm_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasSideMode_t side;
  cublasFillMode_t uplo;
  int m;
  int n;
  const cuComplex *alpha;
  const cuComplex *A;
  int lda;
  const cuComplex *B;
  int ldb;
  const cuComplex *beta;
  cuComplex C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &side, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCsymm_v2(handle, side, uplo, m, n, alpha, A,
                                          lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCsymm_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasSideMode_t side;
  cublasFillMode_t uplo;
  int64_t m;
  int64_t n;
  const cuComplex *alpha;
  const cuComplex *A;
  int64_t lda;
  const cuComplex *B;
  int64_t ldb;
  const cuComplex *beta;
  cuComplex C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &side, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCsymm_v2_64(handle, side, uplo, m, n, alpha, A,
                                             lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZsymm_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasSideMode_t side;
  cublasFillMode_t uplo;
  int m;
  int n;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *A;
  int lda;
  const cuDoubleComplex *B;
  int ldb;
  const cuDoubleComplex *beta;
  cuDoubleComplex C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &side, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZsymm_v2(handle, side, uplo, m, n, alpha, A,
                                          lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZsymm_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasSideMode_t side;
  cublasFillMode_t uplo;
  int64_t m;
  int64_t n;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *A;
  int64_t lda;
  const cuDoubleComplex *B;
  int64_t ldb;
  const cuDoubleComplex *beta;
  cuDoubleComplex C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &side, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZsymm_v2_64(handle, side, uplo, m, n, alpha, A,
                                             lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasChemm_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasSideMode_t side;
  cublasFillMode_t uplo;
  int m;
  int n;
  const cuComplex *alpha;
  const cuComplex *A;
  int lda;
  const cuComplex *B;
  int ldb;
  const cuComplex *beta;
  cuComplex C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &side, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasChemm_v2(handle, side, uplo, m, n, alpha, A,
                                          lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasChemm_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasSideMode_t side;
  cublasFillMode_t uplo;
  int64_t m;
  int64_t n;
  const cuComplex *alpha;
  const cuComplex *A;
  int64_t lda;
  const cuComplex *B;
  int64_t ldb;
  const cuComplex *beta;
  cuComplex C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &side, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasChemm_v2_64(handle, side, uplo, m, n, alpha, A,
                                             lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZhemm_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasSideMode_t side;
  cublasFillMode_t uplo;
  int m;
  int n;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *A;
  int lda;
  const cuDoubleComplex *B;
  int ldb;
  const cuDoubleComplex *beta;
  cuDoubleComplex C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &side, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZhemm_v2(handle, side, uplo, m, n, alpha, A,
                                          lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZhemm_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasSideMode_t side;
  cublasFillMode_t uplo;
  int64_t m;
  int64_t n;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *A;
  int64_t lda;
  const cuDoubleComplex *B;
  int64_t ldb;
  const cuDoubleComplex *beta;
  cuDoubleComplex C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &side, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZhemm_v2_64(handle, side, uplo, m, n, alpha, A,
                                             lda, B, ldb, beta, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasStrsm_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasSideMode_t side;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int m;
  int n;
  const float *alpha;
  const float *A;
  int lda;
  float B;
  int ldb;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &side, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(float)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasStrsm_v2(handle, side, uplo, trans, diag, m, n,
                                          alpha, A, lda, &B, ldb);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &B, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasStrsm_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasSideMode_t side;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int64_t m;
  int64_t n;
  const float *alpha;
  const float *A;
  int64_t lda;
  float B;
  int64_t ldb;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &side, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &B, sizeof(float)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasStrsm_v2_64(handle, side, uplo, trans, diag, m,
                                             n, alpha, A, lda, &B, ldb);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &B, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDtrsm_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasSideMode_t side;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int m;
  int n;
  const double *alpha;
  const double *A;
  int lda;
  double B;
  int ldb;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &side, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(double)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDtrsm_v2(handle, side, uplo, trans, diag, m, n,
                                          alpha, A, lda, &B, ldb);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &B, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDtrsm_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasSideMode_t side;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int64_t m;
  int64_t n;
  const double *alpha;
  const double *A;
  int64_t lda;
  double B;
  int64_t ldb;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &side, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &B, sizeof(double)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDtrsm_v2_64(handle, side, uplo, trans, diag, m,
                                             n, alpha, A, lda, &B, ldb);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &B, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCtrsm_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasSideMode_t side;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int m;
  int n;
  const cuComplex *alpha;
  const cuComplex *A;
  int lda;
  cuComplex B;
  int ldb;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &side, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCtrsm_v2(handle, side, uplo, trans, diag, m, n,
                                          alpha, A, lda, &B, ldb);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &B, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCtrsm_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasSideMode_t side;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int64_t m;
  int64_t n;
  const cuComplex *alpha;
  const cuComplex *A;
  int64_t lda;
  cuComplex B;
  int64_t ldb;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &side, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &B, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCtrsm_v2_64(handle, side, uplo, trans, diag, m,
                                             n, alpha, A, lda, &B, ldb);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &B, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZtrsm_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasSideMode_t side;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int m;
  int n;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *A;
  int lda;
  cuDoubleComplex B;
  int ldb;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &side, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZtrsm_v2(handle, side, uplo, trans, diag, m, n,
                                          alpha, A, lda, &B, ldb);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &B, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZtrsm_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasSideMode_t side;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int64_t m;
  int64_t n;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *A;
  int64_t lda;
  cuDoubleComplex B;
  int64_t ldb;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &side, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &B, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZtrsm_v2_64(handle, side, uplo, trans, diag, m,
                                             n, alpha, A, lda, &B, ldb);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &B, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasStrmm_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasSideMode_t side;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int m;
  int n;
  const float *alpha;
  const float *A;
  int lda;
  const float *B;
  int ldb;
  float C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &side, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(const float *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &C, sizeof(float)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasStrmm_v2(handle, side, uplo, trans, diag, m, n,
                                          alpha, A, lda, B, ldb, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasStrmm_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasSideMode_t side;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int64_t m;
  int64_t n;
  const float *alpha;
  const float *A;
  int64_t lda;
  const float *B;
  int64_t ldb;
  float C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &side, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &B, sizeof(const float *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &C, sizeof(float)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasStrmm_v2_64(handle, side, uplo, trans, diag, m,
                                             n, alpha, A, lda, B, ldb, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDtrmm_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasSideMode_t side;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int m;
  int n;
  const double *alpha;
  const double *A;
  int lda;
  const double *B;
  int ldb;
  double C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &side, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(const double *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &C, sizeof(double)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDtrmm_v2(handle, side, uplo, trans, diag, m, n,
                                          alpha, A, lda, B, ldb, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDtrmm_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasSideMode_t side;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int64_t m;
  int64_t n;
  const double *alpha;
  const double *A;
  int64_t lda;
  const double *B;
  int64_t ldb;
  double C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &side, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const double *)) < 0 ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &B, sizeof(const double *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &C, sizeof(double)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDtrmm_v2_64(handle, side, uplo, trans, diag, m,
                                             n, alpha, A, lda, B, ldb, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCtrmm_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasSideMode_t side;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int m;
  int n;
  const cuComplex *alpha;
  const cuComplex *A;
  int lda;
  const cuComplex *B;
  int ldb;
  cuComplex C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &side, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCtrmm_v2(handle, side, uplo, trans, diag, m, n,
                                          alpha, A, lda, B, ldb, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCtrmm_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasSideMode_t side;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int64_t m;
  int64_t n;
  const cuComplex *alpha;
  const cuComplex *A;
  int64_t lda;
  const cuComplex *B;
  int64_t ldb;
  cuComplex C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &side, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCtrmm_v2_64(handle, side, uplo, trans, diag, m,
                                             n, alpha, A, lda, B, ldb, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZtrmm_v2(conn_t *conn) {
  cublasHandle_t handle;
  cublasSideMode_t side;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int m;
  int n;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *A;
  int lda;
  const cuDoubleComplex *B;
  int ldb;
  cuDoubleComplex C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &side, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZtrmm_v2(handle, side, uplo, trans, diag, m, n,
                                          alpha, A, lda, B, ldb, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZtrmm_v2_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasSideMode_t side;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int64_t m;
  int64_t n;
  const cuDoubleComplex *alpha;
  const cuDoubleComplex *A;
  int64_t lda;
  const cuDoubleComplex *B;
  int64_t ldb;
  cuDoubleComplex C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &side, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZtrmm_v2_64(handle, side, uplo, trans, diag, m,
                                             n, alpha, A, lda, B, ldb, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasHgemmBatched(conn_t *conn) {
  int batchCount;
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int m;
  int n;
  int k;
  const __half *alpha;
  const __half **Aarray = nullptr;
  int lda;
  const __half **Barray = nullptr;
  int ldb;
  const __half *beta;
  __half **Carray = nullptr;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchCount, sizeof(int)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const __half *)) < 0 ||
      rpc_read(conn, &Aarray, sizeof(const __half *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &Barray, sizeof(const __half *const *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const __half *)) < 0 ||
      rpc_read(conn, &Carray, sizeof(__half *const *)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasHgemmBatched(handle, transa, transb, m, n, k, alpha, Aarray, lda,
                         Barray, ldb, beta, Carray, ldc, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasHgemmBatched_64(conn_t *conn) {
  int64_t batchCount;
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int64_t m;
  int64_t n;
  int64_t k;
  const __half *alpha;
  const __half **Aarray = nullptr;
  int64_t lda;
  const __half **Barray = nullptr;
  int64_t ldb;
  const __half *beta;
  __half **Carray = nullptr;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchCount, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const __half *)) < 0 ||
      rpc_read(conn, &Aarray, sizeof(const __half *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &Barray, sizeof(const __half *const *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const __half *)) < 0 ||
      rpc_read(conn, &Carray, sizeof(__half *const *)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasHgemmBatched_64(handle, transa, transb, m, n, k, alpha, Aarray, lda,
                            Barray, ldb, beta, Carray, ldc, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSgemmBatched(conn_t *conn) {
  int batchCount;
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int m;
  int n;
  int k;
  const float *alpha;
  const float **Aarray = nullptr;
  int lda;
  const float **Barray = nullptr;
  int ldb;
  const float *beta;
  float **Carray = nullptr;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchCount, sizeof(int)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &Aarray, sizeof(const float *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &Barray, sizeof(const float *const *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &Carray, sizeof(float *const *)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasSgemmBatched(handle, transa, transb, m, n, k, alpha, Aarray, lda,
                         Barray, ldb, beta, Carray, ldc, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSgemmBatched_64(conn_t *conn) {
  int64_t batchCount;
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int64_t m;
  int64_t n;
  int64_t k;
  const float *alpha;
  const float **Aarray = nullptr;
  int64_t lda;
  const float **Barray = nullptr;
  int64_t ldb;
  const float *beta;
  float **Carray = nullptr;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchCount, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha, sizeof(const float *)) < 0 ||
      rpc_read(conn, &Aarray, sizeof(const float *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &Barray, sizeof(const float *const *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta, sizeof(const float *)) < 0 ||
      rpc_read(conn, &Carray, sizeof(float *const *)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasSgemmBatched_64(handle, transa, transb, m, n, k, alpha, Aarray, lda,
                            Barray, ldb, beta, Carray, ldc, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDgemmBatched(conn_t *conn) {
  int batchCount;
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int m;
  int n;
  int k;
  double *alpha_null_check;
  double alpha;
  const double **Aarray = nullptr;
  int lda;
  const double **Barray = nullptr;
  int ldb;
  double *beta_null_check;
  double beta;
  double **Carray = nullptr;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchCount, sizeof(int)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const double *)) < 0 ||
      (alpha_null_check && rpc_read(conn, &alpha, sizeof(const double)) < 0) ||
      rpc_read(conn, &Aarray, sizeof(const double *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &Barray, sizeof(const double *const *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &beta_null_check, sizeof(const double *)) < 0 ||
      (beta_null_check && rpc_read(conn, &beta, sizeof(const double)) < 0) ||
      rpc_read(conn, &Carray, sizeof(double *const *)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDgemmBatched(handle, transa, transb, m, n, k, &alpha, Aarray, lda,
                         Barray, ldb, &beta, Carray, ldc, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDgemmBatched_64(conn_t *conn) {
  int64_t batchCount;
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int64_t m;
  int64_t n;
  int64_t k;
  double *alpha_null_check;
  double alpha;
  const double **Aarray = nullptr;
  int64_t lda;
  const double **Barray = nullptr;
  int64_t ldb;
  double *beta_null_check;
  double beta;
  double **Carray = nullptr;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchCount, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const double *)) < 0 ||
      (alpha_null_check && rpc_read(conn, &alpha, sizeof(const double)) < 0) ||
      rpc_read(conn, &Aarray, sizeof(const double *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &Barray, sizeof(const double *const *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta_null_check, sizeof(const double *)) < 0 ||
      (beta_null_check && rpc_read(conn, &beta, sizeof(const double)) < 0) ||
      rpc_read(conn, &Carray, sizeof(double *const *)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDgemmBatched_64(handle, transa, transb, m, n, k, &alpha, Aarray,
                            lda, Barray, ldb, &beta, Carray, ldc, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCgemmBatched(conn_t *conn) {
  int batchCount;
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int m;
  int n;
  int k;
  cuComplex *alpha_null_check;
  cuComplex alpha;
  const cuComplex **Aarray = nullptr;
  int lda;
  const cuComplex **Barray = nullptr;
  int ldb;
  cuComplex *beta_null_check;
  cuComplex beta;
  cuComplex **Carray = nullptr;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchCount, sizeof(int)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const cuComplex *)) < 0 ||
      (alpha_null_check &&
       rpc_read(conn, &alpha, sizeof(const cuComplex)) < 0) ||
      rpc_read(conn, &Aarray, sizeof(const cuComplex *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &Barray, sizeof(const cuComplex *const *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &beta_null_check, sizeof(const cuComplex *)) < 0 ||
      (beta_null_check && rpc_read(conn, &beta, sizeof(const cuComplex)) < 0) ||
      rpc_read(conn, &Carray, sizeof(cuComplex *const *)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCgemmBatched(handle, transa, transb, m, n, k, &alpha, Aarray, lda,
                         Barray, ldb, &beta, Carray, ldc, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCgemmBatched_64(conn_t *conn) {
  int64_t batchCount;
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int64_t m;
  int64_t n;
  int64_t k;
  cuComplex *alpha_null_check;
  cuComplex alpha;
  const cuComplex **Aarray = nullptr;
  int64_t lda;
  const cuComplex **Barray = nullptr;
  int64_t ldb;
  cuComplex *beta_null_check;
  cuComplex beta;
  cuComplex **Carray = nullptr;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchCount, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const cuComplex *)) < 0 ||
      (alpha_null_check &&
       rpc_read(conn, &alpha, sizeof(const cuComplex)) < 0) ||
      rpc_read(conn, &Aarray, sizeof(const cuComplex *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &Barray, sizeof(const cuComplex *const *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta_null_check, sizeof(const cuComplex *)) < 0 ||
      (beta_null_check && rpc_read(conn, &beta, sizeof(const cuComplex)) < 0) ||
      rpc_read(conn, &Carray, sizeof(cuComplex *const *)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCgemmBatched_64(handle, transa, transb, m, n, k, &alpha, Aarray,
                            lda, Barray, ldb, &beta, Carray, ldc, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCgemm3mBatched(conn_t *conn) {
  int batchCount;
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int m;
  int n;
  int k;
  cuComplex *alpha_null_check;
  cuComplex alpha;
  const cuComplex **Aarray = nullptr;
  int lda;
  const cuComplex **Barray = nullptr;
  int ldb;
  cuComplex *beta_null_check;
  cuComplex beta;
  cuComplex **Carray = nullptr;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchCount, sizeof(int)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const cuComplex *)) < 0 ||
      (alpha_null_check &&
       rpc_read(conn, &alpha, sizeof(const cuComplex)) < 0) ||
      rpc_read(conn, &Aarray, sizeof(const cuComplex *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &Barray, sizeof(const cuComplex *const *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &beta_null_check, sizeof(const cuComplex *)) < 0 ||
      (beta_null_check && rpc_read(conn, &beta, sizeof(const cuComplex)) < 0) ||
      rpc_read(conn, &Carray, sizeof(cuComplex *const *)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCgemm3mBatched(handle, transa, transb, m, n, k, &alpha, Aarray, lda,
                           Barray, ldb, &beta, Carray, ldc, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCgemm3mBatched_64(conn_t *conn) {
  int64_t batchCount;
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int64_t m;
  int64_t n;
  int64_t k;
  cuComplex *alpha_null_check;
  cuComplex alpha;
  const cuComplex **Aarray = nullptr;
  int64_t lda;
  const cuComplex **Barray = nullptr;
  int64_t ldb;
  cuComplex *beta_null_check;
  cuComplex beta;
  cuComplex **Carray = nullptr;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchCount, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const cuComplex *)) < 0 ||
      (alpha_null_check &&
       rpc_read(conn, &alpha, sizeof(const cuComplex)) < 0) ||
      rpc_read(conn, &Aarray, sizeof(const cuComplex *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &Barray, sizeof(const cuComplex *const *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta_null_check, sizeof(const cuComplex *)) < 0 ||
      (beta_null_check && rpc_read(conn, &beta, sizeof(const cuComplex)) < 0) ||
      rpc_read(conn, &Carray, sizeof(cuComplex *const *)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCgemm3mBatched_64(handle, transa, transb, m, n, k, &alpha, Aarray,
                              lda, Barray, ldb, &beta, Carray, ldc, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZgemmBatched(conn_t *conn) {
  int batchCount;
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int m;
  int n;
  int k;
  cuDoubleComplex *alpha_null_check;
  cuDoubleComplex alpha;
  const cuDoubleComplex **Aarray = nullptr;
  int lda;
  const cuDoubleComplex **Barray = nullptr;
  int ldb;
  cuDoubleComplex *beta_null_check;
  cuDoubleComplex beta;
  cuDoubleComplex **Carray = nullptr;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchCount, sizeof(int)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const cuDoubleComplex *)) < 0 ||
      (alpha_null_check &&
       rpc_read(conn, &alpha, sizeof(const cuDoubleComplex)) < 0) ||
      rpc_read(conn, &Aarray, sizeof(const cuDoubleComplex *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &Barray, sizeof(const cuDoubleComplex *const *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &beta_null_check, sizeof(const cuDoubleComplex *)) < 0 ||
      (beta_null_check &&
       rpc_read(conn, &beta, sizeof(const cuDoubleComplex)) < 0) ||
      rpc_read(conn, &Carray, sizeof(cuDoubleComplex *const *)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZgemmBatched(handle, transa, transb, m, n, k, &alpha, Aarray, lda,
                         Barray, ldb, &beta, Carray, ldc, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZgemmBatched_64(conn_t *conn) {
  int64_t batchCount;
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int64_t m;
  int64_t n;
  int64_t k;
  cuDoubleComplex *alpha_null_check;
  cuDoubleComplex alpha;
  const cuDoubleComplex **Aarray = nullptr;
  int64_t lda;
  const cuDoubleComplex **Barray = nullptr;
  int64_t ldb;
  cuDoubleComplex *beta_null_check;
  cuDoubleComplex beta;
  cuDoubleComplex **Carray = nullptr;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchCount, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const cuDoubleComplex *)) < 0 ||
      (alpha_null_check &&
       rpc_read(conn, &alpha, sizeof(const cuDoubleComplex)) < 0) ||
      rpc_read(conn, &Aarray, sizeof(const cuDoubleComplex *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &Barray, sizeof(const cuDoubleComplex *const *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta_null_check, sizeof(const cuDoubleComplex *)) < 0 ||
      (beta_null_check &&
       rpc_read(conn, &beta, sizeof(const cuDoubleComplex)) < 0) ||
      rpc_read(conn, &Carray, sizeof(cuDoubleComplex *const *)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZgemmBatched_64(handle, transa, transb, m, n, k, &alpha, Aarray,
                            lda, Barray, ldb, &beta, Carray, ldc, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasHgemmStridedBatched(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int m;
  int n;
  int k;
  __half *alpha_null_check;
  __half alpha;
  const __half *A;
  int lda;
  long long int strideA;
  const __half *B;
  int ldb;
  long long int strideB;
  __half *beta_null_check;
  __half beta;
  __half C;
  int ldc;
  long long int strideC;
  int batchCount;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const __half *)) < 0 ||
      (alpha_null_check && rpc_read(conn, &alpha, sizeof(const __half)) < 0) ||
      rpc_read(conn, &A, sizeof(const __half *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &strideA, sizeof(long long int)) < 0 ||
      rpc_read(conn, &B, sizeof(const __half *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &strideB, sizeof(long long int)) < 0 ||
      rpc_read(conn, &beta_null_check, sizeof(const __half *)) < 0 ||
      (beta_null_check && rpc_read(conn, &beta, sizeof(const __half)) < 0) ||
      rpc_read(conn, &C, sizeof(__half)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 ||
      rpc_read(conn, &strideC, sizeof(long long int)) < 0 ||
      rpc_read(conn, &batchCount, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasHgemmStridedBatched(
      handle, transa, transb, m, n, k, &alpha, A, lda, strideA, B, ldb, strideB,
      &beta, &C, ldc, strideC, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(__half)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasHgemmStridedBatched_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int64_t m;
  int64_t n;
  int64_t k;
  __half *alpha_null_check;
  __half alpha;
  const __half *A;
  int64_t lda;
  long long int strideA;
  const __half *B;
  int64_t ldb;
  long long int strideB;
  __half *beta_null_check;
  __half beta;
  __half C;
  int64_t ldc;
  long long int strideC;
  int64_t batchCount;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const __half *)) < 0 ||
      (alpha_null_check && rpc_read(conn, &alpha, sizeof(const __half)) < 0) ||
      rpc_read(conn, &A, sizeof(const __half *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &strideA, sizeof(long long int)) < 0 ||
      rpc_read(conn, &B, sizeof(const __half *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &strideB, sizeof(long long int)) < 0 ||
      rpc_read(conn, &beta_null_check, sizeof(const __half *)) < 0 ||
      (beta_null_check && rpc_read(conn, &beta, sizeof(const __half)) < 0) ||
      rpc_read(conn, &C, sizeof(__half)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &strideC, sizeof(long long int)) < 0 ||
      rpc_read(conn, &batchCount, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasHgemmStridedBatched_64(
      handle, transa, transb, m, n, k, &alpha, A, lda, strideA, B, ldb, strideB,
      &beta, &C, ldc, strideC, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(__half)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSgemmStridedBatched(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int m;
  int n;
  int k;
  float *alpha_null_check;
  float alpha;
  const float *A;
  int lda;
  long long int strideA;
  const float *B;
  int ldb;
  long long int strideB;
  float *beta_null_check;
  float beta;
  float C;
  int ldc;
  long long int strideC;
  int batchCount;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const float *)) < 0 ||
      (alpha_null_check && rpc_read(conn, &alpha, sizeof(const float)) < 0) ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &strideA, sizeof(long long int)) < 0 ||
      rpc_read(conn, &B, sizeof(const float *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &strideB, sizeof(long long int)) < 0 ||
      rpc_read(conn, &beta_null_check, sizeof(const float *)) < 0 ||
      (beta_null_check && rpc_read(conn, &beta, sizeof(const float)) < 0) ||
      rpc_read(conn, &C, sizeof(float)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 ||
      rpc_read(conn, &strideC, sizeof(long long int)) < 0 ||
      rpc_read(conn, &batchCount, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSgemmStridedBatched(
      handle, transa, transb, m, n, k, &alpha, A, lda, strideA, B, ldb, strideB,
      &beta, &C, ldc, strideC, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSgemmStridedBatched_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int64_t m;
  int64_t n;
  int64_t k;
  float *alpha_null_check;
  float alpha;
  const float *A;
  int64_t lda;
  long long int strideA;
  const float *B;
  int64_t ldb;
  long long int strideB;
  float *beta_null_check;
  float beta;
  float C;
  int64_t ldc;
  long long int strideC;
  int64_t batchCount;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const float *)) < 0 ||
      (alpha_null_check && rpc_read(conn, &alpha, sizeof(const float)) < 0) ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &strideA, sizeof(long long int)) < 0 ||
      rpc_read(conn, &B, sizeof(const float *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &strideB, sizeof(long long int)) < 0 ||
      rpc_read(conn, &beta_null_check, sizeof(const float *)) < 0 ||
      (beta_null_check && rpc_read(conn, &beta, sizeof(const float)) < 0) ||
      rpc_read(conn, &C, sizeof(float)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &strideC, sizeof(long long int)) < 0 ||
      rpc_read(conn, &batchCount, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSgemmStridedBatched_64(
      handle, transa, transb, m, n, k, &alpha, A, lda, strideA, B, ldb, strideB,
      &beta, &C, ldc, strideC, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDgemmStridedBatched(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int m;
  int n;
  int k;
  double *alpha_null_check;
  double alpha;
  const double *A;
  int lda;
  long long int strideA;
  const double *B;
  int ldb;
  long long int strideB;
  double *beta_null_check;
  double beta;
  double C;
  int ldc;
  long long int strideC;
  int batchCount;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const double *)) < 0 ||
      (alpha_null_check && rpc_read(conn, &alpha, sizeof(const double)) < 0) ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &strideA, sizeof(long long int)) < 0 ||
      rpc_read(conn, &B, sizeof(const double *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &strideB, sizeof(long long int)) < 0 ||
      rpc_read(conn, &beta_null_check, sizeof(const double *)) < 0 ||
      (beta_null_check && rpc_read(conn, &beta, sizeof(const double)) < 0) ||
      rpc_read(conn, &C, sizeof(double)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 ||
      rpc_read(conn, &strideC, sizeof(long long int)) < 0 ||
      rpc_read(conn, &batchCount, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDgemmStridedBatched(
      handle, transa, transb, m, n, k, &alpha, A, lda, strideA, B, ldb, strideB,
      &beta, &C, ldc, strideC, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDgemmStridedBatched_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int64_t m;
  int64_t n;
  int64_t k;
  double *alpha_null_check;
  double alpha;
  const double *A;
  int64_t lda;
  long long int strideA;
  const double *B;
  int64_t ldb;
  long long int strideB;
  double *beta_null_check;
  double beta;
  double C;
  int64_t ldc;
  long long int strideC;
  int64_t batchCount;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const double *)) < 0 ||
      (alpha_null_check && rpc_read(conn, &alpha, sizeof(const double)) < 0) ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &strideA, sizeof(long long int)) < 0 ||
      rpc_read(conn, &B, sizeof(const double *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &strideB, sizeof(long long int)) < 0 ||
      rpc_read(conn, &beta_null_check, sizeof(const double *)) < 0 ||
      (beta_null_check && rpc_read(conn, &beta, sizeof(const double)) < 0) ||
      rpc_read(conn, &C, sizeof(double)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &strideC, sizeof(long long int)) < 0 ||
      rpc_read(conn, &batchCount, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDgemmStridedBatched_64(
      handle, transa, transb, m, n, k, &alpha, A, lda, strideA, B, ldb, strideB,
      &beta, &C, ldc, strideC, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCgemmStridedBatched(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int m;
  int n;
  int k;
  cuComplex *alpha_null_check;
  cuComplex alpha;
  const cuComplex *A;
  int lda;
  long long int strideA;
  const cuComplex *B;
  int ldb;
  long long int strideB;
  cuComplex *beta_null_check;
  cuComplex beta;
  cuComplex C;
  int ldc;
  long long int strideC;
  int batchCount;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const cuComplex *)) < 0 ||
      (alpha_null_check &&
       rpc_read(conn, &alpha, sizeof(const cuComplex)) < 0) ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &strideA, sizeof(long long int)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &strideB, sizeof(long long int)) < 0 ||
      rpc_read(conn, &beta_null_check, sizeof(const cuComplex *)) < 0 ||
      (beta_null_check && rpc_read(conn, &beta, sizeof(const cuComplex)) < 0) ||
      rpc_read(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 ||
      rpc_read(conn, &strideC, sizeof(long long int)) < 0 ||
      rpc_read(conn, &batchCount, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCgemmStridedBatched(
      handle, transa, transb, m, n, k, &alpha, A, lda, strideA, B, ldb, strideB,
      &beta, &C, ldc, strideC, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCgemmStridedBatched_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int64_t m;
  int64_t n;
  int64_t k;
  cuComplex *alpha_null_check;
  cuComplex alpha;
  const cuComplex *A;
  int64_t lda;
  long long int strideA;
  const cuComplex *B;
  int64_t ldb;
  long long int strideB;
  cuComplex *beta_null_check;
  cuComplex beta;
  cuComplex C;
  int64_t ldc;
  long long int strideC;
  int64_t batchCount;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const cuComplex *)) < 0 ||
      (alpha_null_check &&
       rpc_read(conn, &alpha, sizeof(const cuComplex)) < 0) ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &strideA, sizeof(long long int)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &strideB, sizeof(long long int)) < 0 ||
      rpc_read(conn, &beta_null_check, sizeof(const cuComplex *)) < 0 ||
      (beta_null_check && rpc_read(conn, &beta, sizeof(const cuComplex)) < 0) ||
      rpc_read(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &strideC, sizeof(long long int)) < 0 ||
      rpc_read(conn, &batchCount, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCgemmStridedBatched_64(
      handle, transa, transb, m, n, k, &alpha, A, lda, strideA, B, ldb, strideB,
      &beta, &C, ldc, strideC, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCgemm3mStridedBatched(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int m;
  int n;
  int k;
  cuComplex *alpha_null_check;
  cuComplex alpha;
  const cuComplex *A;
  int lda;
  long long int strideA;
  const cuComplex *B;
  int ldb;
  long long int strideB;
  cuComplex *beta_null_check;
  cuComplex beta;
  cuComplex C;
  int ldc;
  long long int strideC;
  int batchCount;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const cuComplex *)) < 0 ||
      (alpha_null_check &&
       rpc_read(conn, &alpha, sizeof(const cuComplex)) < 0) ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &strideA, sizeof(long long int)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &strideB, sizeof(long long int)) < 0 ||
      rpc_read(conn, &beta_null_check, sizeof(const cuComplex *)) < 0 ||
      (beta_null_check && rpc_read(conn, &beta, sizeof(const cuComplex)) < 0) ||
      rpc_read(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 ||
      rpc_read(conn, &strideC, sizeof(long long int)) < 0 ||
      rpc_read(conn, &batchCount, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCgemm3mStridedBatched(
      handle, transa, transb, m, n, k, &alpha, A, lda, strideA, B, ldb, strideB,
      &beta, &C, ldc, strideC, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCgemm3mStridedBatched_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int64_t m;
  int64_t n;
  int64_t k;
  cuComplex *alpha_null_check;
  cuComplex alpha;
  const cuComplex *A;
  int64_t lda;
  long long int strideA;
  const cuComplex *B;
  int64_t ldb;
  long long int strideB;
  cuComplex *beta_null_check;
  cuComplex beta;
  cuComplex C;
  int64_t ldc;
  long long int strideC;
  int64_t batchCount;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const cuComplex *)) < 0 ||
      (alpha_null_check &&
       rpc_read(conn, &alpha, sizeof(const cuComplex)) < 0) ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &strideA, sizeof(long long int)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &strideB, sizeof(long long int)) < 0 ||
      rpc_read(conn, &beta_null_check, sizeof(const cuComplex *)) < 0 ||
      (beta_null_check && rpc_read(conn, &beta, sizeof(const cuComplex)) < 0) ||
      rpc_read(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &strideC, sizeof(long long int)) < 0 ||
      rpc_read(conn, &batchCount, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCgemm3mStridedBatched_64(
      handle, transa, transb, m, n, k, &alpha, A, lda, strideA, B, ldb, strideB,
      &beta, &C, ldc, strideC, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZgemmStridedBatched(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int m;
  int n;
  int k;
  cuDoubleComplex *alpha_null_check;
  cuDoubleComplex alpha;
  const cuDoubleComplex *A;
  int lda;
  long long int strideA;
  const cuDoubleComplex *B;
  int ldb;
  long long int strideB;
  cuDoubleComplex *beta_null_check;
  cuDoubleComplex beta;
  cuDoubleComplex C;
  int ldc;
  long long int strideC;
  int batchCount;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const cuDoubleComplex *)) < 0 ||
      (alpha_null_check &&
       rpc_read(conn, &alpha, sizeof(const cuDoubleComplex)) < 0) ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &strideA, sizeof(long long int)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &strideB, sizeof(long long int)) < 0 ||
      rpc_read(conn, &beta_null_check, sizeof(const cuDoubleComplex *)) < 0 ||
      (beta_null_check &&
       rpc_read(conn, &beta, sizeof(const cuDoubleComplex)) < 0) ||
      rpc_read(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 ||
      rpc_read(conn, &strideC, sizeof(long long int)) < 0 ||
      rpc_read(conn, &batchCount, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZgemmStridedBatched(
      handle, transa, transb, m, n, k, &alpha, A, lda, strideA, B, ldb, strideB,
      &beta, &C, ldc, strideC, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZgemmStridedBatched_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int64_t m;
  int64_t n;
  int64_t k;
  cuDoubleComplex *alpha_null_check;
  cuDoubleComplex alpha;
  const cuDoubleComplex *A;
  int64_t lda;
  long long int strideA;
  const cuDoubleComplex *B;
  int64_t ldb;
  long long int strideB;
  cuDoubleComplex *beta_null_check;
  cuDoubleComplex beta;
  cuDoubleComplex C;
  int64_t ldc;
  long long int strideC;
  int64_t batchCount;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const cuDoubleComplex *)) < 0 ||
      (alpha_null_check &&
       rpc_read(conn, &alpha, sizeof(const cuDoubleComplex)) < 0) ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &strideA, sizeof(long long int)) < 0 ||
      rpc_read(conn, &B, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &strideB, sizeof(long long int)) < 0 ||
      rpc_read(conn, &beta_null_check, sizeof(const cuDoubleComplex *)) < 0 ||
      (beta_null_check &&
       rpc_read(conn, &beta, sizeof(const cuDoubleComplex)) < 0) ||
      rpc_read(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &strideC, sizeof(long long int)) < 0 ||
      rpc_read(conn, &batchCount, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZgemmStridedBatched_64(
      handle, transa, transb, m, n, k, &alpha, A, lda, strideA, B, ldb, strideB,
      &beta, &C, ldc, strideC, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasGemmBatchedEx_64(conn_t *conn) {
  int64_t batchCount;
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int64_t m;
  int64_t n;
  int64_t k;
  void *alpha_null_check;
  void *alpha;
  const void **Aarray = nullptr;
  cudaDataType Atype;
  int64_t lda;
  const void **Barray = nullptr;
  cudaDataType Btype;
  int64_t ldb;
  void *beta_null_check;
  void *beta;
  void **Carray = nullptr;
  cudaDataType Ctype;
  int64_t ldc;
  cublasComputeType_t computeType;
  cublasGemmAlgo_t algo;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchCount, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const void *)) < 0 ||
      (alpha_null_check && rpc_read(conn, &alpha, sizeof(const void *)) < 0) ||
      rpc_read(conn, &Aarray, sizeof(const void *const *)) < 0 ||
      rpc_read(conn, &Atype, sizeof(cudaDataType)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &Barray, sizeof(const void *const *)) < 0 ||
      rpc_read(conn, &Btype, sizeof(cudaDataType)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta_null_check, sizeof(const void *)) < 0 ||
      (beta_null_check && rpc_read(conn, &beta, sizeof(const void *)) < 0) ||
      rpc_read(conn, &Carray, sizeof(void *const *)) < 0 ||
      rpc_read(conn, &Ctype, sizeof(cudaDataType)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &computeType, sizeof(cublasComputeType_t)) < 0 ||
      rpc_read(conn, &algo, sizeof(cublasGemmAlgo_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasGemmBatchedEx_64(
      handle, transa, transb, m, n, k, &alpha, Aarray, Atype, lda, Barray,
      Btype, ldb, &beta, Carray, Ctype, ldc, batchCount, computeType, algo);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSgeam(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int m;
  int n;
  float *alpha_null_check;
  float alpha;
  const float *A;
  int lda;
  float *beta_null_check;
  float beta;
  const float *B;
  int ldb;
  float C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const float *)) < 0 ||
      (alpha_null_check && rpc_read(conn, &alpha, sizeof(const float)) < 0) ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &beta_null_check, sizeof(const float *)) < 0 ||
      (beta_null_check && rpc_read(conn, &beta, sizeof(const float)) < 0) ||
      rpc_read(conn, &B, sizeof(const float *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &C, sizeof(float)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSgeam(handle, transa, transb, m, n, &alpha, A,
                                       lda, &beta, B, ldb, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSgeam_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int64_t m;
  int64_t n;
  float *alpha_null_check;
  float alpha;
  const float *A;
  int64_t lda;
  float *beta_null_check;
  float beta;
  const float *B;
  int64_t ldb;
  float C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const float *)) < 0 ||
      (alpha_null_check && rpc_read(conn, &alpha, sizeof(const float)) < 0) ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta_null_check, sizeof(const float *)) < 0 ||
      (beta_null_check && rpc_read(conn, &beta, sizeof(const float)) < 0) ||
      rpc_read(conn, &B, sizeof(const float *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &C, sizeof(float)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSgeam_64(handle, transa, transb, m, n, &alpha,
                                          A, lda, &beta, B, ldb, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDgeam(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int m;
  int n;
  double *alpha_null_check;
  double alpha;
  const double *A;
  int lda;
  double *beta_null_check;
  double beta;
  const double *B;
  int ldb;
  double C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const double *)) < 0 ||
      (alpha_null_check && rpc_read(conn, &alpha, sizeof(const double)) < 0) ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &beta_null_check, sizeof(const double *)) < 0 ||
      (beta_null_check && rpc_read(conn, &beta, sizeof(const double)) < 0) ||
      rpc_read(conn, &B, sizeof(const double *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &C, sizeof(double)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDgeam(handle, transa, transb, m, n, &alpha, A,
                                       lda, &beta, B, ldb, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDgeam_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int64_t m;
  int64_t n;
  double *alpha_null_check;
  double alpha;
  const double *A;
  int64_t lda;
  double *beta_null_check;
  double beta;
  const double *B;
  int64_t ldb;
  double C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const double *)) < 0 ||
      (alpha_null_check && rpc_read(conn, &alpha, sizeof(const double)) < 0) ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta_null_check, sizeof(const double *)) < 0 ||
      (beta_null_check && rpc_read(conn, &beta, sizeof(const double)) < 0) ||
      rpc_read(conn, &B, sizeof(const double *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &C, sizeof(double)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDgeam_64(handle, transa, transb, m, n, &alpha,
                                          A, lda, &beta, B, ldb, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCgeam(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int m;
  int n;
  cuComplex *alpha_null_check;
  cuComplex alpha;
  const cuComplex *A;
  int lda;
  cuComplex *beta_null_check;
  cuComplex beta;
  const cuComplex *B;
  int ldb;
  cuComplex C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const cuComplex *)) < 0 ||
      (alpha_null_check &&
       rpc_read(conn, &alpha, sizeof(const cuComplex)) < 0) ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &beta_null_check, sizeof(const cuComplex *)) < 0 ||
      (beta_null_check && rpc_read(conn, &beta, sizeof(const cuComplex)) < 0) ||
      rpc_read(conn, &B, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCgeam(handle, transa, transb, m, n, &alpha, A,
                                       lda, &beta, B, ldb, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCgeam_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int64_t m;
  int64_t n;
  cuComplex *alpha_null_check;
  cuComplex alpha;
  const cuComplex *A;
  int64_t lda;
  cuComplex *beta_null_check;
  cuComplex beta;
  const cuComplex *B;
  int64_t ldb;
  cuComplex C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const cuComplex *)) < 0 ||
      (alpha_null_check &&
       rpc_read(conn, &alpha, sizeof(const cuComplex)) < 0) ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta_null_check, sizeof(const cuComplex *)) < 0 ||
      (beta_null_check && rpc_read(conn, &beta, sizeof(const cuComplex)) < 0) ||
      rpc_read(conn, &B, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCgeam_64(handle, transa, transb, m, n, &alpha,
                                          A, lda, &beta, B, ldb, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZgeam(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int m;
  int n;
  cuDoubleComplex *alpha_null_check;
  cuDoubleComplex alpha;
  const cuDoubleComplex *A;
  int lda;
  cuDoubleComplex *beta_null_check;
  cuDoubleComplex beta;
  const cuDoubleComplex *B;
  int ldb;
  cuDoubleComplex C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const cuDoubleComplex *)) < 0 ||
      (alpha_null_check &&
       rpc_read(conn, &alpha, sizeof(const cuDoubleComplex)) < 0) ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &beta_null_check, sizeof(const cuDoubleComplex *)) < 0 ||
      (beta_null_check &&
       rpc_read(conn, &beta, sizeof(const cuDoubleComplex)) < 0) ||
      rpc_read(conn, &B, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZgeam(handle, transa, transb, m, n, &alpha, A,
                                       lda, &beta, B, ldb, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZgeam_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  int64_t m;
  int64_t n;
  cuDoubleComplex *alpha_null_check;
  cuDoubleComplex alpha;
  const cuDoubleComplex *A;
  int64_t lda;
  cuDoubleComplex *beta_null_check;
  cuDoubleComplex beta;
  const cuDoubleComplex *B;
  int64_t ldb;
  cuDoubleComplex C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const cuDoubleComplex *)) < 0 ||
      (alpha_null_check &&
       rpc_read(conn, &alpha, sizeof(const cuDoubleComplex)) < 0) ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &beta_null_check, sizeof(const cuDoubleComplex *)) < 0 ||
      (beta_null_check &&
       rpc_read(conn, &beta, sizeof(const cuDoubleComplex)) < 0) ||
      rpc_read(conn, &B, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZgeam_64(handle, transa, transb, m, n, &alpha,
                                          A, lda, &beta, B, ldb, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasStrsmBatched(conn_t *conn) {
  int batchCount;
  cublasHandle_t handle;
  cublasSideMode_t side;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int m;
  int n;
  float *alpha_null_check;
  float alpha;
  const float **A = nullptr;
  int lda;
  float **B = nullptr;
  int ldb;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchCount, sizeof(int)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &side, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const float *)) < 0 ||
      (alpha_null_check && rpc_read(conn, &alpha, sizeof(const float)) < 0) ||
      rpc_read(conn, &A, sizeof(const float *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(float *const *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasStrsmBatched(handle, side, uplo, trans, diag, m, n, &alpha, A, lda,
                         B, ldb, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasStrsmBatched_64(conn_t *conn) {
  int64_t batchCount;
  cublasHandle_t handle;
  cublasSideMode_t side;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int64_t m;
  int64_t n;
  float *alpha_null_check;
  float alpha;
  const float **A = nullptr;
  int64_t lda;
  float **B = nullptr;
  int64_t ldb;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchCount, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &side, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const float *)) < 0 ||
      (alpha_null_check && rpc_read(conn, &alpha, sizeof(const float)) < 0) ||
      rpc_read(conn, &A, sizeof(const float *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &B, sizeof(float *const *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasStrsmBatched_64(handle, side, uplo, trans, diag, m, n, &alpha, A,
                            lda, B, ldb, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDtrsmBatched(conn_t *conn) {
  int batchCount;
  cublasHandle_t handle;
  cublasSideMode_t side;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int m;
  int n;
  double *alpha_null_check;
  double alpha;
  const double **A = nullptr;
  int lda;
  double **B = nullptr;
  int ldb;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchCount, sizeof(int)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &side, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const double *)) < 0 ||
      (alpha_null_check && rpc_read(conn, &alpha, sizeof(const double)) < 0) ||
      rpc_read(conn, &A, sizeof(const double *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(double *const *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDtrsmBatched(handle, side, uplo, trans, diag, m, n, &alpha, A, lda,
                         B, ldb, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDtrsmBatched_64(conn_t *conn) {
  int64_t batchCount;
  cublasHandle_t handle;
  cublasSideMode_t side;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int64_t m;
  int64_t n;
  double *alpha_null_check;
  double alpha;
  const double **A = nullptr;
  int64_t lda;
  double **B = nullptr;
  int64_t ldb;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchCount, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &side, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const double *)) < 0 ||
      (alpha_null_check && rpc_read(conn, &alpha, sizeof(const double)) < 0) ||
      rpc_read(conn, &A, sizeof(const double *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &B, sizeof(double *const *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDtrsmBatched_64(handle, side, uplo, trans, diag, m, n, &alpha, A,
                            lda, B, ldb, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCtrsmBatched(conn_t *conn) {
  int batchCount;
  cublasHandle_t handle;
  cublasSideMode_t side;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int m;
  int n;
  cuComplex *alpha_null_check;
  cuComplex alpha;
  const cuComplex **A = nullptr;
  int lda;
  cuComplex **B = nullptr;
  int ldb;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchCount, sizeof(int)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &side, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const cuComplex *)) < 0 ||
      (alpha_null_check &&
       rpc_read(conn, &alpha, sizeof(const cuComplex)) < 0) ||
      rpc_read(conn, &A, sizeof(const cuComplex *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(cuComplex *const *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCtrsmBatched(handle, side, uplo, trans, diag, m, n, &alpha, A, lda,
                         B, ldb, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCtrsmBatched_64(conn_t *conn) {
  int64_t batchCount;
  cublasHandle_t handle;
  cublasSideMode_t side;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int64_t m;
  int64_t n;
  cuComplex *alpha_null_check;
  cuComplex alpha;
  const cuComplex **A = nullptr;
  int64_t lda;
  cuComplex **B = nullptr;
  int64_t ldb;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchCount, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &side, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const cuComplex *)) < 0 ||
      (alpha_null_check &&
       rpc_read(conn, &alpha, sizeof(const cuComplex)) < 0) ||
      rpc_read(conn, &A, sizeof(const cuComplex *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &B, sizeof(cuComplex *const *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCtrsmBatched_64(handle, side, uplo, trans, diag, m, n, &alpha, A,
                            lda, B, ldb, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZtrsmBatched(conn_t *conn) {
  int batchCount;
  cublasHandle_t handle;
  cublasSideMode_t side;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int m;
  int n;
  cuDoubleComplex *alpha_null_check;
  cuDoubleComplex alpha;
  const cuDoubleComplex **A = nullptr;
  int lda;
  cuDoubleComplex **B = nullptr;
  int ldb;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchCount, sizeof(int)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &side, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const cuDoubleComplex *)) < 0 ||
      (alpha_null_check &&
       rpc_read(conn, &alpha, sizeof(const cuDoubleComplex)) < 0) ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(cuDoubleComplex *const *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZtrsmBatched(handle, side, uplo, trans, diag, m, n, &alpha, A, lda,
                         B, ldb, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZtrsmBatched_64(conn_t *conn) {
  int64_t batchCount;
  cublasHandle_t handle;
  cublasSideMode_t side;
  cublasFillMode_t uplo;
  cublasOperation_t trans;
  cublasDiagType_t diag;
  int64_t m;
  int64_t n;
  cuDoubleComplex *alpha_null_check;
  cuDoubleComplex alpha;
  const cuDoubleComplex **A = nullptr;
  int64_t lda;
  cuDoubleComplex **B = nullptr;
  int64_t ldb;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchCount, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &side, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &diag, sizeof(cublasDiagType_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const cuDoubleComplex *)) < 0 ||
      (alpha_null_check &&
       rpc_read(conn, &alpha, sizeof(const cuDoubleComplex)) < 0) ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &B, sizeof(cuDoubleComplex *const *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZtrsmBatched_64(handle, side, uplo, trans, diag, m, n, &alpha, A,
                            lda, B, ldb, batchCount);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSdgmm(conn_t *conn) {
  cublasHandle_t handle;
  cublasSideMode_t mode;
  int m;
  int n;
  const float *A;
  int lda;
  float *x_null_check;
  float x;
  int incx;
  float C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &mode, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x_null_check, sizeof(const float *)) < 0 ||
      (x_null_check && rpc_read(conn, &x, sizeof(const float)) < 0) ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &C, sizeof(float)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasSdgmm(handle, mode, m, n, A, lda, &x, incx, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSdgmm_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasSideMode_t mode;
  int64_t m;
  int64_t n;
  const float *A;
  int64_t lda;
  float *x_null_check;
  float x;
  int64_t incx;
  float C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &mode, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(const float *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x_null_check, sizeof(const float *)) < 0 ||
      (x_null_check && rpc_read(conn, &x, sizeof(const float)) < 0) ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &C, sizeof(float)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasSdgmm_64(handle, mode, m, n, A, lda, &x, incx, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDdgmm(conn_t *conn) {
  cublasHandle_t handle;
  cublasSideMode_t mode;
  int m;
  int n;
  const double *A;
  int lda;
  double *x_null_check;
  double x;
  int incx;
  double C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &mode, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x_null_check, sizeof(const double *)) < 0 ||
      (x_null_check && rpc_read(conn, &x, sizeof(const double)) < 0) ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &C, sizeof(double)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDdgmm(handle, mode, m, n, A, lda, &x, incx, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDdgmm_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasSideMode_t mode;
  int64_t m;
  int64_t n;
  const double *A;
  int64_t lda;
  double *x_null_check;
  double x;
  int64_t incx;
  double C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &mode, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(const double *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x_null_check, sizeof(const double *)) < 0 ||
      (x_null_check && rpc_read(conn, &x, sizeof(const double)) < 0) ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &C, sizeof(double)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDdgmm_64(handle, mode, m, n, A, lda, &x, incx, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCdgmm(conn_t *conn) {
  cublasHandle_t handle;
  cublasSideMode_t mode;
  int m;
  int n;
  const cuComplex *A;
  int lda;
  cuComplex *x_null_check;
  cuComplex x;
  int incx;
  cuComplex C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &mode, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x_null_check, sizeof(const cuComplex *)) < 0 ||
      (x_null_check && rpc_read(conn, &x, sizeof(const cuComplex)) < 0) ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCdgmm(handle, mode, m, n, A, lda, &x, incx, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCdgmm_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasSideMode_t mode;
  int64_t m;
  int64_t n;
  const cuComplex *A;
  int64_t lda;
  cuComplex *x_null_check;
  cuComplex x;
  int64_t incx;
  cuComplex C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &mode, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x_null_check, sizeof(const cuComplex *)) < 0 ||
      (x_null_check && rpc_read(conn, &x, sizeof(const cuComplex)) < 0) ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCdgmm_64(handle, mode, m, n, A, lda, &x, incx, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZdgmm(conn_t *conn) {
  cublasHandle_t handle;
  cublasSideMode_t mode;
  int m;
  int n;
  const cuDoubleComplex *A;
  int lda;
  cuDoubleComplex *x_null_check;
  cuDoubleComplex x;
  int incx;
  cuDoubleComplex C;
  int ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &mode, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &x_null_check, sizeof(const cuDoubleComplex *)) < 0 ||
      (x_null_check && rpc_read(conn, &x, sizeof(const cuDoubleComplex)) < 0) ||
      rpc_read(conn, &incx, sizeof(int)) < 0 ||
      rpc_read(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZdgmm(handle, mode, m, n, A, lda, &x, incx, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZdgmm_64(conn_t *conn) {
  cublasHandle_t handle;
  cublasSideMode_t mode;
  int64_t m;
  int64_t n;
  const cuDoubleComplex *A;
  int64_t lda;
  cuDoubleComplex *x_null_check;
  cuDoubleComplex x;
  int64_t incx;
  cuDoubleComplex C;
  int64_t ldc;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &mode, sizeof(cublasSideMode_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &x_null_check, sizeof(const cuDoubleComplex *)) < 0 ||
      (x_null_check && rpc_read(conn, &x, sizeof(const cuDoubleComplex)) < 0) ||
      rpc_read(conn, &incx, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int64_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZdgmm_64(handle, mode, m, n, A, lda, &x, incx, &C, ldc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSmatinvBatched(conn_t *conn) {
  int batchSize;
  cublasHandle_t handle;
  int n;
  const float **A = nullptr;
  int lda;
  float **Ainv = nullptr;
  int lda_inv;
  int info;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchSize, sizeof(int)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(const float *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &Ainv, sizeof(float *const *)) < 0 ||
      rpc_read(conn, &lda_inv, sizeof(int)) < 0 ||
      rpc_read(conn, &info, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasSmatinvBatched(handle, n, A, lda, Ainv, lda_inv, &info, batchSize);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &info, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDmatinvBatched(conn_t *conn) {
  int batchSize;
  cublasHandle_t handle;
  int n;
  const double **A = nullptr;
  int lda;
  double **Ainv = nullptr;
  int lda_inv;
  int info;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchSize, sizeof(int)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(const double *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &Ainv, sizeof(double *const *)) < 0 ||
      rpc_read(conn, &lda_inv, sizeof(int)) < 0 ||
      rpc_read(conn, &info, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDmatinvBatched(handle, n, A, lda, Ainv, lda_inv, &info, batchSize);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &info, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCmatinvBatched(conn_t *conn) {
  int batchSize;
  cublasHandle_t handle;
  int n;
  const cuComplex **A = nullptr;
  int lda;
  cuComplex **Ainv = nullptr;
  int lda_inv;
  int info;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchSize, sizeof(int)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &Ainv, sizeof(cuComplex *const *)) < 0 ||
      rpc_read(conn, &lda_inv, sizeof(int)) < 0 ||
      rpc_read(conn, &info, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCmatinvBatched(handle, n, A, lda, Ainv, lda_inv, &info, batchSize);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &info, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZmatinvBatched(conn_t *conn) {
  int batchSize;
  cublasHandle_t handle;
  int n;
  const cuDoubleComplex **A = nullptr;
  int lda;
  cuDoubleComplex **Ainv = nullptr;
  int lda_inv;
  int info;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchSize, sizeof(int)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &Ainv, sizeof(cuDoubleComplex *const *)) < 0 ||
      rpc_read(conn, &lda_inv, sizeof(int)) < 0 ||
      rpc_read(conn, &info, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZmatinvBatched(handle, n, A, lda, Ainv, lda_inv, &info, batchSize);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &info, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSgeqrfBatched(conn_t *conn) {
  int batchSize;
  cublasHandle_t handle;
  int m;
  int n;
  float **Aarray = nullptr;
  int lda;
  float **TauArray = nullptr;
  int info;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchSize, sizeof(int)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &Aarray, sizeof(float *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &TauArray, sizeof(float *const *)) < 0 ||
      rpc_read(conn, &info, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasSgeqrfBatched(handle, m, n, Aarray, lda,
                                               TauArray, &info, batchSize);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &info, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDgeqrfBatched(conn_t *conn) {
  int batchSize;
  cublasHandle_t handle;
  int m;
  int n;
  double **Aarray = nullptr;
  int lda;
  double **TauArray = nullptr;
  int info;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchSize, sizeof(int)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &Aarray, sizeof(double *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &TauArray, sizeof(double *const *)) < 0 ||
      rpc_read(conn, &info, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDgeqrfBatched(handle, m, n, Aarray, lda,
                                               TauArray, &info, batchSize);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &info, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCgeqrfBatched(conn_t *conn) {
  int batchSize;
  cublasHandle_t handle;
  int m;
  int n;
  cuComplex **Aarray = nullptr;
  int lda;
  cuComplex **TauArray = nullptr;
  int info;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchSize, sizeof(int)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &Aarray, sizeof(cuComplex *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &TauArray, sizeof(cuComplex *const *)) < 0 ||
      rpc_read(conn, &info, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCgeqrfBatched(handle, m, n, Aarray, lda,
                                               TauArray, &info, batchSize);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &info, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZgeqrfBatched(conn_t *conn) {
  int batchSize;
  cublasHandle_t handle;
  int m;
  int n;
  cuDoubleComplex **Aarray = nullptr;
  int lda;
  cuDoubleComplex **TauArray = nullptr;
  int info;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchSize, sizeof(int)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &Aarray, sizeof(cuDoubleComplex *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &TauArray, sizeof(cuDoubleComplex *const *)) < 0 ||
      rpc_read(conn, &info, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZgeqrfBatched(handle, m, n, Aarray, lda,
                                               TauArray, &info, batchSize);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &info, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSgelsBatched(conn_t *conn) {
  int batchSize;
  cublasHandle_t handle;
  cublasOperation_t trans;
  int m;
  int n;
  int nrhs;
  float **Aarray = nullptr;
  int lda;
  float **Carray = nullptr;
  int ldc;
  int info;
  int devInfoArray;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchSize, sizeof(int)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &nrhs, sizeof(int)) < 0 ||
      rpc_read(conn, &Aarray, sizeof(float *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &Carray, sizeof(float *const *)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 ||
      rpc_read(conn, &info, sizeof(int)) < 0 ||
      rpc_read(conn, &devInfoArray, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasSgelsBatched(handle, trans, m, n, nrhs, Aarray, lda, Carray, ldc,
                         &info, &devInfoArray, batchSize);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &info, sizeof(int)) < 0 ||
      rpc_write(conn, &devInfoArray, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDgelsBatched(conn_t *conn) {
  int batchSize;
  cublasHandle_t handle;
  cublasOperation_t trans;
  int m;
  int n;
  int nrhs;
  double **Aarray = nullptr;
  int lda;
  double **Carray = nullptr;
  int ldc;
  int info;
  int devInfoArray;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchSize, sizeof(int)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &nrhs, sizeof(int)) < 0 ||
      rpc_read(conn, &Aarray, sizeof(double *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &Carray, sizeof(double *const *)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 ||
      rpc_read(conn, &info, sizeof(int)) < 0 ||
      rpc_read(conn, &devInfoArray, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDgelsBatched(handle, trans, m, n, nrhs, Aarray, lda, Carray, ldc,
                         &info, &devInfoArray, batchSize);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &info, sizeof(int)) < 0 ||
      rpc_write(conn, &devInfoArray, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCgelsBatched(conn_t *conn) {
  int batchSize;
  cublasHandle_t handle;
  cublasOperation_t trans;
  int m;
  int n;
  int nrhs;
  cuComplex **Aarray = nullptr;
  int lda;
  cuComplex **Carray = nullptr;
  int ldc;
  int info;
  int devInfoArray;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchSize, sizeof(int)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &nrhs, sizeof(int)) < 0 ||
      rpc_read(conn, &Aarray, sizeof(cuComplex *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &Carray, sizeof(cuComplex *const *)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 ||
      rpc_read(conn, &info, sizeof(int)) < 0 ||
      rpc_read(conn, &devInfoArray, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCgelsBatched(handle, trans, m, n, nrhs, Aarray, lda, Carray, ldc,
                         &info, &devInfoArray, batchSize);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &info, sizeof(int)) < 0 ||
      rpc_write(conn, &devInfoArray, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZgelsBatched(conn_t *conn) {
  int batchSize;
  cublasHandle_t handle;
  cublasOperation_t trans;
  int m;
  int n;
  int nrhs;
  cuDoubleComplex **Aarray = nullptr;
  int lda;
  cuDoubleComplex **Carray = nullptr;
  int ldc;
  int info;
  int devInfoArray;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchSize, sizeof(int)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &nrhs, sizeof(int)) < 0 ||
      rpc_read(conn, &Aarray, sizeof(cuDoubleComplex *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &Carray, sizeof(cuDoubleComplex *const *)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 ||
      rpc_read(conn, &info, sizeof(int)) < 0 ||
      rpc_read(conn, &devInfoArray, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZgelsBatched(handle, trans, m, n, nrhs, Aarray, lda, Carray, ldc,
                         &info, &devInfoArray, batchSize);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &info, sizeof(int)) < 0 ||
      rpc_write(conn, &devInfoArray, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasStpttr(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  float *AP_null_check;
  float AP;
  float A;
  int lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &AP_null_check, sizeof(const float *)) < 0 ||
      (AP_null_check && rpc_read(conn, &AP, sizeof(const float)) < 0) ||
      rpc_read(conn, &A, sizeof(float)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasStpttr(handle, uplo, n, &AP, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDtpttr(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  double *AP_null_check;
  double AP;
  double A;
  int lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &AP_null_check, sizeof(const double *)) < 0 ||
      (AP_null_check && rpc_read(conn, &AP, sizeof(const double)) < 0) ||
      rpc_read(conn, &A, sizeof(double)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDtpttr(handle, uplo, n, &AP, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCtpttr(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  cuComplex *AP_null_check;
  cuComplex AP;
  cuComplex A;
  int lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &AP_null_check, sizeof(const cuComplex *)) < 0 ||
      (AP_null_check && rpc_read(conn, &AP, sizeof(const cuComplex)) < 0) ||
      rpc_read(conn, &A, sizeof(cuComplex)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCtpttr(handle, uplo, n, &AP, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZtpttr(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  cuDoubleComplex *AP_null_check;
  cuDoubleComplex AP;
  cuDoubleComplex A;
  int lda;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &AP_null_check, sizeof(const cuDoubleComplex *)) < 0 ||
      (AP_null_check &&
       rpc_read(conn, &AP, sizeof(const cuDoubleComplex)) < 0) ||
      rpc_read(conn, &A, sizeof(cuDoubleComplex)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZtpttr(handle, uplo, n, &AP, &A, lda);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &A, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasStrttp(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  float *A_null_check;
  float A;
  int lda;
  float AP;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &A_null_check, sizeof(const float *)) < 0 ||
      (A_null_check && rpc_read(conn, &A, sizeof(const float)) < 0) ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &AP, sizeof(float)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasStrttp(handle, uplo, n, &A, lda, &AP);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &AP, sizeof(float)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDtrttp(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  double *A_null_check;
  double A;
  int lda;
  double AP;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &A_null_check, sizeof(const double *)) < 0 ||
      (A_null_check && rpc_read(conn, &A, sizeof(const double)) < 0) ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &AP, sizeof(double)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasDtrttp(handle, uplo, n, &A, lda, &AP);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &AP, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCtrttp(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  cuComplex *A_null_check;
  cuComplex A;
  int lda;
  cuComplex AP;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &A_null_check, sizeof(const cuComplex *)) < 0 ||
      (A_null_check && rpc_read(conn, &A, sizeof(const cuComplex)) < 0) ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &AP, sizeof(cuComplex)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasCtrttp(handle, uplo, n, &A, lda, &AP);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &AP, sizeof(cuComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZtrttp(conn_t *conn) {
  cublasHandle_t handle;
  cublasFillMode_t uplo;
  int n;
  cuDoubleComplex *A_null_check;
  cuDoubleComplex A;
  int lda;
  cuDoubleComplex AP;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &uplo, sizeof(cublasFillMode_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &A_null_check, sizeof(const cuDoubleComplex *)) < 0 ||
      (A_null_check && rpc_read(conn, &A, sizeof(const cuDoubleComplex)) < 0) ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &AP, sizeof(cuDoubleComplex)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasZtrttp(handle, uplo, n, &A, lda, &AP);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &AP, sizeof(cuDoubleComplex)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSgetriBatched(conn_t *conn) {
  int batchSize;
  cublasHandle_t handle;
  int n;
  const float **A = nullptr;
  int lda;
  int *P_null_check;
  int P;
  float **C = nullptr;
  int ldc;
  int info;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchSize, sizeof(int)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(const float *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &P_null_check, sizeof(const int *)) < 0 ||
      (P_null_check && rpc_read(conn, &P, sizeof(const int)) < 0) ||
      rpc_read(conn, &C, sizeof(float *const *)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 ||
      rpc_read(conn, &info, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasSgetriBatched(handle, n, A, lda, &P, C, ldc, &info, batchSize);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &info, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDgetriBatched(conn_t *conn) {
  int batchSize;
  cublasHandle_t handle;
  int n;
  const double **A = nullptr;
  int lda;
  int *P_null_check;
  int P;
  double **C = nullptr;
  int ldc;
  int info;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchSize, sizeof(int)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(const double *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &P_null_check, sizeof(const int *)) < 0 ||
      (P_null_check && rpc_read(conn, &P, sizeof(const int)) < 0) ||
      rpc_read(conn, &C, sizeof(double *const *)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 ||
      rpc_read(conn, &info, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDgetriBatched(handle, n, A, lda, &P, C, ldc, &info, batchSize);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &info, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCgetriBatched(conn_t *conn) {
  int batchSize;
  cublasHandle_t handle;
  int n;
  const cuComplex **A = nullptr;
  int lda;
  int *P_null_check;
  int P;
  cuComplex **C = nullptr;
  int ldc;
  int info;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchSize, sizeof(int)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuComplex *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &P_null_check, sizeof(const int *)) < 0 ||
      (P_null_check && rpc_read(conn, &P, sizeof(const int)) < 0) ||
      rpc_read(conn, &C, sizeof(cuComplex *const *)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 ||
      rpc_read(conn, &info, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCgetriBatched(handle, n, A, lda, &P, C, ldc, &info, batchSize);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &info, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZgetriBatched(conn_t *conn) {
  int batchSize;
  cublasHandle_t handle;
  int n;
  const cuDoubleComplex **A = nullptr;
  int lda;
  int *P_null_check;
  int P;
  cuDoubleComplex **C = nullptr;
  int ldc;
  int info;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchSize, sizeof(int)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(const cuDoubleComplex *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &P_null_check, sizeof(const int *)) < 0 ||
      (P_null_check && rpc_read(conn, &P, sizeof(const int)) < 0) ||
      rpc_read(conn, &C, sizeof(cuDoubleComplex *const *)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 ||
      rpc_read(conn, &info, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZgetriBatched(handle, n, A, lda, &P, C, ldc, &info, batchSize);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &info, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasSgetrsBatched(conn_t *conn) {
  int batchSize;
  cublasHandle_t handle;
  cublasOperation_t trans;
  int n;
  int nrhs;
  const float **Aarray = nullptr;
  int lda;
  int *devIpiv_null_check;
  int devIpiv;
  float **Barray = nullptr;
  int ldb;
  int info;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchSize, sizeof(int)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &nrhs, sizeof(int)) < 0 ||
      rpc_read(conn, &Aarray, sizeof(const float *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &devIpiv_null_check, sizeof(const int *)) < 0 ||
      (devIpiv_null_check && rpc_read(conn, &devIpiv, sizeof(const int)) < 0) ||
      rpc_read(conn, &Barray, sizeof(float *const *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &info, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasSgetrsBatched(handle, trans, n, nrhs, Aarray, lda, &devIpiv, Barray,
                          ldb, &info, batchSize);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &info, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasDgetrsBatched(conn_t *conn) {
  int batchSize;
  cublasHandle_t handle;
  cublasOperation_t trans;
  int n;
  int nrhs;
  const double **Aarray = nullptr;
  int lda;
  int *devIpiv_null_check;
  int devIpiv;
  double **Barray = nullptr;
  int ldb;
  int info;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchSize, sizeof(int)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &nrhs, sizeof(int)) < 0 ||
      rpc_read(conn, &Aarray, sizeof(const double *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &devIpiv_null_check, sizeof(const int *)) < 0 ||
      (devIpiv_null_check && rpc_read(conn, &devIpiv, sizeof(const int)) < 0) ||
      rpc_read(conn, &Barray, sizeof(double *const *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &info, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasDgetrsBatched(handle, trans, n, nrhs, Aarray, lda, &devIpiv, Barray,
                          ldb, &info, batchSize);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &info, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasCgetrsBatched(conn_t *conn) {
  int batchSize;
  cublasHandle_t handle;
  cublasOperation_t trans;
  int n;
  int nrhs;
  const cuComplex **Aarray = nullptr;
  int lda;
  const int *devIpiv;
  cuComplex **Barray = nullptr;
  int ldb;
  int info;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchSize, sizeof(int)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &nrhs, sizeof(int)) < 0 ||
      rpc_read(conn, &Aarray, sizeof(const cuComplex *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &devIpiv, sizeof(const int *)) < 0 ||
      rpc_read(conn, &Barray, sizeof(cuComplex *const *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &info, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasCgetrsBatched(handle, trans, n, nrhs, Aarray, lda, devIpiv, Barray,
                          ldb, &info, batchSize);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &info, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasZgetrsBatched(conn_t *conn) {
  int batchSize;
  cublasHandle_t handle;
  cublasOperation_t trans;
  int n;
  int nrhs;
  const cuDoubleComplex **Aarray = nullptr;
  int lda;
  int *devIpiv_null_check;
  int devIpiv;
  cuDoubleComplex **Barray = nullptr;
  int ldb;
  int info;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &batchSize, sizeof(int)) < 0 ||
      rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &trans, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &nrhs, sizeof(int)) < 0 ||
      rpc_read(conn, &Aarray, sizeof(const cuDoubleComplex *const *)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &devIpiv_null_check, sizeof(const int *)) < 0 ||
      (devIpiv_null_check && rpc_read(conn, &devIpiv, sizeof(const int)) < 0) ||
      rpc_read(conn, &Barray, sizeof(cuDoubleComplex *const *)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &info, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cublasZgetrsBatched(handle, trans, n, nrhs, Aarray, lda, &devIpiv, Barray,
                          ldb, &info, batchSize);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &info, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cublasUint8gemmBias(conn_t *conn) {
  cublasHandle_t handle;
  cublasOperation_t transa;
  cublasOperation_t transb;
  cublasOperation_t transc;
  int m;
  int n;
  int k;
  const unsigned char *A;
  int A_bias;
  int lda;
  const unsigned char *B;
  int B_bias;
  int ldb;
  unsigned char C;
  int C_bias;
  int ldc;
  int C_mult;
  int C_shift;
  int request_id;
  cublasStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cublasHandle_t)) < 0 ||
      rpc_read(conn, &transa, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transb, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &transc, sizeof(cublasOperation_t)) < 0 ||
      rpc_read(conn, &m, sizeof(int)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &A, sizeof(const unsigned char *)) < 0 ||
      rpc_read(conn, &A_bias, sizeof(int)) < 0 ||
      rpc_read(conn, &lda, sizeof(int)) < 0 ||
      rpc_read(conn, &B, sizeof(const unsigned char *)) < 0 ||
      rpc_read(conn, &B_bias, sizeof(int)) < 0 ||
      rpc_read(conn, &ldb, sizeof(int)) < 0 ||
      rpc_read(conn, &C, sizeof(unsigned char)) < 0 ||
      rpc_read(conn, &C_bias, sizeof(int)) < 0 ||
      rpc_read(conn, &ldc, sizeof(int)) < 0 ||
      rpc_read(conn, &C_mult, sizeof(int)) < 0 ||
      rpc_read(conn, &C_shift, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cublasUint8gemmBias(
      handle, transa, transb, transc, m, n, k, A, A_bias, lda, B, B_bias, ldb,
      &C, C_bias, ldc, C_mult, C_shift);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &C, sizeof(unsigned char)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cublasStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnGetProperty(conn_t *conn) {
  libraryPropertyType type;
  int value;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &type, sizeof(libraryPropertyType)) < 0 ||
      rpc_read(conn, &value, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnGetProperty(type, &value);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &value, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnCreate(conn_t *conn) {
  cudnnHandle_t handle;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnCreate(&handle);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &handle, sizeof(cudnnHandle_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnDestroy(conn_t *conn) {
  cudnnHandle_t handle;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cudnnHandle_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnDestroy(handle);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnSetStream(conn_t *conn) {
  cudnnHandle_t handle;
  cudaStream_t streamId;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cudnnHandle_t)) < 0 ||
      rpc_read(conn, &streamId, sizeof(cudaStream_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnSetStream(handle, streamId);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnGetStream(conn_t *conn) {
  cudnnHandle_t handle;
  cudaStream_t streamId;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cudnnHandle_t)) < 0 ||
      rpc_read(conn, &streamId, sizeof(cudaStream_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnGetStream(handle, &streamId);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &streamId, sizeof(cudaStream_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnGetCallback(conn_t *conn) {
  unsigned mask;
  void *udata;
  cudnnCallback_t fptr;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &mask, sizeof(unsigned)) < 0 ||
      rpc_read(conn, &udata, sizeof(void *)) < 0 ||
      rpc_read(conn, &fptr, sizeof(cudnnCallback_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnGetCallback(&mask, &udata, &fptr);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &mask, sizeof(unsigned)) < 0 ||
      rpc_write(conn, &udata, sizeof(void *)) < 0 ||
      rpc_write(conn, &fptr, sizeof(cudnnCallback_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnGraphVersionCheck(conn_t *conn) {
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnGraphVersionCheck();

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnBackendCreateDescriptor(conn_t *conn) {
  cudnnBackendDescriptorType_t descriptorType;
  cudnnBackendDescriptor_t descriptor;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &descriptorType, sizeof(cudnnBackendDescriptorType_t)) <
          0 ||
      rpc_read(conn, &descriptor, sizeof(cudnnBackendDescriptor_t)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudnnBackendCreateDescriptor(descriptorType, &descriptor);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &descriptor, sizeof(cudnnBackendDescriptor_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnBackendDestroyDescriptor(conn_t *conn) {
  cudnnBackendDescriptor_t descriptor;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &descriptor, sizeof(cudnnBackendDescriptor_t)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnBackendDestroyDescriptor(descriptor);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnBackendInitialize(conn_t *conn) {
  cudnnBackendDescriptor_t descriptor;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &descriptor, sizeof(cudnnBackendDescriptor_t)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnBackendInitialize(descriptor);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnBackendFinalize(conn_t *conn) {
  cudnnBackendDescriptor_t descriptor;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &descriptor, sizeof(cudnnBackendDescriptor_t)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnBackendFinalize(descriptor);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnBackendSetAttribute(conn_t *conn) {
  cudnnBackendDescriptor_t descriptor;
  cudnnBackendAttributeName_t attributeName;
  cudnnBackendAttributeType_t attributeType;
  int64_t elementCount;
  const void *arrayOfElements;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &descriptor, sizeof(cudnnBackendDescriptor_t)) < 0 ||
      rpc_read(conn, &attributeName, sizeof(cudnnBackendAttributeName_t)) < 0 ||
      rpc_read(conn, &attributeType, sizeof(cudnnBackendAttributeType_t)) < 0 ||
      rpc_read(conn, &elementCount, sizeof(int64_t)) < 0 ||
      rpc_read(conn, &arrayOfElements, sizeof(const void *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnBackendSetAttribute(
      descriptor, attributeName, attributeType, elementCount, arrayOfElements);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnBackendExecute(conn_t *conn) {
  cudnnHandle_t handle;
  cudnnBackendDescriptor_t executionPlan;
  cudnnBackendDescriptor_t variantPack;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cudnnHandle_t)) < 0 ||
      rpc_read(conn, &executionPlan, sizeof(cudnnBackendDescriptor_t)) < 0 ||
      rpc_read(conn, &variantPack, sizeof(cudnnBackendDescriptor_t)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudnnBackendExecute(handle, executionPlan, variantPack);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnBackendPopulateCudaGraph(conn_t *conn) {
  cudnnHandle_t handle;
  cudnnBackendDescriptor_t executionPlan;
  cudnnBackendDescriptor_t variantPack;
  cudaGraph_t graph;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cudnnHandle_t)) < 0 ||
      rpc_read(conn, &executionPlan, sizeof(cudnnBackendDescriptor_t)) < 0 ||
      rpc_read(conn, &variantPack, sizeof(cudnnBackendDescriptor_t)) < 0 ||
      rpc_read(conn, &graph, sizeof(cudaGraph_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudnnBackendPopulateCudaGraph(handle, executionPlan, variantPack, graph);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnBackendUpdateCudaGraph(conn_t *conn) {
  cudnnHandle_t handle;
  cudnnBackendDescriptor_t executionPlan;
  cudnnBackendDescriptor_t variantPack;
  cudaGraph_t graph;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cudnnHandle_t)) < 0 ||
      rpc_read(conn, &executionPlan, sizeof(cudnnBackendDescriptor_t)) < 0 ||
      rpc_read(conn, &variantPack, sizeof(cudnnBackendDescriptor_t)) < 0 ||
      rpc_read(conn, &graph, sizeof(cudaGraph_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudnnBackendUpdateCudaGraph(handle, executionPlan, variantPack, graph);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnCreateTensorDescriptor(conn_t *conn) {
  cudnnTensorDescriptor_t tensorDesc;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &tensorDesc, sizeof(cudnnTensorDescriptor_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnCreateTensorDescriptor(&tensorDesc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &tensorDesc, sizeof(cudnnTensorDescriptor_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnSetTensor4dDescriptor(conn_t *conn) {
  cudnnTensorDescriptor_t tensorDesc;
  cudnnTensorFormat_t format;
  cudnnDataType_t dataType;
  int n;
  int c;
  int h;
  int w;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &tensorDesc, sizeof(cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &format, sizeof(cudnnTensorFormat_t)) < 0 ||
      rpc_read(conn, &dataType, sizeof(cudnnDataType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &c, sizeof(int)) < 0 ||
      rpc_read(conn, &h, sizeof(int)) < 0 ||
      rpc_read(conn, &w, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudnnSetTensor4dDescriptor(tensorDesc, format, dataType, n, c, h, w);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnSetTensor4dDescriptorEx(conn_t *conn) {
  cudnnTensorDescriptor_t tensorDesc;
  cudnnDataType_t dataType;
  int n;
  int c;
  int h;
  int w;
  int nStride;
  int cStride;
  int hStride;
  int wStride;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &tensorDesc, sizeof(cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &dataType, sizeof(cudnnDataType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &c, sizeof(int)) < 0 ||
      rpc_read(conn, &h, sizeof(int)) < 0 ||
      rpc_read(conn, &w, sizeof(int)) < 0 ||
      rpc_read(conn, &nStride, sizeof(int)) < 0 ||
      rpc_read(conn, &cStride, sizeof(int)) < 0 ||
      rpc_read(conn, &hStride, sizeof(int)) < 0 ||
      rpc_read(conn, &wStride, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnSetTensor4dDescriptorEx(
      tensorDesc, dataType, n, c, h, w, nStride, cStride, hStride, wStride);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnGetTensor4dDescriptor(conn_t *conn) {
  cudnnTensorDescriptor_t tensorDesc;
  cudnnDataType_t dataType;
  int n;
  int c;
  int h;
  int w;
  int nStride;
  int cStride;
  int hStride;
  int wStride;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &tensorDesc, sizeof(const cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &dataType, sizeof(cudnnDataType_t)) < 0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &c, sizeof(int)) < 0 ||
      rpc_read(conn, &h, sizeof(int)) < 0 ||
      rpc_read(conn, &w, sizeof(int)) < 0 ||
      rpc_read(conn, &nStride, sizeof(int)) < 0 ||
      rpc_read(conn, &cStride, sizeof(int)) < 0 ||
      rpc_read(conn, &hStride, sizeof(int)) < 0 ||
      rpc_read(conn, &wStride, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudnnGetTensor4dDescriptor(tensorDesc, &dataType, &n, &c, &h, &w,
                                 &nStride, &cStride, &hStride, &wStride);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &dataType, sizeof(cudnnDataType_t)) < 0 ||
      rpc_write(conn, &n, sizeof(int)) < 0 ||
      rpc_write(conn, &c, sizeof(int)) < 0 ||
      rpc_write(conn, &h, sizeof(int)) < 0 ||
      rpc_write(conn, &w, sizeof(int)) < 0 ||
      rpc_write(conn, &nStride, sizeof(int)) < 0 ||
      rpc_write(conn, &cStride, sizeof(int)) < 0 ||
      rpc_write(conn, &hStride, sizeof(int)) < 0 ||
      rpc_write(conn, &wStride, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnGetTensorSizeInBytes(conn_t *conn) {
  cudnnTensorDescriptor_t tensorDesc;
  size_t size;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &tensorDesc, sizeof(const cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &size, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnGetTensorSizeInBytes(tensorDesc, &size);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &size, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnDestroyTensorDescriptor(conn_t *conn) {
  cudnnTensorDescriptor_t tensorDesc;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &tensorDesc, sizeof(cudnnTensorDescriptor_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnDestroyTensorDescriptor(tensorDesc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnInitTransformDest(conn_t *conn) {
  cudnnTensorTransformDescriptor_t transformDesc;
  cudnnTensorDescriptor_t srcDesc;
  cudnnTensorDescriptor_t destDesc;
  size_t destSizeInBytes;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &transformDesc,
               sizeof(const cudnnTensorTransformDescriptor_t)) < 0 ||
      rpc_read(conn, &srcDesc, sizeof(const cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &destDesc, sizeof(cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &destSizeInBytes, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnInitTransformDest(transformDesc, srcDesc,
                                                  destDesc, &destSizeInBytes);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &destSizeInBytes, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnCreateTensorTransformDescriptor(conn_t *conn) {
  cudnnTensorTransformDescriptor_t transformDesc;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &transformDesc, sizeof(cudnnTensorTransformDescriptor_t)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnCreateTensorTransformDescriptor(&transformDesc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &transformDesc,
                sizeof(cudnnTensorTransformDescriptor_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnDestroyTensorTransformDescriptor(conn_t *conn) {
  cudnnTensorTransformDescriptor_t transformDesc;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &transformDesc, sizeof(cudnnTensorTransformDescriptor_t)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnDestroyTensorTransformDescriptor(transformDesc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnCreateOpTensorDescriptor(conn_t *conn) {
  cudnnOpTensorDescriptor_t opTensorDesc;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &opTensorDesc, sizeof(cudnnOpTensorDescriptor_t)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnCreateOpTensorDescriptor(&opTensorDesc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &opTensorDesc, sizeof(cudnnOpTensorDescriptor_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnSetOpTensorDescriptor(conn_t *conn) {
  cudnnOpTensorDescriptor_t opTensorDesc;
  cudnnOpTensorOp_t opTensorOp;
  cudnnDataType_t opTensorCompType;
  cudnnNanPropagation_t opTensorNanOpt;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &opTensorDesc, sizeof(cudnnOpTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &opTensorOp, sizeof(cudnnOpTensorOp_t)) < 0 ||
      rpc_read(conn, &opTensorCompType, sizeof(cudnnDataType_t)) < 0 ||
      rpc_read(conn, &opTensorNanOpt, sizeof(cudnnNanPropagation_t)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnSetOpTensorDescriptor(
      opTensorDesc, opTensorOp, opTensorCompType, opTensorNanOpt);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnGetOpTensorDescriptor(conn_t *conn) {
  cudnnOpTensorDescriptor_t opTensorDesc;
  cudnnOpTensorOp_t opTensorOp;
  cudnnDataType_t opTensorCompType;
  cudnnNanPropagation_t opTensorNanOpt;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &opTensorDesc, sizeof(const cudnnOpTensorDescriptor_t)) <
          0 ||
      rpc_read(conn, &opTensorOp, sizeof(cudnnOpTensorOp_t)) < 0 ||
      rpc_read(conn, &opTensorCompType, sizeof(cudnnDataType_t)) < 0 ||
      rpc_read(conn, &opTensorNanOpt, sizeof(cudnnNanPropagation_t)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnGetOpTensorDescriptor(
      opTensorDesc, &opTensorOp, &opTensorCompType, &opTensorNanOpt);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &opTensorOp, sizeof(cudnnOpTensorOp_t)) < 0 ||
      rpc_write(conn, &opTensorCompType, sizeof(cudnnDataType_t)) < 0 ||
      rpc_write(conn, &opTensorNanOpt, sizeof(cudnnNanPropagation_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnDestroyOpTensorDescriptor(conn_t *conn) {
  cudnnOpTensorDescriptor_t opTensorDesc;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &opTensorDesc, sizeof(cudnnOpTensorDescriptor_t)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnDestroyOpTensorDescriptor(opTensorDesc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnCreateReduceTensorDescriptor(conn_t *conn) {
  cudnnReduceTensorDescriptor_t reduceTensorDesc;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &reduceTensorDesc, sizeof(cudnnReduceTensorDescriptor_t)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnCreateReduceTensorDescriptor(&reduceTensorDesc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &reduceTensorDesc,
                sizeof(cudnnReduceTensorDescriptor_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnSetReduceTensorDescriptor(conn_t *conn) {
  cudnnReduceTensorDescriptor_t reduceTensorDesc;
  cudnnReduceTensorOp_t reduceTensorOp;
  cudnnDataType_t reduceTensorCompType;
  cudnnNanPropagation_t reduceTensorNanOpt;
  cudnnReduceTensorIndices_t reduceTensorIndices;
  cudnnIndicesType_t reduceTensorIndicesType;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &reduceTensorDesc, sizeof(cudnnReduceTensorDescriptor_t)) <
          0 ||
      rpc_read(conn, &reduceTensorOp, sizeof(cudnnReduceTensorOp_t)) < 0 ||
      rpc_read(conn, &reduceTensorCompType, sizeof(cudnnDataType_t)) < 0 ||
      rpc_read(conn, &reduceTensorNanOpt, sizeof(cudnnNanPropagation_t)) < 0 ||
      rpc_read(conn, &reduceTensorIndices, sizeof(cudnnReduceTensorIndices_t)) <
          0 ||
      rpc_read(conn, &reduceTensorIndicesType, sizeof(cudnnIndicesType_t)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnSetReduceTensorDescriptor(
      reduceTensorDesc, reduceTensorOp, reduceTensorCompType,
      reduceTensorNanOpt, reduceTensorIndices, reduceTensorIndicesType);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnGetReduceTensorDescriptor(conn_t *conn) {
  cudnnReduceTensorDescriptor_t reduceTensorDesc;
  cudnnReduceTensorOp_t reduceTensorOp;
  cudnnDataType_t reduceTensorCompType;
  cudnnNanPropagation_t reduceTensorNanOpt;
  cudnnReduceTensorIndices_t reduceTensorIndices;
  cudnnIndicesType_t reduceTensorIndicesType;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &reduceTensorDesc,
               sizeof(const cudnnReduceTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &reduceTensorOp, sizeof(cudnnReduceTensorOp_t)) < 0 ||
      rpc_read(conn, &reduceTensorCompType, sizeof(cudnnDataType_t)) < 0 ||
      rpc_read(conn, &reduceTensorNanOpt, sizeof(cudnnNanPropagation_t)) < 0 ||
      rpc_read(conn, &reduceTensorIndices, sizeof(cudnnReduceTensorIndices_t)) <
          0 ||
      rpc_read(conn, &reduceTensorIndicesType, sizeof(cudnnIndicesType_t)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnGetReduceTensorDescriptor(
      reduceTensorDesc, &reduceTensorOp, &reduceTensorCompType,
      &reduceTensorNanOpt, &reduceTensorIndices, &reduceTensorIndicesType);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &reduceTensorOp, sizeof(cudnnReduceTensorOp_t)) < 0 ||
      rpc_write(conn, &reduceTensorCompType, sizeof(cudnnDataType_t)) < 0 ||
      rpc_write(conn, &reduceTensorNanOpt, sizeof(cudnnNanPropagation_t)) < 0 ||
      rpc_write(conn, &reduceTensorIndices,
                sizeof(cudnnReduceTensorIndices_t)) < 0 ||
      rpc_write(conn, &reduceTensorIndicesType, sizeof(cudnnIndicesType_t)) <
          0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnDestroyReduceTensorDescriptor(conn_t *conn) {
  cudnnReduceTensorDescriptor_t reduceTensorDesc;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &reduceTensorDesc, sizeof(cudnnReduceTensorDescriptor_t)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnDestroyReduceTensorDescriptor(reduceTensorDesc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnGetReductionIndicesSize(conn_t *conn) {
  cudnnHandle_t handle;
  cudnnReduceTensorDescriptor_t reduceTensorDesc;
  cudnnTensorDescriptor_t aDesc;
  cudnnTensorDescriptor_t cDesc;
  size_t sizeInBytes;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cudnnHandle_t)) < 0 ||
      rpc_read(conn, &reduceTensorDesc,
               sizeof(const cudnnReduceTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &aDesc, sizeof(const cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &cDesc, sizeof(const cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &sizeInBytes, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnGetReductionIndicesSize(
      handle, reduceTensorDesc, aDesc, cDesc, &sizeInBytes);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &sizeInBytes, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnGetReductionWorkspaceSize(conn_t *conn) {
  cudnnHandle_t handle;
  cudnnReduceTensorDescriptor_t reduceTensorDesc;
  cudnnTensorDescriptor_t aDesc;
  cudnnTensorDescriptor_t cDesc;
  size_t sizeInBytes;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cudnnHandle_t)) < 0 ||
      rpc_read(conn, &reduceTensorDesc,
               sizeof(const cudnnReduceTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &aDesc, sizeof(const cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &cDesc, sizeof(const cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &sizeInBytes, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnGetReductionWorkspaceSize(
      handle, reduceTensorDesc, aDesc, cDesc, &sizeInBytes);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &sizeInBytes, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnCreateFilterDescriptor(conn_t *conn) {
  cudnnFilterDescriptor_t filterDesc;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &filterDesc, sizeof(cudnnFilterDescriptor_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnCreateFilterDescriptor(&filterDesc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &filterDesc, sizeof(cudnnFilterDescriptor_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnSetFilter4dDescriptor(conn_t *conn) {
  cudnnFilterDescriptor_t filterDesc;
  cudnnDataType_t dataType;
  cudnnTensorFormat_t format;
  int k;
  int c;
  int h;
  int w;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &filterDesc, sizeof(cudnnFilterDescriptor_t)) < 0 ||
      rpc_read(conn, &dataType, sizeof(cudnnDataType_t)) < 0 ||
      rpc_read(conn, &format, sizeof(cudnnTensorFormat_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &c, sizeof(int)) < 0 ||
      rpc_read(conn, &h, sizeof(int)) < 0 ||
      rpc_read(conn, &w, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudnnSetFilter4dDescriptor(filterDesc, dataType, format, k, c, h, w);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnGetFilter4dDescriptor(conn_t *conn) {
  cudnnFilterDescriptor_t filterDesc;
  cudnnDataType_t dataType;
  cudnnTensorFormat_t format;
  int k;
  int c;
  int h;
  int w;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &filterDesc, sizeof(const cudnnFilterDescriptor_t)) < 0 ||
      rpc_read(conn, &dataType, sizeof(cudnnDataType_t)) < 0 ||
      rpc_read(conn, &format, sizeof(cudnnTensorFormat_t)) < 0 ||
      rpc_read(conn, &k, sizeof(int)) < 0 ||
      rpc_read(conn, &c, sizeof(int)) < 0 ||
      rpc_read(conn, &h, sizeof(int)) < 0 ||
      rpc_read(conn, &w, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnGetFilter4dDescriptor(filterDesc, &dataType,
                                                      &format, &k, &c, &h, &w);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &dataType, sizeof(cudnnDataType_t)) < 0 ||
      rpc_write(conn, &format, sizeof(cudnnTensorFormat_t)) < 0 ||
      rpc_write(conn, &k, sizeof(int)) < 0 ||
      rpc_write(conn, &c, sizeof(int)) < 0 ||
      rpc_write(conn, &h, sizeof(int)) < 0 ||
      rpc_write(conn, &w, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnGetFilterSizeInBytes(conn_t *conn) {
  cudnnFilterDescriptor_t filterDesc;
  size_t size;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &filterDesc, sizeof(const cudnnFilterDescriptor_t)) < 0 ||
      rpc_read(conn, &size, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnGetFilterSizeInBytes(filterDesc, &size);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &size, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnDestroyFilterDescriptor(conn_t *conn) {
  cudnnFilterDescriptor_t filterDesc;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &filterDesc, sizeof(cudnnFilterDescriptor_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnDestroyFilterDescriptor(filterDesc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnCreatePoolingDescriptor(conn_t *conn) {
  cudnnPoolingDescriptor_t poolingDesc;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &poolingDesc, sizeof(cudnnPoolingDescriptor_t)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnCreatePoolingDescriptor(&poolingDesc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &poolingDesc, sizeof(cudnnPoolingDescriptor_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnSetPooling2dDescriptor(conn_t *conn) {
  cudnnPoolingDescriptor_t poolingDesc;
  cudnnPoolingMode_t mode;
  cudnnNanPropagation_t maxpoolingNanOpt;
  int windowHeight;
  int windowWidth;
  int verticalPadding;
  int horizontalPadding;
  int verticalStride;
  int horizontalStride;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &poolingDesc, sizeof(cudnnPoolingDescriptor_t)) < 0 ||
      rpc_read(conn, &mode, sizeof(cudnnPoolingMode_t)) < 0 ||
      rpc_read(conn, &maxpoolingNanOpt, sizeof(cudnnNanPropagation_t)) < 0 ||
      rpc_read(conn, &windowHeight, sizeof(int)) < 0 ||
      rpc_read(conn, &windowWidth, sizeof(int)) < 0 ||
      rpc_read(conn, &verticalPadding, sizeof(int)) < 0 ||
      rpc_read(conn, &horizontalPadding, sizeof(int)) < 0 ||
      rpc_read(conn, &verticalStride, sizeof(int)) < 0 ||
      rpc_read(conn, &horizontalStride, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnSetPooling2dDescriptor(
      poolingDesc, mode, maxpoolingNanOpt, windowHeight, windowWidth,
      verticalPadding, horizontalPadding, verticalStride, horizontalStride);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnGetPooling2dDescriptor(conn_t *conn) {
  cudnnPoolingDescriptor_t poolingDesc;
  cudnnPoolingMode_t mode;
  cudnnNanPropagation_t maxpoolingNanOpt;
  int windowHeight;
  int windowWidth;
  int verticalPadding;
  int horizontalPadding;
  int verticalStride;
  int horizontalStride;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &poolingDesc, sizeof(const cudnnPoolingDescriptor_t)) <
          0 ||
      rpc_read(conn, &mode, sizeof(cudnnPoolingMode_t)) < 0 ||
      rpc_read(conn, &maxpoolingNanOpt, sizeof(cudnnNanPropagation_t)) < 0 ||
      rpc_read(conn, &windowHeight, sizeof(int)) < 0 ||
      rpc_read(conn, &windowWidth, sizeof(int)) < 0 ||
      rpc_read(conn, &verticalPadding, sizeof(int)) < 0 ||
      rpc_read(conn, &horizontalPadding, sizeof(int)) < 0 ||
      rpc_read(conn, &verticalStride, sizeof(int)) < 0 ||
      rpc_read(conn, &horizontalStride, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnGetPooling2dDescriptor(
      poolingDesc, &mode, &maxpoolingNanOpt, &windowHeight, &windowWidth,
      &verticalPadding, &horizontalPadding, &verticalStride, &horizontalStride);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &mode, sizeof(cudnnPoolingMode_t)) < 0 ||
      rpc_write(conn, &maxpoolingNanOpt, sizeof(cudnnNanPropagation_t)) < 0 ||
      rpc_write(conn, &windowHeight, sizeof(int)) < 0 ||
      rpc_write(conn, &windowWidth, sizeof(int)) < 0 ||
      rpc_write(conn, &verticalPadding, sizeof(int)) < 0 ||
      rpc_write(conn, &horizontalPadding, sizeof(int)) < 0 ||
      rpc_write(conn, &verticalStride, sizeof(int)) < 0 ||
      rpc_write(conn, &horizontalStride, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnGetPooling2dForwardOutputDim(conn_t *conn) {
  cudnnPoolingDescriptor_t poolingDesc;
  cudnnTensorDescriptor_t inputTensorDesc;
  int n;
  int c;
  int h;
  int w;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &poolingDesc, sizeof(const cudnnPoolingDescriptor_t)) <
          0 ||
      rpc_read(conn, &inputTensorDesc, sizeof(const cudnnTensorDescriptor_t)) <
          0 ||
      rpc_read(conn, &n, sizeof(int)) < 0 ||
      rpc_read(conn, &c, sizeof(int)) < 0 ||
      rpc_read(conn, &h, sizeof(int)) < 0 ||
      rpc_read(conn, &w, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnGetPooling2dForwardOutputDim(
      poolingDesc, inputTensorDesc, &n, &c, &h, &w);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &n, sizeof(int)) < 0 ||
      rpc_write(conn, &c, sizeof(int)) < 0 ||
      rpc_write(conn, &h, sizeof(int)) < 0 ||
      rpc_write(conn, &w, sizeof(int)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnDestroyPoolingDescriptor(conn_t *conn) {
  cudnnPoolingDescriptor_t poolingDesc;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &poolingDesc, sizeof(cudnnPoolingDescriptor_t)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnDestroyPoolingDescriptor(poolingDesc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnCreateActivationDescriptor(conn_t *conn) {
  cudnnActivationDescriptor_t activationDesc;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &activationDesc, sizeof(cudnnActivationDescriptor_t)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnCreateActivationDescriptor(&activationDesc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &activationDesc, sizeof(cudnnActivationDescriptor_t)) <
          0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnSetActivationDescriptor(conn_t *conn) {
  cudnnActivationDescriptor_t activationDesc;
  cudnnActivationMode_t mode;
  cudnnNanPropagation_t reluNanOpt;
  double coef;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &activationDesc, sizeof(cudnnActivationDescriptor_t)) <
          0 ||
      rpc_read(conn, &mode, sizeof(cudnnActivationMode_t)) < 0 ||
      rpc_read(conn, &reluNanOpt, sizeof(cudnnNanPropagation_t)) < 0 ||
      rpc_read(conn, &coef, sizeof(double)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudnnSetActivationDescriptor(activationDesc, mode, reluNanOpt, coef);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnGetActivationDescriptor(conn_t *conn) {
  cudnnActivationDescriptor_t activationDesc;
  cudnnActivationMode_t mode;
  cudnnNanPropagation_t reluNanOpt;
  double coef;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &activationDesc,
               sizeof(const cudnnActivationDescriptor_t)) < 0 ||
      rpc_read(conn, &mode, sizeof(cudnnActivationMode_t)) < 0 ||
      rpc_read(conn, &reluNanOpt, sizeof(cudnnNanPropagation_t)) < 0 ||
      rpc_read(conn, &coef, sizeof(double)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudnnGetActivationDescriptor(activationDesc, &mode, &reluNanOpt, &coef);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &mode, sizeof(cudnnActivationMode_t)) < 0 ||
      rpc_write(conn, &reluNanOpt, sizeof(cudnnNanPropagation_t)) < 0 ||
      rpc_write(conn, &coef, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnSetActivationDescriptorSwishBeta(conn_t *conn) {
  cudnnActivationDescriptor_t activationDesc;
  double swish_beta;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &activationDesc, sizeof(cudnnActivationDescriptor_t)) <
          0 ||
      rpc_read(conn, &swish_beta, sizeof(double)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudnnSetActivationDescriptorSwishBeta(activationDesc, swish_beta);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnGetActivationDescriptorSwishBeta(conn_t *conn) {
  cudnnActivationDescriptor_t activationDesc;
  double swish_beta;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &activationDesc, sizeof(cudnnActivationDescriptor_t)) <
          0 ||
      rpc_read(conn, &swish_beta, sizeof(double)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudnnGetActivationDescriptorSwishBeta(activationDesc, &swish_beta);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &swish_beta, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnDestroyActivationDescriptor(conn_t *conn) {
  cudnnActivationDescriptor_t activationDesc;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &activationDesc, sizeof(cudnnActivationDescriptor_t)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnDestroyActivationDescriptor(activationDesc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnActivationForward(conn_t *conn) {
  cudnnHandle_t handle;
  cudnnActivationDescriptor_t activationDesc;
  void *alpha_null_check;
  void *alpha;
  cudnnTensorDescriptor_t xDesc;
  const void *x;
  void *beta_null_check;
  void *beta;
  cudnnTensorDescriptor_t yDesc;
  void *y;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cudnnHandle_t)) < 0 ||
      rpc_read(conn, &activationDesc, sizeof(cudnnActivationDescriptor_t)) <
          0 ||
      rpc_read(conn, &alpha_null_check, sizeof(const void *)) < 0 ||
      (alpha_null_check && rpc_read(conn, &alpha, sizeof(const void *)) < 0) ||
      rpc_read(conn, &xDesc, sizeof(const cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &x, sizeof(const void *)) < 0 ||
      rpc_read(conn, &beta_null_check, sizeof(const void *)) < 0 ||
      (beta_null_check && rpc_read(conn, &beta, sizeof(const void *)) < 0) ||
      rpc_read(conn, &yDesc, sizeof(const cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &y, sizeof(void *)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnActivationForward(
      handle, activationDesc, &alpha, xDesc, x, &beta, yDesc, y);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnCreateLRNDescriptor(conn_t *conn) {
  cudnnLRNDescriptor_t normDesc;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &normDesc, sizeof(cudnnLRNDescriptor_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnCreateLRNDescriptor(&normDesc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &normDesc, sizeof(cudnnLRNDescriptor_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnSetLRNDescriptor(conn_t *conn) {
  cudnnLRNDescriptor_t normDesc;
  unsigned lrnN;
  double lrnAlpha;
  double lrnBeta;
  double lrnK;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &normDesc, sizeof(cudnnLRNDescriptor_t)) < 0 ||
      rpc_read(conn, &lrnN, sizeof(unsigned)) < 0 ||
      rpc_read(conn, &lrnAlpha, sizeof(double)) < 0 ||
      rpc_read(conn, &lrnBeta, sizeof(double)) < 0 ||
      rpc_read(conn, &lrnK, sizeof(double)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudnnSetLRNDescriptor(normDesc, lrnN, lrnAlpha, lrnBeta, lrnK);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnGetLRNDescriptor(conn_t *conn) {
  cudnnLRNDescriptor_t normDesc;
  unsigned lrnN;
  double lrnAlpha;
  double lrnBeta;
  double lrnK;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &normDesc, sizeof(cudnnLRNDescriptor_t)) < 0 ||
      rpc_read(conn, &lrnN, sizeof(unsigned)) < 0 ||
      rpc_read(conn, &lrnAlpha, sizeof(double)) < 0 ||
      rpc_read(conn, &lrnBeta, sizeof(double)) < 0 ||
      rpc_read(conn, &lrnK, sizeof(double)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudnnGetLRNDescriptor(normDesc, &lrnN, &lrnAlpha, &lrnBeta, &lrnK);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &lrnN, sizeof(unsigned)) < 0 ||
      rpc_write(conn, &lrnAlpha, sizeof(double)) < 0 ||
      rpc_write(conn, &lrnBeta, sizeof(double)) < 0 ||
      rpc_write(conn, &lrnK, sizeof(double)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnDestroyLRNDescriptor(conn_t *conn) {
  cudnnLRNDescriptor_t lrnDesc;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &lrnDesc, sizeof(cudnnLRNDescriptor_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnDestroyLRNDescriptor(lrnDesc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnDeriveBNTensorDescriptor(conn_t *conn) {
  cudnnTensorDescriptor_t derivedBnDesc;
  cudnnTensorDescriptor_t xDesc;
  cudnnBatchNormMode_t mode;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &derivedBnDesc, sizeof(cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &xDesc, sizeof(const cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &mode, sizeof(cudnnBatchNormMode_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudnnDeriveBNTensorDescriptor(derivedBnDesc, xDesc, mode);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnDeriveNormTensorDescriptor(conn_t *conn) {
  cudnnTensorDescriptor_t derivedNormScaleBiasDesc;
  cudnnTensorDescriptor_t derivedNormMeanVarDesc;
  cudnnTensorDescriptor_t xDesc;
  cudnnNormMode_t mode;
  int groupCnt;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &derivedNormScaleBiasDesc,
               sizeof(cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &derivedNormMeanVarDesc, sizeof(cudnnTensorDescriptor_t)) <
          0 ||
      rpc_read(conn, &xDesc, sizeof(const cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &mode, sizeof(cudnnNormMode_t)) < 0 ||
      rpc_read(conn, &groupCnt, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnDeriveNormTensorDescriptor(
      derivedNormScaleBiasDesc, derivedNormMeanVarDesc, xDesc, mode, groupCnt);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnCreateSpatialTransformerDescriptor(conn_t *conn) {
  cudnnSpatialTransformerDescriptor_t stDesc;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &stDesc, sizeof(cudnnSpatialTransformerDescriptor_t)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnCreateSpatialTransformerDescriptor(&stDesc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &stDesc, sizeof(cudnnSpatialTransformerDescriptor_t)) <
          0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnDestroySpatialTransformerDescriptor(conn_t *conn) {
  cudnnSpatialTransformerDescriptor_t stDesc;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &stDesc, sizeof(cudnnSpatialTransformerDescriptor_t)) <
          0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnDestroySpatialTransformerDescriptor(stDesc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnCreateDropoutDescriptor(conn_t *conn) {
  cudnnDropoutDescriptor_t dropoutDesc;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &dropoutDesc, sizeof(cudnnDropoutDescriptor_t)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnCreateDropoutDescriptor(&dropoutDesc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &dropoutDesc, sizeof(cudnnDropoutDescriptor_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnDestroyDropoutDescriptor(conn_t *conn) {
  cudnnDropoutDescriptor_t dropoutDesc;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &dropoutDesc, sizeof(cudnnDropoutDescriptor_t)) < 0 ||
      false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnDestroyDropoutDescriptor(dropoutDesc);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnDropoutGetStatesSize(conn_t *conn) {
  cudnnHandle_t handle;
  size_t sizeInBytes;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cudnnHandle_t)) < 0 ||
      rpc_read(conn, &sizeInBytes, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnDropoutGetStatesSize(handle, &sizeInBytes);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &sizeInBytes, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnDropoutGetReserveSpaceSize(conn_t *conn) {
  cudnnTensorDescriptor_t xdesc;
  size_t sizeInBytes;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &xdesc, sizeof(cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &sizeInBytes, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnDropoutGetReserveSpaceSize(xdesc, &sizeInBytes);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &sizeInBytes, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnGetDropoutDescriptor(conn_t *conn) {
  cudnnDropoutDescriptor_t dropoutDesc;
  cudnnHandle_t handle;
  float dropout;
  void *states;
  unsigned long long seed;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &dropoutDesc, sizeof(cudnnDropoutDescriptor_t)) < 0 ||
      rpc_read(conn, &handle, sizeof(cudnnHandle_t)) < 0 ||
      rpc_read(conn, &dropout, sizeof(float)) < 0 ||
      rpc_read(conn, &states, sizeof(void *)) < 0 ||
      rpc_read(conn, &seed, sizeof(unsigned long long)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudnnGetDropoutDescriptor(dropoutDesc, handle, &dropout, &states, &seed);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &dropout, sizeof(float)) < 0 ||
      rpc_write(conn, &states, sizeof(void *)) < 0 ||
      rpc_write(conn, &seed, sizeof(unsigned long long)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnOpsVersionCheck(conn_t *conn) {
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnOpsVersionCheck();

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnGetBatchNormalizationForwardTrainingExWorkspaceSize(
    conn_t *conn) {
  cudnnHandle_t handle;
  cudnnBatchNormMode_t mode;
  cudnnBatchNormOps_t bnOps;
  cudnnTensorDescriptor_t xDesc;
  cudnnTensorDescriptor_t zDesc;
  cudnnTensorDescriptor_t yDesc;
  cudnnTensorDescriptor_t bnScaleBiasMeanVarDesc;
  cudnnActivationDescriptor_t activationDesc;
  size_t sizeInBytes;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cudnnHandle_t)) < 0 ||
      rpc_read(conn, &mode, sizeof(cudnnBatchNormMode_t)) < 0 ||
      rpc_read(conn, &bnOps, sizeof(cudnnBatchNormOps_t)) < 0 ||
      rpc_read(conn, &xDesc, sizeof(const cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &zDesc, sizeof(const cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &yDesc, sizeof(const cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &bnScaleBiasMeanVarDesc,
               sizeof(const cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &activationDesc,
               sizeof(const cudnnActivationDescriptor_t)) < 0 ||
      rpc_read(conn, &sizeInBytes, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result =
      cudnnGetBatchNormalizationForwardTrainingExWorkspaceSize(
          handle, mode, bnOps, xDesc, zDesc, yDesc, bnScaleBiasMeanVarDesc,
          activationDesc, &sizeInBytes);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &sizeInBytes, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnGetBatchNormalizationBackwardExWorkspaceSize(conn_t *conn) {
  cudnnHandle_t handle;
  cudnnBatchNormMode_t mode;
  cudnnBatchNormOps_t bnOps;
  cudnnTensorDescriptor_t xDesc;
  cudnnTensorDescriptor_t yDesc;
  cudnnTensorDescriptor_t dyDesc;
  cudnnTensorDescriptor_t dzDesc;
  cudnnTensorDescriptor_t dxDesc;
  cudnnTensorDescriptor_t dBnScaleBiasDesc;
  cudnnActivationDescriptor_t activationDesc;
  size_t sizeInBytes;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cudnnHandle_t)) < 0 ||
      rpc_read(conn, &mode, sizeof(cudnnBatchNormMode_t)) < 0 ||
      rpc_read(conn, &bnOps, sizeof(cudnnBatchNormOps_t)) < 0 ||
      rpc_read(conn, &xDesc, sizeof(const cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &yDesc, sizeof(const cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &dyDesc, sizeof(const cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &dzDesc, sizeof(const cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &dxDesc, sizeof(const cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &dBnScaleBiasDesc, sizeof(const cudnnTensorDescriptor_t)) <
          0 ||
      rpc_read(conn, &activationDesc,
               sizeof(const cudnnActivationDescriptor_t)) < 0 ||
      rpc_read(conn, &sizeInBytes, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnGetBatchNormalizationBackwardExWorkspaceSize(
      handle, mode, bnOps, xDesc, yDesc, dyDesc, dzDesc, dxDesc,
      dBnScaleBiasDesc, activationDesc, &sizeInBytes);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &sizeInBytes, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnGetBatchNormalizationTrainingExReserveSpaceSize(conn_t *conn) {
  cudnnHandle_t handle;
  cudnnBatchNormMode_t mode;
  cudnnBatchNormOps_t bnOps;
  cudnnActivationDescriptor_t activationDesc;
  cudnnTensorDescriptor_t xDesc;
  size_t sizeInBytes;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cudnnHandle_t)) < 0 ||
      rpc_read(conn, &mode, sizeof(cudnnBatchNormMode_t)) < 0 ||
      rpc_read(conn, &bnOps, sizeof(cudnnBatchNormOps_t)) < 0 ||
      rpc_read(conn, &activationDesc,
               sizeof(const cudnnActivationDescriptor_t)) < 0 ||
      rpc_read(conn, &xDesc, sizeof(const cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &sizeInBytes, sizeof(size_t)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnGetBatchNormalizationTrainingExReserveSpaceSize(
      handle, mode, bnOps, activationDesc, xDesc, &sizeInBytes);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &sizeInBytes, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnGetNormalizationForwardTrainingWorkspaceSize(conn_t *conn) {
  cudnnHandle_t handle;
  cudnnNormMode_t mode;
  cudnnNormOps_t normOps;
  cudnnNormAlgo_t algo;
  cudnnTensorDescriptor_t xDesc;
  cudnnTensorDescriptor_t zDesc;
  cudnnTensorDescriptor_t yDesc;
  cudnnTensorDescriptor_t normScaleBiasDesc;
  cudnnActivationDescriptor_t activationDesc;
  cudnnTensorDescriptor_t normMeanVarDesc;
  size_t sizeInBytes;
  int groupCnt;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cudnnHandle_t)) < 0 ||
      rpc_read(conn, &mode, sizeof(cudnnNormMode_t)) < 0 ||
      rpc_read(conn, &normOps, sizeof(cudnnNormOps_t)) < 0 ||
      rpc_read(conn, &algo, sizeof(cudnnNormAlgo_t)) < 0 ||
      rpc_read(conn, &xDesc, sizeof(const cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &zDesc, sizeof(const cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &yDesc, sizeof(const cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &normScaleBiasDesc,
               sizeof(const cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &activationDesc,
               sizeof(const cudnnActivationDescriptor_t)) < 0 ||
      rpc_read(conn, &normMeanVarDesc, sizeof(const cudnnTensorDescriptor_t)) <
          0 ||
      rpc_read(conn, &sizeInBytes, sizeof(size_t)) < 0 ||
      rpc_read(conn, &groupCnt, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnGetNormalizationForwardTrainingWorkspaceSize(
      handle, mode, normOps, algo, xDesc, zDesc, yDesc, normScaleBiasDesc,
      activationDesc, normMeanVarDesc, &sizeInBytes, groupCnt);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &sizeInBytes, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnGetNormalizationBackwardWorkspaceSize(conn_t *conn) {
  cudnnHandle_t handle;
  cudnnNormMode_t mode;
  cudnnNormOps_t normOps;
  cudnnNormAlgo_t algo;
  cudnnTensorDescriptor_t xDesc;
  cudnnTensorDescriptor_t yDesc;
  cudnnTensorDescriptor_t dyDesc;
  cudnnTensorDescriptor_t dzDesc;
  cudnnTensorDescriptor_t dxDesc;
  cudnnTensorDescriptor_t dNormScaleBiasDesc;
  cudnnActivationDescriptor_t activationDesc;
  cudnnTensorDescriptor_t normMeanVarDesc;
  size_t sizeInBytes;
  int groupCnt;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cudnnHandle_t)) < 0 ||
      rpc_read(conn, &mode, sizeof(cudnnNormMode_t)) < 0 ||
      rpc_read(conn, &normOps, sizeof(cudnnNormOps_t)) < 0 ||
      rpc_read(conn, &algo, sizeof(cudnnNormAlgo_t)) < 0 ||
      rpc_read(conn, &xDesc, sizeof(const cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &yDesc, sizeof(const cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &dyDesc, sizeof(const cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &dzDesc, sizeof(const cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &dxDesc, sizeof(const cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &dNormScaleBiasDesc,
               sizeof(const cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &activationDesc,
               sizeof(const cudnnActivationDescriptor_t)) < 0 ||
      rpc_read(conn, &normMeanVarDesc, sizeof(const cudnnTensorDescriptor_t)) <
          0 ||
      rpc_read(conn, &sizeInBytes, sizeof(size_t)) < 0 ||
      rpc_read(conn, &groupCnt, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnGetNormalizationBackwardWorkspaceSize(
      handle, mode, normOps, algo, xDesc, yDesc, dyDesc, dzDesc, dxDesc,
      dNormScaleBiasDesc, activationDesc, normMeanVarDesc, &sizeInBytes,
      groupCnt);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &sizeInBytes, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

int handle_cudnnGetNormalizationTrainingReserveSpaceSize(conn_t *conn) {
  cudnnHandle_t handle;
  cudnnNormMode_t mode;
  cudnnNormOps_t normOps;
  cudnnNormAlgo_t algo;
  cudnnActivationDescriptor_t activationDesc;
  cudnnTensorDescriptor_t xDesc;
  size_t sizeInBytes;
  int groupCnt;
  int request_id;
  cudnnStatus_t scuda_intercept_result;
  if (rpc_read(conn, &handle, sizeof(cudnnHandle_t)) < 0 ||
      rpc_read(conn, &mode, sizeof(cudnnNormMode_t)) < 0 ||
      rpc_read(conn, &normOps, sizeof(cudnnNormOps_t)) < 0 ||
      rpc_read(conn, &algo, sizeof(cudnnNormAlgo_t)) < 0 ||
      rpc_read(conn, &activationDesc,
               sizeof(const cudnnActivationDescriptor_t)) < 0 ||
      rpc_read(conn, &xDesc, sizeof(const cudnnTensorDescriptor_t)) < 0 ||
      rpc_read(conn, &sizeInBytes, sizeof(size_t)) < 0 ||
      rpc_read(conn, &groupCnt, sizeof(int)) < 0 || false)
    goto ERROR_0;

  request_id = rpc_read_end(conn);
  if (request_id < 0)
    goto ERROR_0;
  scuda_intercept_result = cudnnGetNormalizationTrainingReserveSpaceSize(
      handle, mode, normOps, algo, activationDesc, xDesc, &sizeInBytes,
      groupCnt);

  if (rpc_write_start_response(conn, request_id) < 0 ||
      rpc_write(conn, &sizeInBytes, sizeof(size_t)) < 0 ||
      rpc_write(conn, &scuda_intercept_result, sizeof(cudnnStatus_t)) < 0 ||
      rpc_write_end(conn) < 0)
    goto ERROR_0;

  return 0;
ERROR_0:
  return -1;
}

static RequestHandler opHandlers[] = {
    handle___cudaRegisterVar,
    handle___cudaRegisterFunction,
    handle___cudaRegisterFatBinary,
    handle___cudaRegisterFatBinaryEnd,
    handle___cudaPushCallConfiguration,
    handle___cudaPopCallConfiguration,
    handle_nvmlInit_v2,
    handle_nvmlInitWithFlags,
    handle_nvmlShutdown,
    nullptr,
    handle_nvmlSystemGetDriverVersion,
    handle_nvmlSystemGetNVMLVersion,
    handle_nvmlSystemGetCudaDriverVersion,
    handle_nvmlSystemGetCudaDriverVersion_v2,
    handle_nvmlSystemGetProcessName,
    handle_nvmlUnitGetCount,
    handle_nvmlUnitGetHandleByIndex,
    handle_nvmlUnitGetUnitInfo,
    handle_nvmlUnitGetLedState,
    handle_nvmlUnitGetPsuInfo,
    handle_nvmlUnitGetTemperature,
    handle_nvmlUnitGetFanSpeedInfo,
    handle_nvmlUnitGetDevices,
    handle_nvmlSystemGetHicVersion,
    handle_nvmlDeviceGetCount_v2,
    handle_nvmlDeviceGetAttributes_v2,
    handle_nvmlDeviceGetHandleByIndex_v2,
    handle_nvmlDeviceGetHandleBySerial,
    handle_nvmlDeviceGetHandleByUUID,
    handle_nvmlDeviceGetHandleByPciBusId_v2,
    handle_nvmlDeviceGetName,
    handle_nvmlDeviceGetBrand,
    handle_nvmlDeviceGetIndex,
    handle_nvmlDeviceGetSerial,
    handle_nvmlDeviceGetMemoryAffinity,
    handle_nvmlDeviceGetCpuAffinityWithinScope,
    handle_nvmlDeviceGetCpuAffinity,
    handle_nvmlDeviceSetCpuAffinity,
    handle_nvmlDeviceClearCpuAffinity,
    handle_nvmlDeviceGetTopologyCommonAncestor,
    handle_nvmlDeviceGetTopologyNearestGpus,
    handle_nvmlSystemGetTopologyGpuSet,
    handle_nvmlDeviceGetP2PStatus,
    handle_nvmlDeviceGetUUID,
    handle_nvmlVgpuInstanceGetMdevUUID,
    handle_nvmlDeviceGetMinorNumber,
    handle_nvmlDeviceGetBoardPartNumber,
    handle_nvmlDeviceGetInforomVersion,
    handle_nvmlDeviceGetInforomImageVersion,
    handle_nvmlDeviceGetInforomConfigurationChecksum,
    handle_nvmlDeviceValidateInforom,
    handle_nvmlDeviceGetDisplayMode,
    handle_nvmlDeviceGetDisplayActive,
    handle_nvmlDeviceGetPersistenceMode,
    handle_nvmlDeviceGetPciInfo_v3,
    handle_nvmlDeviceGetMaxPcieLinkGeneration,
    handle_nvmlDeviceGetGpuMaxPcieLinkGeneration,
    handle_nvmlDeviceGetMaxPcieLinkWidth,
    handle_nvmlDeviceGetCurrPcieLinkGeneration,
    handle_nvmlDeviceGetCurrPcieLinkWidth,
    handle_nvmlDeviceGetPcieThroughput,
    handle_nvmlDeviceGetPcieReplayCounter,
    handle_nvmlDeviceGetClockInfo,
    handle_nvmlDeviceGetMaxClockInfo,
    handle_nvmlDeviceGetApplicationsClock,
    handle_nvmlDeviceGetDefaultApplicationsClock,
    handle_nvmlDeviceResetApplicationsClocks,
    handle_nvmlDeviceGetClock,
    handle_nvmlDeviceGetMaxCustomerBoostClock,
    handle_nvmlDeviceGetSupportedMemoryClocks,
    handle_nvmlDeviceGetSupportedGraphicsClocks,
    handle_nvmlDeviceGetAutoBoostedClocksEnabled,
    handle_nvmlDeviceSetAutoBoostedClocksEnabled,
    handle_nvmlDeviceSetDefaultAutoBoostedClocksEnabled,
    handle_nvmlDeviceGetFanSpeed,
    handle_nvmlDeviceGetFanSpeed_v2,
    handle_nvmlDeviceGetTargetFanSpeed,
    handle_nvmlDeviceSetDefaultFanSpeed_v2,
    handle_nvmlDeviceGetMinMaxFanSpeed,
    handle_nvmlDeviceGetFanControlPolicy_v2,
    handle_nvmlDeviceSetFanControlPolicy,
    handle_nvmlDeviceGetNumFans,
    handle_nvmlDeviceGetTemperature,
    handle_nvmlDeviceGetTemperatureThreshold,
    handle_nvmlDeviceSetTemperatureThreshold,
    handle_nvmlDeviceGetThermalSettings,
    handle_nvmlDeviceGetPerformanceState,
    handle_nvmlDeviceGetCurrentClocksThrottleReasons,
    handle_nvmlDeviceGetSupportedClocksThrottleReasons,
    handle_nvmlDeviceGetPowerState,
    handle_nvmlDeviceGetPowerManagementMode,
    handle_nvmlDeviceGetPowerManagementLimit,
    handle_nvmlDeviceGetPowerManagementLimitConstraints,
    handle_nvmlDeviceGetPowerManagementDefaultLimit,
    handle_nvmlDeviceGetPowerUsage,
    handle_nvmlDeviceGetTotalEnergyConsumption,
    handle_nvmlDeviceGetEnforcedPowerLimit,
    handle_nvmlDeviceGetGpuOperationMode,
    handle_nvmlDeviceGetMemoryInfo,
    handle_nvmlDeviceGetMemoryInfo_v2,
    handle_nvmlDeviceGetComputeMode,
    handle_nvmlDeviceGetCudaComputeCapability,
    handle_nvmlDeviceGetEccMode,
    handle_nvmlDeviceGetDefaultEccMode,
    handle_nvmlDeviceGetBoardId,
    handle_nvmlDeviceGetMultiGpuBoard,
    handle_nvmlDeviceGetTotalEccErrors,
    handle_nvmlDeviceGetDetailedEccErrors,
    handle_nvmlDeviceGetMemoryErrorCounter,
    handle_nvmlDeviceGetUtilizationRates,
    handle_nvmlDeviceGetEncoderUtilization,
    handle_nvmlDeviceGetEncoderCapacity,
    handle_nvmlDeviceGetEncoderStats,
    handle_nvmlDeviceGetEncoderSessions,
    handle_nvmlDeviceGetDecoderUtilization,
    handle_nvmlDeviceGetFBCStats,
    handle_nvmlDeviceGetFBCSessions,
    handle_nvmlDeviceGetVbiosVersion,
    handle_nvmlDeviceGetBridgeChipInfo,
    handle_nvmlDeviceGetComputeRunningProcesses_v3,
    handle_nvmlDeviceGetGraphicsRunningProcesses_v3,
    handle_nvmlDeviceGetMPSComputeRunningProcesses_v3,
    handle_nvmlDeviceOnSameBoard,
    handle_nvmlDeviceGetAPIRestriction,
    handle_nvmlDeviceGetSamples,
    handle_nvmlDeviceGetBAR1MemoryInfo,
    handle_nvmlDeviceGetViolationStatus,
    handle_nvmlDeviceGetIrqNum,
    handle_nvmlDeviceGetNumGpuCores,
    handle_nvmlDeviceGetPowerSource,
    handle_nvmlDeviceGetMemoryBusWidth,
    handle_nvmlDeviceGetPcieLinkMaxSpeed,
    handle_nvmlDeviceGetPcieSpeed,
    handle_nvmlDeviceGetAdaptiveClockInfoStatus,
    handle_nvmlDeviceGetAccountingMode,
    handle_nvmlDeviceGetAccountingStats,
    handle_nvmlDeviceGetAccountingPids,
    handle_nvmlDeviceGetAccountingBufferSize,
    handle_nvmlDeviceGetRetiredPages,
    handle_nvmlDeviceGetRetiredPages_v2,
    handle_nvmlDeviceGetRetiredPagesPendingStatus,
    handle_nvmlDeviceGetRemappedRows,
    handle_nvmlDeviceGetRowRemapperHistogram,
    handle_nvmlDeviceGetArchitecture,
    handle_nvmlUnitSetLedState,
    handle_nvmlDeviceSetPersistenceMode,
    handle_nvmlDeviceSetComputeMode,
    handle_nvmlDeviceSetEccMode,
    handle_nvmlDeviceClearEccErrorCounts,
    handle_nvmlDeviceSetDriverModel,
    handle_nvmlDeviceSetGpuLockedClocks,
    handle_nvmlDeviceResetGpuLockedClocks,
    handle_nvmlDeviceSetMemoryLockedClocks,
    handle_nvmlDeviceResetMemoryLockedClocks,
    handle_nvmlDeviceSetApplicationsClocks,
    handle_nvmlDeviceGetClkMonStatus,
    handle_nvmlDeviceSetPowerManagementLimit,
    handle_nvmlDeviceSetGpuOperationMode,
    handle_nvmlDeviceSetAPIRestriction,
    handle_nvmlDeviceSetAccountingMode,
    handle_nvmlDeviceClearAccountingPids,
    handle_nvmlDeviceGetNvLinkState,
    handle_nvmlDeviceGetNvLinkVersion,
    handle_nvmlDeviceGetNvLinkCapability,
    handle_nvmlDeviceGetNvLinkRemotePciInfo_v2,
    handle_nvmlDeviceGetNvLinkErrorCounter,
    handle_nvmlDeviceResetNvLinkErrorCounters,
    handle_nvmlDeviceSetNvLinkUtilizationControl,
    handle_nvmlDeviceGetNvLinkUtilizationControl,
    handle_nvmlDeviceGetNvLinkUtilizationCounter,
    handle_nvmlDeviceFreezeNvLinkUtilizationCounter,
    handle_nvmlDeviceResetNvLinkUtilizationCounter,
    handle_nvmlDeviceGetNvLinkRemoteDeviceType,
    handle_nvmlEventSetCreate,
    handle_nvmlDeviceRegisterEvents,
    handle_nvmlDeviceGetSupportedEventTypes,
    handle_nvmlEventSetWait_v2,
    handle_nvmlEventSetFree,
    handle_nvmlDeviceModifyDrainState,
    handle_nvmlDeviceQueryDrainState,
    handle_nvmlDeviceRemoveGpu_v2,
    handle_nvmlDeviceDiscoverGpus,
    handle_nvmlDeviceGetFieldValues,
    handle_nvmlDeviceClearFieldValues,
    handle_nvmlDeviceGetVirtualizationMode,
    handle_nvmlDeviceGetHostVgpuMode,
    handle_nvmlDeviceSetVirtualizationMode,
    handle_nvmlDeviceGetGridLicensableFeatures_v4,
    handle_nvmlDeviceGetProcessUtilization,
    handle_nvmlDeviceGetGspFirmwareVersion,
    handle_nvmlDeviceGetGspFirmwareMode,
    handle_nvmlGetVgpuDriverCapabilities,
    handle_nvmlDeviceGetVgpuCapabilities,
    handle_nvmlDeviceGetSupportedVgpus,
    handle_nvmlDeviceGetCreatableVgpus,
    handle_nvmlVgpuTypeGetClass,
    handle_nvmlVgpuTypeGetName,
    handle_nvmlVgpuTypeGetGpuInstanceProfileId,
    handle_nvmlVgpuTypeGetDeviceID,
    handle_nvmlVgpuTypeGetFramebufferSize,
    handle_nvmlVgpuTypeGetNumDisplayHeads,
    handle_nvmlVgpuTypeGetResolution,
    handle_nvmlVgpuTypeGetLicense,
    handle_nvmlVgpuTypeGetFrameRateLimit,
    handle_nvmlVgpuTypeGetMaxInstances,
    handle_nvmlVgpuTypeGetMaxInstancesPerVm,
    handle_nvmlDeviceGetActiveVgpus,
    handle_nvmlVgpuInstanceGetVmID,
    handle_nvmlVgpuInstanceGetUUID,
    handle_nvmlVgpuInstanceGetVmDriverVersion,
    handle_nvmlVgpuInstanceGetFbUsage,
    handle_nvmlVgpuInstanceGetLicenseStatus,
    handle_nvmlVgpuInstanceGetType,
    handle_nvmlVgpuInstanceGetFrameRateLimit,
    handle_nvmlVgpuInstanceGetEccMode,
    handle_nvmlVgpuInstanceGetEncoderCapacity,
    handle_nvmlVgpuInstanceSetEncoderCapacity,
    handle_nvmlVgpuInstanceGetEncoderStats,
    handle_nvmlVgpuInstanceGetEncoderSessions,
    handle_nvmlVgpuInstanceGetFBCStats,
    handle_nvmlVgpuInstanceGetFBCSessions,
    handle_nvmlVgpuInstanceGetGpuInstanceId,
    handle_nvmlVgpuInstanceGetGpuPciId,
    handle_nvmlVgpuTypeGetCapabilities,
    handle_nvmlVgpuInstanceGetMetadata,
    handle_nvmlDeviceGetVgpuMetadata,
    handle_nvmlGetVgpuCompatibility,
    handle_nvmlDeviceGetPgpuMetadataString,
    handle_nvmlDeviceGetVgpuSchedulerLog,
    handle_nvmlDeviceGetVgpuSchedulerState,
    handle_nvmlDeviceGetVgpuSchedulerCapabilities,
    handle_nvmlGetVgpuVersion,
    handle_nvmlSetVgpuVersion,
    handle_nvmlDeviceGetVgpuUtilization,
    handle_nvmlDeviceGetVgpuProcessUtilization,
    handle_nvmlVgpuInstanceGetAccountingMode,
    handle_nvmlVgpuInstanceGetAccountingPids,
    handle_nvmlVgpuInstanceGetAccountingStats,
    handle_nvmlVgpuInstanceClearAccountingPids,
    handle_nvmlVgpuInstanceGetLicenseInfo_v2,
    handle_nvmlGetExcludedDeviceCount,
    handle_nvmlGetExcludedDeviceInfoByIndex,
    handle_nvmlDeviceSetMigMode,
    handle_nvmlDeviceGetMigMode,
    handle_nvmlDeviceGetGpuInstanceProfileInfo,
    handle_nvmlDeviceGetGpuInstanceProfileInfoV,
    handle_nvmlDeviceGetGpuInstancePossiblePlacements_v2,
    handle_nvmlDeviceGetGpuInstanceRemainingCapacity,
    handle_nvmlDeviceCreateGpuInstance,
    nullptr,
    handle_nvmlGpuInstanceDestroy,
    handle_nvmlDeviceGetGpuInstances,
    handle_nvmlDeviceGetGpuInstanceById,
    handle_nvmlGpuInstanceGetInfo,
    handle_nvmlGpuInstanceGetComputeInstanceProfileInfo,
    handle_nvmlGpuInstanceGetComputeInstanceProfileInfoV,
    handle_nvmlGpuInstanceGetComputeInstanceRemainingCapacity,
    handle_nvmlGpuInstanceGetComputeInstancePossiblePlacements,
    handle_nvmlGpuInstanceCreateComputeInstance,
    nullptr,
    handle_nvmlComputeInstanceDestroy,
    handle_nvmlGpuInstanceGetComputeInstances,
    handle_nvmlGpuInstanceGetComputeInstanceById,
    handle_nvmlComputeInstanceGetInfo_v2,
    handle_nvmlDeviceIsMigDeviceHandle,
    handle_nvmlDeviceGetGpuInstanceId,
    handle_nvmlDeviceGetComputeInstanceId,
    handle_nvmlDeviceGetMaxMigDeviceCount,
    handle_nvmlDeviceGetMigDeviceHandleByIndex,
    handle_nvmlDeviceGetDeviceHandleFromMigDeviceHandle,
    handle_nvmlDeviceGetBusType,
    handle_nvmlDeviceGetDynamicPstatesInfo,
    handle_nvmlDeviceSetFanSpeed_v2,
    handle_nvmlDeviceGetGpcClkVfOffset,
    handle_nvmlDeviceSetGpcClkVfOffset,
    handle_nvmlDeviceGetMemClkVfOffset,
    handle_nvmlDeviceSetMemClkVfOffset,
    handle_nvmlDeviceGetMinMaxClockOfPState,
    handle_nvmlDeviceGetSupportedPerformanceStates,
    handle_nvmlDeviceGetGpcClkMinMaxVfOffset,
    handle_nvmlDeviceGetMemClkMinMaxVfOffset,
    handle_nvmlDeviceGetGpuFabricInfo,
    handle_nvmlGpmMetricsGet,
    handle_nvmlGpmSampleFree,
    handle_nvmlGpmSampleAlloc,
    handle_nvmlGpmSampleGet,
    handle_nvmlGpmMigSampleGet,
    handle_nvmlGpmQueryDeviceSupport,
    nullptr,
    nullptr,
    handle_nvmlDeviceSetNvLinkDeviceLowPowerThreshold,
    nullptr,
    nullptr,
    handle_cuInit,
    handle_cuDriverGetVersion,
    handle_cuDeviceGet,
    handle_cuDeviceGetCount,
    handle_cuDeviceGetName,
    handle_cuDeviceGetUuid,
    handle_cuDeviceGetUuid_v2,
    handle_cuDeviceGetLuid,
    handle_cuDeviceTotalMem_v2,
    handle_cuDeviceGetTexture1DLinearMaxWidth,
    handle_cuDeviceGetAttribute,
    nullptr,
    handle_cuDeviceSetMemPool,
    handle_cuDeviceGetMemPool,
    handle_cuDeviceGetDefaultMemPool,
    handle_cuDeviceGetExecAffinitySupport,
    handle_cuFlushGPUDirectRDMAWrites,
    handle_cuDeviceGetProperties,
    handle_cuDeviceComputeCapability,
    handle_cuDevicePrimaryCtxRetain,
    handle_cuDevicePrimaryCtxRelease_v2,
    handle_cuDevicePrimaryCtxSetFlags_v2,
    handle_cuDevicePrimaryCtxGetState,
    handle_cuDevicePrimaryCtxReset_v2,
    handle_cuCtxCreate_v2,
    handle_cuCtxCreate_v3,
    handle_cuCtxDestroy_v2,
    handle_cuCtxPushCurrent_v2,
    handle_cuCtxPopCurrent_v2,
    handle_cuCtxSetCurrent,
    handle_cuCtxGetCurrent,
    handle_cuCtxGetDevice,
    handle_cuCtxGetFlags,
    handle_cuCtxGetId,
    handle_cuCtxSynchronize,
    handle_cuCtxSetLimit,
    handle_cuCtxGetLimit,
    handle_cuCtxGetCacheConfig,
    handle_cuCtxSetCacheConfig,
    handle_cuCtxGetSharedMemConfig,
    handle_cuCtxSetSharedMemConfig,
    handle_cuCtxGetApiVersion,
    handle_cuCtxGetStreamPriorityRange,
    handle_cuCtxResetPersistingL2Cache,
    handle_cuCtxGetExecAffinity,
    handle_cuCtxAttach,
    handle_cuCtxDetach,
    handle_cuModuleLoad,
    nullptr,
    nullptr,
    nullptr,
    handle_cuModuleUnload,
    handle_cuModuleGetLoadingMode,
    handle_cuModuleGetFunction,
    handle_cuModuleGetGlobal_v2,
    handle_cuLinkCreate_v2,
    handle_cuLinkAddFile_v2,
    handle_cuLinkComplete,
    handle_cuLinkDestroy,
    handle_cuModuleGetTexRef,
    handle_cuModuleGetSurfRef,
    nullptr,
    handle_cuLibraryLoadFromFile,
    handle_cuLibraryUnload,
    handle_cuLibraryGetKernel,
    handle_cuLibraryGetModule,
    handle_cuKernelGetFunction,
    handle_cuLibraryGetGlobal,
    handle_cuLibraryGetManaged,
    handle_cuLibraryGetUnifiedFunction,
    handle_cuKernelGetAttribute,
    handle_cuKernelSetAttribute,
    handle_cuKernelSetCacheConfig,
    handle_cuMemGetInfo_v2,
    handle_cuMemAlloc_v2,
    handle_cuMemAllocPitch_v2,
    handle_cuMemFree_v2,
    handle_cuMemGetAddressRange_v2,
    handle_cuMemAllocHost_v2,
    handle_cuMemFreeHost,
    handle_cuMemHostAlloc,
    handle_cuMemHostGetDevicePointer_v2,
    handle_cuMemHostGetFlags,
    handle_cuMemAllocManaged,
    handle_cuDeviceGetByPCIBusId,
    handle_cuDeviceGetPCIBusId,
    handle_cuIpcGetEventHandle,
    handle_cuIpcOpenEventHandle,
    handle_cuIpcGetMemHandle,
    handle_cuIpcOpenMemHandle_v2,
    handle_cuIpcCloseMemHandle,
    handle_cuMemcpy,
    handle_cuMemcpyPeer,
    handle_cuMemcpyHtoD_v2,
    handle_cuMemcpyDtoD_v2,
    handle_cuMemcpyDtoA_v2,
    handle_cuMemcpyAtoD_v2,
    nullptr,
    handle_cuMemcpyAtoH_v2,
    handle_cuMemcpyAtoA_v2,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    handle_cuMemcpyAsync,
    handle_cuMemcpyPeerAsync,
    handle_cuMemcpyHtoDAsync_v2,
    handle_cuMemcpyDtoDAsync_v2,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    handle_cuMemsetD8_v2,
    handle_cuMemsetD16_v2,
    handle_cuMemsetD32_v2,
    handle_cuMemsetD2D8_v2,
    handle_cuMemsetD2D16_v2,
    handle_cuMemsetD2D32_v2,
    handle_cuMemsetD8Async,
    handle_cuMemsetD16Async,
    handle_cuMemsetD32Async,
    handle_cuMemsetD2D8Async,
    handle_cuMemsetD2D16Async,
    handle_cuMemsetD2D32Async,
    handle_cuArrayCreate_v2,
    handle_cuArrayGetDescriptor_v2,
    handle_cuArrayGetSparseProperties,
    handle_cuMipmappedArrayGetSparseProperties,
    handle_cuArrayGetMemoryRequirements,
    handle_cuMipmappedArrayGetMemoryRequirements,
    handle_cuArrayGetPlane,
    handle_cuArrayDestroy,
    handle_cuArray3DCreate_v2,
    handle_cuArray3DGetDescriptor_v2,
    handle_cuMipmappedArrayCreate,
    handle_cuMipmappedArrayGetLevel,
    handle_cuMipmappedArrayDestroy,
    handle_cuMemAddressReserve,
    handle_cuMemAddressFree,
    handle_cuMemCreate,
    handle_cuMemRelease,
    handle_cuMemMap,
    handle_cuMemMapArrayAsync,
    handle_cuMemUnmap,
    handle_cuMemSetAccess,
    handle_cuMemGetAccess,
    handle_cuMemGetAllocationGranularity,
    handle_cuMemGetAllocationPropertiesFromHandle,
    handle_cuMemFreeAsync,
    handle_cuMemAllocAsync,
    handle_cuMemPoolTrimTo,
    handle_cuMemPoolSetAccess,
    handle_cuMemPoolGetAccess,
    handle_cuMemPoolCreate,
    handle_cuMemPoolDestroy,
    handle_cuMemAllocFromPoolAsync,
    handle_cuMemPoolExportPointer,
    handle_cuMemPoolImportPointer,
    handle_cuMemPrefetchAsync,
    handle_cuMemAdvise,
    handle_cuMemRangeGetAttributes,
    handle_cuPointerSetAttribute,
    handle_cuPointerGetAttributes,
    handle_cuStreamCreate,
    handle_cuStreamCreateWithPriority,
    handle_cuStreamGetPriority,
    handle_cuStreamGetFlags,
    handle_cuStreamGetId,
    handle_cuStreamGetCtx,
    handle_cuStreamWaitEvent,
    handle_cuStreamBeginCapture_v2,
    handle_cuThreadExchangeStreamCaptureMode,
    handle_cuStreamEndCapture,
    handle_cuStreamIsCapturing,
    nullptr,
    handle_cuStreamUpdateCaptureDependencies,
    handle_cuStreamAttachMemAsync,
    handle_cuStreamQuery,
    handle_cuStreamSynchronize,
    handle_cuStreamDestroy_v2,
    handle_cuStreamCopyAttributes,
    handle_cuStreamGetAttribute,
    handle_cuStreamSetAttribute,
    handle_cuEventCreate,
    handle_cuEventRecord,
    handle_cuEventRecordWithFlags,
    handle_cuEventQuery,
    handle_cuEventSynchronize,
    handle_cuEventDestroy_v2,
    handle_cuEventElapsedTime,
    handle_cuImportExternalMemory,
    handle_cuExternalMemoryGetMappedBuffer,
    handle_cuExternalMemoryGetMappedMipmappedArray,
    handle_cuDestroyExternalMemory,
    handle_cuImportExternalSemaphore,
    handle_cuSignalExternalSemaphoresAsync,
    handle_cuWaitExternalSemaphoresAsync,
    handle_cuDestroyExternalSemaphore,
    handle_cuStreamWaitValue32_v2,
    handle_cuStreamWaitValue64_v2,
    handle_cuStreamWriteValue32_v2,
    handle_cuStreamWriteValue64_v2,
    handle_cuStreamBatchMemOp_v2,
    handle_cuFuncGetAttribute,
    handle_cuFuncSetAttribute,
    handle_cuFuncSetCacheConfig,
    handle_cuFuncSetSharedMemConfig,
    handle_cuFuncGetModule,
    handle_cuLaunchKernel,
    nullptr,
    handle_cuLaunchCooperativeKernel,
    handle_cuLaunchCooperativeKernelMultiDevice,
    handle_cuFuncSetBlockShape,
    handle_cuFuncSetSharedSize,
    handle_cuParamSetSize,
    handle_cuParamSeti,
    handle_cuParamSetf,
    handle_cuLaunch,
    handle_cuLaunchGrid,
    handle_cuLaunchGridAsync,
    handle_cuParamSetTexRef,
    handle_cuGraphCreate,
    handle_cuGraphAddKernelNode_v2,
    handle_cuGraphKernelNodeGetParams_v2,
    handle_cuGraphKernelNodeSetParams_v2,
    handle_cuGraphAddMemcpyNode,
    handle_cuGraphMemcpyNodeGetParams,
    handle_cuGraphMemcpyNodeSetParams,
    handle_cuGraphAddMemsetNode,
    handle_cuGraphMemsetNodeGetParams,
    handle_cuGraphMemsetNodeSetParams,
    handle_cuGraphAddHostNode,
    handle_cuGraphHostNodeGetParams,
    handle_cuGraphHostNodeSetParams,
    handle_cuGraphAddChildGraphNode,
    handle_cuGraphChildGraphNodeGetGraph,
    handle_cuGraphAddEmptyNode,
    handle_cuGraphAddEventRecordNode,
    handle_cuGraphEventRecordNodeGetEvent,
    handle_cuGraphEventRecordNodeSetEvent,
    handle_cuGraphAddEventWaitNode,
    handle_cuGraphEventWaitNodeGetEvent,
    handle_cuGraphEventWaitNodeSetEvent,
    handle_cuGraphAddExternalSemaphoresSignalNode,
    handle_cuGraphExternalSemaphoresSignalNodeGetParams,
    handle_cuGraphExternalSemaphoresSignalNodeSetParams,
    handle_cuGraphAddExternalSemaphoresWaitNode,
    handle_cuGraphExternalSemaphoresWaitNodeGetParams,
    handle_cuGraphExternalSemaphoresWaitNodeSetParams,
    handle_cuGraphAddBatchMemOpNode,
    handle_cuGraphBatchMemOpNodeGetParams,
    handle_cuGraphBatchMemOpNodeSetParams,
    handle_cuGraphExecBatchMemOpNodeSetParams,
    handle_cuGraphAddMemAllocNode,
    handle_cuGraphMemAllocNodeGetParams,
    handle_cuGraphAddMemFreeNode,
    handle_cuGraphMemFreeNodeGetParams,
    handle_cuDeviceGraphMemTrim,
    handle_cuGraphClone,
    handle_cuGraphNodeFindInClone,
    handle_cuGraphNodeGetType,
    handle_cuGraphGetNodes,
    handle_cuGraphGetRootNodes,
    handle_cuGraphGetEdges,
    handle_cuGraphNodeGetDependencies,
    handle_cuGraphNodeGetDependentNodes,
    handle_cuGraphAddDependencies,
    handle_cuGraphRemoveDependencies,
    handle_cuGraphDestroyNode,
    handle_cuGraphInstantiateWithFlags,
    handle_cuGraphInstantiateWithParams,
    handle_cuGraphExecGetFlags,
    handle_cuGraphExecKernelNodeSetParams_v2,
    handle_cuGraphExecMemcpyNodeSetParams,
    handle_cuGraphExecMemsetNodeSetParams,
    handle_cuGraphExecHostNodeSetParams,
    handle_cuGraphExecChildGraphNodeSetParams,
    handle_cuGraphExecEventRecordNodeSetEvent,
    handle_cuGraphExecEventWaitNodeSetEvent,
    handle_cuGraphExecExternalSemaphoresSignalNodeSetParams,
    handle_cuGraphExecExternalSemaphoresWaitNodeSetParams,
    handle_cuGraphNodeSetEnabled,
    handle_cuGraphNodeGetEnabled,
    handle_cuGraphUpload,
    handle_cuGraphLaunch,
    handle_cuGraphExecDestroy,
    handle_cuGraphDestroy,
    handle_cuGraphExecUpdate_v2,
    handle_cuGraphKernelNodeCopyAttributes,
    handle_cuGraphKernelNodeGetAttribute,
    handle_cuGraphKernelNodeSetAttribute,
    handle_cuGraphDebugDotPrint,
    handle_cuUserObjectRetain,
    handle_cuUserObjectRelease,
    handle_cuGraphRetainUserObject,
    handle_cuGraphReleaseUserObject,
    handle_cuOccupancyMaxActiveBlocksPerMultiprocessor,
    handle_cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags,
    nullptr,
    nullptr,
    handle_cuOccupancyAvailableDynamicSMemPerBlock,
    handle_cuOccupancyMaxPotentialClusterSize,
    handle_cuOccupancyMaxActiveClusters,
    handle_cuTexRefSetArray,
    handle_cuTexRefSetMipmappedArray,
    handle_cuTexRefSetAddress_v2,
    handle_cuTexRefSetAddress2D_v3,
    handle_cuTexRefSetFormat,
    handle_cuTexRefSetAddressMode,
    handle_cuTexRefSetFilterMode,
    handle_cuTexRefSetMipmapFilterMode,
    handle_cuTexRefSetMipmapLevelBias,
    handle_cuTexRefSetMipmapLevelClamp,
    handle_cuTexRefSetMaxAnisotropy,
    handle_cuTexRefSetBorderColor,
    handle_cuTexRefSetFlags,
    handle_cuTexRefGetAddress_v2,
    handle_cuTexRefGetArray,
    handle_cuTexRefGetMipmappedArray,
    handle_cuTexRefGetAddressMode,
    handle_cuTexRefGetFilterMode,
    handle_cuTexRefGetFormat,
    handle_cuTexRefGetMipmapFilterMode,
    handle_cuTexRefGetMipmapLevelBias,
    handle_cuTexRefGetMipmapLevelClamp,
    handle_cuTexRefGetMaxAnisotropy,
    handle_cuTexRefGetBorderColor,
    handle_cuTexRefGetFlags,
    handle_cuTexRefCreate,
    handle_cuTexRefDestroy,
    handle_cuSurfRefSetArray,
    handle_cuSurfRefGetArray,
    handle_cuTexObjectCreate,
    handle_cuTexObjectDestroy,
    handle_cuTexObjectGetResourceDesc,
    handle_cuTexObjectGetTextureDesc,
    handle_cuTexObjectGetResourceViewDesc,
    handle_cuSurfObjectCreate,
    handle_cuSurfObjectDestroy,
    handle_cuSurfObjectGetResourceDesc,
    handle_cuDeviceCanAccessPeer,
    handle_cuCtxEnablePeerAccess,
    handle_cuCtxDisablePeerAccess,
    handle_cuDeviceGetP2PAttribute,
    handle_cuGraphicsUnregisterResource,
    handle_cuGraphicsSubResourceGetMappedArray,
    handle_cuGraphicsResourceGetMappedMipmappedArray,
    handle_cuGraphicsResourceGetMappedPointer_v2,
    handle_cuGraphicsResourceSetMapFlags_v2,
    handle_cuGraphicsMapResources,
    handle_cuGraphicsUnmapResources,
    nullptr,
    nullptr,
    handle_cudaDeviceReset,
    handle_cudaDeviceSynchronize,
    handle_cudaDeviceSetLimit,
    handle_cudaDeviceGetLimit,
    handle_cudaDeviceGetTexture1DLinearMaxWidth,
    handle_cudaDeviceGetCacheConfig,
    handle_cudaDeviceGetStreamPriorityRange,
    handle_cudaDeviceSetCacheConfig,
    handle_cudaDeviceGetSharedMemConfig,
    handle_cudaDeviceSetSharedMemConfig,
    handle_cudaDeviceGetByPCIBusId,
    handle_cudaDeviceGetPCIBusId,
    handle_cudaIpcGetEventHandle,
    handle_cudaIpcOpenEventHandle,
    handle_cudaIpcOpenMemHandle,
    handle_cudaDeviceFlushGPUDirectRDMAWrites,
    handle_cudaThreadExit,
    handle_cudaThreadSynchronize,
    handle_cudaThreadSetLimit,
    handle_cudaThreadGetLimit,
    handle_cudaThreadGetCacheConfig,
    handle_cudaThreadSetCacheConfig,
    handle_cudaGetLastError,
    handle_cudaPeekAtLastError,
    nullptr,
    nullptr,
    handle_cudaGetDeviceCount,
    handle_cudaGetDeviceProperties_v2,
    handle_cudaDeviceGetAttribute,
    handle_cudaDeviceGetDefaultMemPool,
    handle_cudaDeviceSetMemPool,
    handle_cudaDeviceGetMemPool,
    handle_cudaDeviceGetP2PAttribute,
    handle_cudaChooseDevice,
    handle_cudaInitDevice,
    handle_cudaSetDevice,
    handle_cudaGetDevice,
    handle_cudaSetValidDevices,
    handle_cudaSetDeviceFlags,
    handle_cudaGetDeviceFlags,
    handle_cudaStreamCreate,
    handle_cudaStreamCreateWithFlags,
    handle_cudaStreamCreateWithPriority,
    handle_cudaStreamGetPriority,
    handle_cudaStreamGetFlags,
    handle_cudaStreamGetId,
    handle_cudaCtxResetPersistingL2Cache,
    handle_cudaStreamCopyAttributes,
    handle_cudaStreamGetAttribute,
    handle_cudaStreamSetAttribute,
    handle_cudaStreamDestroy,
    handle_cudaStreamWaitEvent,
    handle_cudaStreamSynchronize,
    handle_cudaStreamQuery,
    handle_cudaStreamBeginCapture,
    handle_cudaThreadExchangeStreamCaptureMode,
    handle_cudaStreamEndCapture,
    handle_cudaStreamIsCapturing,
    handle_cudaStreamGetCaptureInfo_v2,
    handle_cudaStreamUpdateCaptureDependencies,
    handle_cudaEventCreate,
    handle_cudaEventCreateWithFlags,
    handle_cudaEventRecord,
    handle_cudaEventRecordWithFlags,
    handle_cudaEventQuery,
    handle_cudaEventSynchronize,
    handle_cudaEventDestroy,
    handle_cudaEventElapsedTime,
    nullptr,
    handle_cudaExternalMemoryGetMappedBuffer,
    handle_cudaExternalMemoryGetMappedMipmappedArray,
    handle_cudaDestroyExternalMemory,
    handle_cudaImportExternalSemaphore,
    handle_cudaSignalExternalSemaphoresAsync_v2,
    handle_cudaWaitExternalSemaphoresAsync_v2,
    handle_cudaDestroyExternalSemaphore,
    handle_cudaLaunchKernel,
    handle_cudaLaunchKernelExC,
    handle_cudaLaunchCooperativeKernel,
    handle_cudaLaunchCooperativeKernelMultiDevice,
    handle_cudaFuncSetCacheConfig,
    handle_cudaFuncSetSharedMemConfig,
    handle_cudaFuncGetAttributes,
    handle_cudaFuncSetAttribute,
    handle_cudaSetDoubleForDevice,
    handle_cudaSetDoubleForHost,
    handle_cudaOccupancyMaxActiveBlocksPerMultiprocessor,
    handle_cudaOccupancyAvailableDynamicSMemPerBlock,
    handle_cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags,
    handle_cudaOccupancyMaxPotentialClusterSize,
    handle_cudaOccupancyMaxActiveClusters,
    handle_cudaMallocManaged,
    handle_cudaMalloc,
    handle_cudaMallocHost,
    handle_cudaMallocPitch,
    handle_cudaMallocArray,
    handle_cudaFree,
    handle_cudaFreeHost,
    handle_cudaFreeArray,
    handle_cudaFreeMipmappedArray,
    handle_cudaHostAlloc,
    handle_cudaMalloc3D,
    handle_cudaMalloc3DArray,
    handle_cudaMallocMipmappedArray,
    handle_cudaGetMipmappedArrayLevel,
    handle_cudaMemcpy3D,
    handle_cudaMemcpy3DPeer,
    handle_cudaMemcpy3DAsync,
    handle_cudaMemcpy3DPeerAsync,
    handle_cudaMemGetInfo,
    handle_cudaArrayGetInfo,
    handle_cudaArrayGetPlane,
    handle_cudaArrayGetMemoryRequirements,
    handle_cudaMipmappedArrayGetMemoryRequirements,
    handle_cudaArrayGetSparseProperties,
    handle_cudaMipmappedArrayGetSparseProperties,
    handle_cudaMemcpy,
    handle_cudaMemcpy2DToArray,
    handle_cudaMemcpy2DArrayToArray,
    handle_cudaMemcpyToSymbol,
    handle_cudaMemcpyAsync,
    handle_cudaMemcpy2DToArrayAsync,
    handle_cudaMemcpyToSymbolAsync,
    handle_cudaMemset,
    handle_cudaMemset2D,
    handle_cudaMemset3D,
    handle_cudaMemsetAsync,
    handle_cudaMemset2DAsync,
    handle_cudaMemset3DAsync,
    handle_cudaGetSymbolAddress,
    handle_cudaGetSymbolSize,
    handle_cudaMemPrefetchAsync,
    handle_cudaMemAdvise,
    handle_cudaMemRangeGetAttributes,
    handle_cudaMemcpyToArray,
    handle_cudaMemcpyArrayToArray,
    handle_cudaMemcpyToArrayAsync,
    handle_cudaMallocAsync,
    handle_cudaMemPoolTrimTo,
    handle_cudaMemPoolSetAccess,
    handle_cudaMemPoolGetAccess,
    handle_cudaMemPoolCreate,
    handle_cudaMemPoolDestroy,
    handle_cudaMallocFromPoolAsync,
    handle_cudaMemPoolImportPointer,
    handle_cudaPointerGetAttributes,
    handle_cudaDeviceCanAccessPeer,
    handle_cudaDeviceEnablePeerAccess,
    handle_cudaDeviceDisablePeerAccess,
    handle_cudaGraphicsUnregisterResource,
    handle_cudaGraphicsResourceSetMapFlags,
    handle_cudaGraphicsMapResources,
    handle_cudaGraphicsUnmapResources,
    handle_cudaGraphicsResourceGetMappedPointer,
    handle_cudaGraphicsSubResourceGetMappedArray,
    handle_cudaGraphicsResourceGetMappedMipmappedArray,
    handle_cudaGetChannelDesc,
    nullptr,
    handle_cudaCreateTextureObject,
    handle_cudaDestroyTextureObject,
    handle_cudaGetTextureObjectResourceDesc,
    handle_cudaGetTextureObjectTextureDesc,
    handle_cudaGetTextureObjectResourceViewDesc,
    handle_cudaCreateSurfaceObject,
    handle_cudaDestroySurfaceObject,
    handle_cudaGetSurfaceObjectResourceDesc,
    handle_cudaDriverGetVersion,
    handle_cudaRuntimeGetVersion,
    handle_cudaGraphCreate,
    handle_cudaGraphAddKernelNode,
    handle_cudaGraphKernelNodeGetParams,
    handle_cudaGraphKernelNodeSetParams,
    handle_cudaGraphKernelNodeCopyAttributes,
    handle_cudaGraphKernelNodeGetAttribute,
    handle_cudaGraphKernelNodeSetAttribute,
    handle_cudaGraphAddMemcpyNode,
    handle_cudaGraphAddMemcpyNodeToSymbol,
    handle_cudaGraphMemcpyNodeGetParams,
    handle_cudaGraphMemcpyNodeSetParams,
    handle_cudaGraphMemcpyNodeSetParamsToSymbol,
    handle_cudaGraphAddMemsetNode,
    handle_cudaGraphMemsetNodeGetParams,
    handle_cudaGraphMemsetNodeSetParams,
    handle_cudaGraphAddHostNode,
    handle_cudaGraphHostNodeGetParams,
    handle_cudaGraphHostNodeSetParams,
    handle_cudaGraphAddChildGraphNode,
    handle_cudaGraphChildGraphNodeGetGraph,
    handle_cudaGraphAddEmptyNode,
    handle_cudaGraphAddEventRecordNode,
    handle_cudaGraphEventRecordNodeGetEvent,
    handle_cudaGraphEventRecordNodeSetEvent,
    handle_cudaGraphAddEventWaitNode,
    handle_cudaGraphEventWaitNodeGetEvent,
    handle_cudaGraphEventWaitNodeSetEvent,
    handle_cudaGraphAddExternalSemaphoresSignalNode,
    handle_cudaGraphExternalSemaphoresSignalNodeGetParams,
    handle_cudaGraphExternalSemaphoresSignalNodeSetParams,
    handle_cudaGraphAddExternalSemaphoresWaitNode,
    handle_cudaGraphExternalSemaphoresWaitNodeGetParams,
    handle_cudaGraphExternalSemaphoresWaitNodeSetParams,
    handle_cudaGraphAddMemAllocNode,
    handle_cudaGraphMemAllocNodeGetParams,
    handle_cudaDeviceGraphMemTrim,
    handle_cudaGraphClone,
    handle_cudaGraphNodeFindInClone,
    handle_cudaGraphNodeGetType,
    handle_cudaGraphGetNodes,
    handle_cudaGraphGetRootNodes,
    handle_cudaGraphGetEdges,
    handle_cudaGraphNodeGetDependencies,
    handle_cudaGraphNodeGetDependentNodes,
    handle_cudaGraphAddDependencies,
    handle_cudaGraphRemoveDependencies,
    handle_cudaGraphDestroyNode,
    handle_cudaGraphInstantiate,
    handle_cudaGraphInstantiateWithFlags,
    handle_cudaGraphInstantiateWithParams,
    handle_cudaGraphExecGetFlags,
    handle_cudaGraphExecKernelNodeSetParams,
    handle_cudaGraphExecMemcpyNodeSetParams,
    handle_cudaGraphExecMemcpyNodeSetParamsToSymbol,
    handle_cudaGraphExecMemsetNodeSetParams,
    handle_cudaGraphExecHostNodeSetParams,
    handle_cudaGraphExecChildGraphNodeSetParams,
    handle_cudaGraphExecEventRecordNodeSetEvent,
    handle_cudaGraphExecEventWaitNodeSetEvent,
    handle_cudaGraphExecExternalSemaphoresSignalNodeSetParams,
    handle_cudaGraphExecExternalSemaphoresWaitNodeSetParams,
    handle_cudaGraphNodeSetEnabled,
    handle_cudaGraphNodeGetEnabled,
    handle_cudaGraphExecUpdate,
    handle_cudaGraphUpload,
    handle_cudaGraphLaunch,
    handle_cudaGraphExecDestroy,
    handle_cudaGraphDestroy,
    handle_cudaGraphDebugDotPrint,
    handle_cudaUserObjectRetain,
    handle_cudaUserObjectRelease,
    handle_cudaGraphRetainUserObject,
    handle_cudaGraphReleaseUserObject,
    handle_cudaGetDriverEntryPoint,
    handle_cudaGetExportTable,
    handle_cudaGetFuncBySymbol,
    handle_cublasCreate_v2,
    handle_cublasDestroy_v2,
    handle_cublasGetVersion_v2,
    handle_cublasGetProperty,
    nullptr,
    handle_cublasSetStream_v2,
    handle_cublasGetStream_v2,
    handle_cublasGetPointerMode_v2,
    handle_cublasSetPointerMode_v2,
    handle_cublasGetAtomicsMode,
    handle_cublasSetAtomicsMode,
    handle_cublasGetMathMode,
    handle_cublasSetMathMode,
    handle_cublasGetSmCountTarget,
    handle_cublasSetSmCountTarget,
    nullptr,
    nullptr,
    handle_cublasLoggerConfigure,
    handle_cublasSetLoggerCallback,
    handle_cublasGetLoggerCallback,
    nullptr,
    handle_cublasSnrm2_v2,
    handle_cublasSnrm2_v2_64,
    handle_cublasDnrm2_v2,
    handle_cublasDnrm2_v2_64,
    handle_cublasScnrm2_v2,
    handle_cublasScnrm2_v2_64,
    handle_cublasDznrm2_v2,
    handle_cublasDznrm2_v2_64,
    handle_cublasSdot_v2,
    handle_cublasSdot_v2_64,
    handle_cublasDdot_v2,
    handle_cublasDdot_v2_64,
    handle_cublasCdotu_v2,
    handle_cublasCdotu_v2_64,
    handle_cublasCdotc_v2,
    handle_cublasCdotc_v2_64,
    handle_cublasZdotu_v2,
    handle_cublasZdotu_v2_64,
    handle_cublasZdotc_v2,
    handle_cublasZdotc_v2_64,
    handle_cublasSscal_v2,
    handle_cublasSscal_v2_64,
    handle_cublasDscal_v2,
    handle_cublasDscal_v2_64,
    handle_cublasCscal_v2,
    handle_cublasCscal_v2_64,
    handle_cublasCsscal_v2,
    handle_cublasCsscal_v2_64,
    handle_cublasZscal_v2,
    handle_cublasZscal_v2_64,
    handle_cublasZdscal_v2,
    handle_cublasZdscal_v2_64,
    handle_cublasSaxpy_v2,
    handle_cublasSaxpy_v2_64,
    handle_cublasDaxpy_v2,
    handle_cublasDaxpy_v2_64,
    handle_cublasCaxpy_v2,
    handle_cublasCaxpy_v2_64,
    handle_cublasZaxpy_v2,
    handle_cublasZaxpy_v2_64,
    handle_cublasScopy_v2,
    handle_cublasScopy_v2_64,
    handle_cublasDcopy_v2,
    handle_cublasDcopy_v2_64,
    handle_cublasCcopy_v2,
    handle_cublasCcopy_v2_64,
    handle_cublasZcopy_v2,
    handle_cublasZcopy_v2_64,
    handle_cublasSswap_v2,
    handle_cublasSswap_v2_64,
    handle_cublasDswap_v2,
    handle_cublasDswap_v2_64,
    handle_cublasCswap_v2,
    handle_cublasCswap_v2_64,
    handle_cublasZswap_v2,
    handle_cublasZswap_v2_64,
    handle_cublasIsamax_v2,
    handle_cublasIsamax_v2_64,
    handle_cublasIdamax_v2,
    handle_cublasIdamax_v2_64,
    handle_cublasIcamax_v2,
    handle_cublasIcamax_v2_64,
    handle_cublasIzamax_v2,
    handle_cublasIzamax_v2_64,
    handle_cublasIamaxEx,
    handle_cublasIamaxEx_64,
    handle_cublasIsamin_v2,
    handle_cublasIsamin_v2_64,
    handle_cublasIdamin_v2,
    handle_cublasIdamin_v2_64,
    handle_cublasIcamin_v2,
    handle_cublasIcamin_v2_64,
    handle_cublasIzamin_v2,
    handle_cublasIzamin_v2_64,
    handle_cublasIaminEx,
    handle_cublasIaminEx_64,
    handle_cublasSasum_v2,
    handle_cublasSasum_v2_64,
    handle_cublasDasum_v2,
    handle_cublasDasum_v2_64,
    handle_cublasScasum_v2,
    handle_cublasScasum_v2_64,
    handle_cublasDzasum_v2,
    handle_cublasDzasum_v2_64,
    handle_cublasSrot_v2,
    handle_cublasSrot_v2_64,
    handle_cublasDrot_v2,
    handle_cublasDrot_v2_64,
    handle_cublasCrot_v2,
    handle_cublasCrot_v2_64,
    handle_cublasCsrot_v2,
    handle_cublasCsrot_v2_64,
    handle_cublasZrot_v2,
    handle_cublasZrot_v2_64,
    handle_cublasZdrot_v2,
    handle_cublasZdrot_v2_64,
    handle_cublasSrotg_v2,
    handle_cublasDrotg_v2,
    handle_cublasCrotg_v2,
    handle_cublasZrotg_v2,
    handle_cublasSrotm_v2,
    handle_cublasSrotm_v2_64,
    handle_cublasDrotm_v2,
    handle_cublasDrotm_v2_64,
    handle_cublasSrotmg_v2,
    handle_cublasDrotmg_v2,
    handle_cublasSgemv_v2,
    handle_cublasSgemv_v2_64,
    handle_cublasDgemv_v2,
    handle_cublasDgemv_v2_64,
    handle_cublasCgemv_v2,
    handle_cublasCgemv_v2_64,
    handle_cublasZgemv_v2,
    handle_cublasZgemv_v2_64,
    handle_cublasSgbmv_v2,
    handle_cublasSgbmv_v2_64,
    handle_cublasDgbmv_v2,
    handle_cublasDgbmv_v2_64,
    handle_cublasCgbmv_v2,
    handle_cublasCgbmv_v2_64,
    handle_cublasZgbmv_v2,
    handle_cublasZgbmv_v2_64,
    handle_cublasStrmv_v2,
    handle_cublasStrmv_v2_64,
    handle_cublasDtrmv_v2,
    handle_cublasDtrmv_v2_64,
    handle_cublasCtrmv_v2,
    handle_cublasCtrmv_v2_64,
    handle_cublasZtrmv_v2,
    handle_cublasZtrmv_v2_64,
    handle_cublasStbmv_v2,
    handle_cublasStbmv_v2_64,
    handle_cublasDtbmv_v2,
    handle_cublasDtbmv_v2_64,
    handle_cublasCtbmv_v2,
    handle_cublasCtbmv_v2_64,
    handle_cublasZtbmv_v2,
    handle_cublasZtbmv_v2_64,
    handle_cublasStpmv_v2,
    handle_cublasStpmv_v2_64,
    handle_cublasDtpmv_v2,
    handle_cublasDtpmv_v2_64,
    handle_cublasCtpmv_v2,
    handle_cublasCtpmv_v2_64,
    handle_cublasZtpmv_v2,
    handle_cublasZtpmv_v2_64,
    handle_cublasStrsv_v2,
    handle_cublasStrsv_v2_64,
    handle_cublasDtrsv_v2,
    handle_cublasDtrsv_v2_64,
    handle_cublasCtrsv_v2,
    handle_cublasCtrsv_v2_64,
    handle_cublasZtrsv_v2,
    handle_cublasZtrsv_v2_64,
    handle_cublasStpsv_v2,
    handle_cublasStpsv_v2_64,
    handle_cublasDtpsv_v2,
    handle_cublasDtpsv_v2_64,
    handle_cublasCtpsv_v2,
    handle_cublasCtpsv_v2_64,
    handle_cublasZtpsv_v2,
    handle_cublasZtpsv_v2_64,
    handle_cublasStbsv_v2,
    handle_cublasStbsv_v2_64,
    handle_cublasDtbsv_v2,
    handle_cublasDtbsv_v2_64,
    handle_cublasCtbsv_v2,
    handle_cublasCtbsv_v2_64,
    handle_cublasZtbsv_v2,
    handle_cublasZtbsv_v2_64,
    handle_cublasSsymv_v2,
    handle_cublasSsymv_v2_64,
    handle_cublasDsymv_v2,
    handle_cublasDsymv_v2_64,
    handle_cublasCsymv_v2,
    handle_cublasCsymv_v2_64,
    handle_cublasZsymv_v2,
    handle_cublasZsymv_v2_64,
    handle_cublasChemv_v2,
    handle_cublasChemv_v2_64,
    handle_cublasZhemv_v2,
    handle_cublasZhemv_v2_64,
    handle_cublasSsbmv_v2,
    handle_cublasSsbmv_v2_64,
    handle_cublasDsbmv_v2,
    handle_cublasDsbmv_v2_64,
    handle_cublasChbmv_v2,
    handle_cublasChbmv_v2_64,
    handle_cublasZhbmv_v2,
    handle_cublasZhbmv_v2_64,
    handle_cublasSspmv_v2,
    handle_cublasSspmv_v2_64,
    handle_cublasDspmv_v2,
    handle_cublasDspmv_v2_64,
    handle_cublasChpmv_v2,
    handle_cublasChpmv_v2_64,
    handle_cublasZhpmv_v2,
    handle_cublasZhpmv_v2_64,
    handle_cublasSger_v2,
    handle_cublasSger_v2_64,
    handle_cublasDger_v2,
    handle_cublasDger_v2_64,
    handle_cublasCgeru_v2,
    handle_cublasCgeru_v2_64,
    handle_cublasCgerc_v2,
    handle_cublasCgerc_v2_64,
    handle_cublasZgeru_v2,
    handle_cublasZgeru_v2_64,
    handle_cublasZgerc_v2,
    handle_cublasZgerc_v2_64,
    handle_cublasSsyr_v2,
    handle_cublasSsyr_v2_64,
    handle_cublasDsyr_v2,
    handle_cublasDsyr_v2_64,
    handle_cublasCsyr_v2,
    handle_cublasCsyr_v2_64,
    handle_cublasZsyr_v2,
    handle_cublasZsyr_v2_64,
    handle_cublasCher_v2,
    handle_cublasCher_v2_64,
    handle_cublasZher_v2,
    handle_cublasZher_v2_64,
    handle_cublasSspr_v2,
    handle_cublasSspr_v2_64,
    handle_cublasDspr_v2,
    handle_cublasDspr_v2_64,
    handle_cublasChpr_v2,
    handle_cublasChpr_v2_64,
    handle_cublasZhpr_v2,
    handle_cublasZhpr_v2_64,
    handle_cublasSsyr2_v2,
    handle_cublasSsyr2_v2_64,
    handle_cublasDsyr2_v2,
    handle_cublasDsyr2_v2_64,
    handle_cublasCsyr2_v2,
    handle_cublasCsyr2_v2_64,
    handle_cublasZsyr2_v2,
    handle_cublasZsyr2_v2_64,
    handle_cublasCher2_v2,
    handle_cublasCher2_v2_64,
    handle_cublasZher2_v2,
    handle_cublasZher2_v2_64,
    handle_cublasSspr2_v2,
    handle_cublasSspr2_v2_64,
    handle_cublasDspr2_v2,
    handle_cublasDspr2_v2_64,
    handle_cublasChpr2_v2,
    handle_cublasChpr2_v2_64,
    handle_cublasZhpr2_v2,
    handle_cublasZhpr2_v2_64,
    handle_cublasSgemvBatched,
    handle_cublasTSTgemvBatched,
    handle_cublasSgemvStridedBatched,
    handle_cublasSgemvStridedBatched_64,
    handle_cublasDgemvStridedBatched,
    handle_cublasDgemvStridedBatched_64,
    handle_cublasCgemvStridedBatched,
    handle_cublasCgemvStridedBatched_64,
    handle_cublasZgemvStridedBatched,
    handle_cublasZgemvStridedBatched_64,
    handle_cublasHSHgemvStridedBatched,
    handle_cublasHSHgemvStridedBatched_64,
    handle_cublasHSSgemvStridedBatched,
    handle_cublasHSSgemvStridedBatched_64,
    handle_cublasTSTgemvStridedBatched,
    handle_cublasTSTgemvStridedBatched_64,
    handle_cublasTSSgemvStridedBatched,
    handle_cublasTSSgemvStridedBatched_64,
    handle_cublasSgemm_v2,
    handle_cublasSgemm_v2_64,
    handle_cublasDgemm_v2,
    handle_cublasDgemm_v2_64,
    handle_cublasCgemm_v2,
    handle_cublasCgemm_v2_64,
    handle_cublasCgemm3m,
    handle_cublasCgemm3m_64,
    handle_cublasZgemm_v2,
    handle_cublasZgemm_v2_64,
    handle_cublasZgemm3m,
    handle_cublasZgemm3m_64,
    handle_cublasHgemm,
    handle_cublasHgemm_64,
    handle_cublasSsyrk_v2,
    handle_cublasSsyrk_v2_64,
    handle_cublasDsyrk_v2,
    handle_cublasDsyrk_v2_64,
    handle_cublasCsyrk_v2,
    handle_cublasCsyrk_v2_64,
    handle_cublasZsyrk_v2,
    handle_cublasZsyrk_v2_64,
    handle_cublasCherk_v2,
    handle_cublasCherk_v2_64,
    handle_cublasZherk_v2,
    handle_cublasZherk_v2_64,
    handle_cublasSsyr2k_v2,
    handle_cublasSsyr2k_v2_64,
    handle_cublasDsyr2k_v2,
    handle_cublasDsyr2k_v2_64,
    handle_cublasCsyr2k_v2,
    handle_cublasCsyr2k_v2_64,
    handle_cublasZsyr2k_v2,
    handle_cublasZsyr2k_v2_64,
    handle_cublasCher2k_v2,
    handle_cublasCher2k_v2_64,
    handle_cublasZher2k_v2,
    handle_cublasZher2k_v2_64,
    handle_cublasSsyrkx,
    handle_cublasSsyrkx_64,
    handle_cublasDsyrkx,
    handle_cublasDsyrkx_64,
    handle_cublasCsyrkx,
    handle_cublasCsyrkx_64,
    handle_cublasZsyrkx,
    handle_cublasZsyrkx_64,
    handle_cublasCherkx,
    handle_cublasCherkx_64,
    handle_cublasZherkx,
    handle_cublasZherkx_64,
    handle_cublasSsymm_v2,
    handle_cublasSsymm_v2_64,
    handle_cublasDsymm_v2,
    handle_cublasDsymm_v2_64,
    handle_cublasCsymm_v2,
    handle_cublasCsymm_v2_64,
    handle_cublasZsymm_v2,
    handle_cublasZsymm_v2_64,
    handle_cublasChemm_v2,
    handle_cublasChemm_v2_64,
    handle_cublasZhemm_v2,
    handle_cublasZhemm_v2_64,
    handle_cublasStrsm_v2,
    handle_cublasStrsm_v2_64,
    handle_cublasDtrsm_v2,
    handle_cublasDtrsm_v2_64,
    handle_cublasCtrsm_v2,
    handle_cublasCtrsm_v2_64,
    handle_cublasZtrsm_v2,
    handle_cublasZtrsm_v2_64,
    handle_cublasStrmm_v2,
    handle_cublasStrmm_v2_64,
    handle_cublasDtrmm_v2,
    handle_cublasDtrmm_v2_64,
    handle_cublasCtrmm_v2,
    handle_cublasCtrmm_v2_64,
    handle_cublasZtrmm_v2,
    handle_cublasZtrmm_v2_64,
    handle_cublasHgemmBatched,
    handle_cublasHgemmBatched_64,
    handle_cublasSgemmBatched,
    handle_cublasSgemmBatched_64,
    handle_cublasDgemmBatched,
    handle_cublasDgemmBatched_64,
    handle_cublasCgemmBatched,
    handle_cublasCgemmBatched_64,
    handle_cublasCgemm3mBatched,
    handle_cublasCgemm3mBatched_64,
    handle_cublasZgemmBatched,
    handle_cublasZgemmBatched_64,
    handle_cublasHgemmStridedBatched,
    handle_cublasHgemmStridedBatched_64,
    handle_cublasSgemmStridedBatched,
    handle_cublasSgemmStridedBatched_64,
    handle_cublasDgemmStridedBatched,
    handle_cublasDgemmStridedBatched_64,
    handle_cublasCgemmStridedBatched,
    handle_cublasCgemmStridedBatched_64,
    handle_cublasCgemm3mStridedBatched,
    handle_cublasCgemm3mStridedBatched_64,
    handle_cublasZgemmStridedBatched,
    handle_cublasZgemmStridedBatched_64,
    nullptr,
    handle_cublasGemmBatchedEx_64,
    handle_cublasSgeam,
    handle_cublasSgeam_64,
    handle_cublasDgeam,
    handle_cublasDgeam_64,
    handle_cublasCgeam,
    handle_cublasCgeam_64,
    handle_cublasZgeam,
    handle_cublasZgeam_64,
    handle_cublasStrsmBatched,
    handle_cublasStrsmBatched_64,
    handle_cublasDtrsmBatched,
    handle_cublasDtrsmBatched_64,
    handle_cublasCtrsmBatched,
    handle_cublasCtrsmBatched_64,
    handle_cublasZtrsmBatched,
    handle_cublasZtrsmBatched_64,
    handle_cublasSdgmm,
    handle_cublasSdgmm_64,
    handle_cublasDdgmm,
    handle_cublasDdgmm_64,
    handle_cublasCdgmm,
    handle_cublasCdgmm_64,
    handle_cublasZdgmm,
    handle_cublasZdgmm_64,
    handle_cublasSmatinvBatched,
    handle_cublasDmatinvBatched,
    handle_cublasCmatinvBatched,
    handle_cublasZmatinvBatched,
    handle_cublasSgeqrfBatched,
    handle_cublasDgeqrfBatched,
    handle_cublasCgeqrfBatched,
    handle_cublasZgeqrfBatched,
    handle_cublasSgelsBatched,
    handle_cublasDgelsBatched,
    handle_cublasCgelsBatched,
    handle_cublasZgelsBatched,
    handle_cublasStpttr,
    handle_cublasDtpttr,
    handle_cublasCtpttr,
    handle_cublasZtpttr,
    handle_cublasStrttp,
    handle_cublasDtrttp,
    handle_cublasCtrttp,
    handle_cublasZtrttp,
    handle_cublasSgetriBatched,
    handle_cublasDgetriBatched,
    handle_cublasCgetriBatched,
    handle_cublasZgetriBatched,
    handle_cublasSgetrsBatched,
    handle_cublasDgetrsBatched,
    handle_cublasCgetrsBatched,
    handle_cublasZgetrsBatched,
    handle_cublasUint8gemmBias,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    nullptr,
    handle_cudnnGetProperty,
    handle_cudnnCreate,
    handle_cudnnDestroy,
    handle_cudnnSetStream,
    handle_cudnnGetStream,
    handle_cudnnGetCallback,
    handle_cudnnGraphVersionCheck,
    handle_cudnnBackendCreateDescriptor,
    handle_cudnnBackendDestroyDescriptor,
    handle_cudnnBackendInitialize,
    handle_cudnnBackendFinalize,
    handle_cudnnBackendSetAttribute,
    handle_cudnnBackendExecute,
    handle_cudnnBackendPopulateCudaGraph,
    handle_cudnnBackendUpdateCudaGraph,
    handle_cudnnCreateTensorDescriptor,
    handle_cudnnSetTensor4dDescriptor,
    handle_cudnnSetTensor4dDescriptorEx,
    handle_cudnnGetTensor4dDescriptor,
    handle_cudnnGetTensorSizeInBytes,
    handle_cudnnDestroyTensorDescriptor,
    handle_cudnnInitTransformDest,
    handle_cudnnCreateTensorTransformDescriptor,
    handle_cudnnDestroyTensorTransformDescriptor,
    handle_cudnnCreateOpTensorDescriptor,
    handle_cudnnSetOpTensorDescriptor,
    handle_cudnnGetOpTensorDescriptor,
    handle_cudnnDestroyOpTensorDescriptor,
    handle_cudnnCreateReduceTensorDescriptor,
    handle_cudnnSetReduceTensorDescriptor,
    handle_cudnnGetReduceTensorDescriptor,
    handle_cudnnDestroyReduceTensorDescriptor,
    handle_cudnnGetReductionIndicesSize,
    handle_cudnnGetReductionWorkspaceSize,
    handle_cudnnCreateFilterDescriptor,
    handle_cudnnSetFilter4dDescriptor,
    handle_cudnnGetFilter4dDescriptor,
    handle_cudnnGetFilterSizeInBytes,
    handle_cudnnDestroyFilterDescriptor,
    handle_cudnnCreatePoolingDescriptor,
    handle_cudnnSetPooling2dDescriptor,
    handle_cudnnGetPooling2dDescriptor,
    handle_cudnnGetPooling2dForwardOutputDim,
    handle_cudnnDestroyPoolingDescriptor,
    handle_cudnnCreateActivationDescriptor,
    handle_cudnnSetActivationDescriptor,
    handle_cudnnGetActivationDescriptor,
    handle_cudnnSetActivationDescriptorSwishBeta,
    handle_cudnnGetActivationDescriptorSwishBeta,
    handle_cudnnDestroyActivationDescriptor,
    handle_cudnnActivationForward,
    handle_cudnnCreateLRNDescriptor,
    handle_cudnnSetLRNDescriptor,
    handle_cudnnGetLRNDescriptor,
    handle_cudnnDestroyLRNDescriptor,
    handle_cudnnDeriveBNTensorDescriptor,
    handle_cudnnDeriveNormTensorDescriptor,
    handle_cudnnCreateSpatialTransformerDescriptor,
    handle_cudnnDestroySpatialTransformerDescriptor,
    handle_cudnnCreateDropoutDescriptor,
    handle_cudnnDestroyDropoutDescriptor,
    handle_cudnnDropoutGetStatesSize,
    handle_cudnnDropoutGetReserveSpaceSize,
    handle_cudnnGetDropoutDescriptor,
    handle_cudnnOpsVersionCheck,
    handle_cudnnGetBatchNormalizationForwardTrainingExWorkspaceSize,
    handle_cudnnGetBatchNormalizationBackwardExWorkspaceSize,
    handle_cudnnGetBatchNormalizationTrainingExReserveSpaceSize,
    handle_cudnnGetNormalizationForwardTrainingWorkspaceSize,
    handle_cudnnGetNormalizationBackwardWorkspaceSize,
    handle_cudnnGetNormalizationTrainingReserveSpaceSize,
};

RequestHandler get_handler(const int op) {
  if (op > (sizeof(opHandlers) / sizeof(opHandlers[0])))
    return nullptr;
  return opHandlers[op];
}
